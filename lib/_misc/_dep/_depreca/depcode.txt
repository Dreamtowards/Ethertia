

//    // http://www.cse.yorku.ca/~amana/research/grid.pdf
//    // Impl of Grid Voxel Raycast.
//    bool raycast(glm::vec3 rpos, glm::vec3 rdir, glm::vec3& _pos, u8& _face) {
//        using glm::vec3;
//
//        vec3 step = glm::sign(rdir);
//
//        vec3 tMax = glm::abs( (glm::fract(rpos)) - glm::max(step, 0.0f)) / glm::abs(rdir);
//
//        vec3 tDelta = 1.0f / glm::abs(rdir);
//
//        glm::vec3 p = glm::floor(rpos);
//
//        int itr = 0;
//        while (++itr < 100) {
//            int face;
//            if (tMax.x < tMax.y && tMax.x < tMax.z) {
//                p.x += step.x;
//                tMax.x += tDelta.x;
//                face = step.x > 0 ? 0 : 1;
//            } else if (tMax.y < tMax.z) {
//                p.y += step.y;
//                tMax.y += tDelta.y;
//                face = step.y > 0 ? 2 : 3;
//            } else {
//                p.z += step.z;
//                tMax.z += tDelta.z;
//                face = step.z > 0 ? 4 : 5;
//            }
//
//            MaterialStat& b = getBlock(p);
//            if (b.id) {
//                _pos = p;
//                _face = face;
//                return true;
//            }
//        }
//        return false;
//    }

//    static void collideAABB(const AABB& self, glm::vec3& d, const AABB& coll) {
//
//
//        if (d.y != 0 && AABB::intersectsAxis(self, coll, 0) && AABB::intersectsAxis(self, coll, 2)) {
//            if (d.y < 0 && self.min.y >= coll.max.y) {
//                d.y = absmin(d.y, coll.max.y - self.min.y);
//            } else if (d.y > 0 && self.max.y <= coll.min.y) {
//                d.y = absmin(d.y, coll.min.y - self.max.y);
//            }
//        }
//        if (d.x != 0 && AABB::intersectsAxis(self, coll, 1) && AABB::intersectsAxis(self, coll, 2)) {
//            if (d.x < 0 && self.min.x >= coll.max.x) {
//                d.x = absmin(d.x, coll.max.x - self.min.x);
//            } else if (d.x > 0 && self.max.x <= coll.min.x) {
//                d.x = absmin(d.x, coll.min.x - self.max.x);
//            }
//        }
//        if (d.z != 0 && AABB::intersectsAxis(self, coll, 0) && AABB::intersectsAxis(self, coll, 1)) {
//            if (d.z < 0 && self.min.z >= coll.max.z) {
//                d.z = absmin(d.z, coll.max.z - self.min.z);
//            } else if (d.z > 0 && self.max.z <= coll.min.z) {
//                d.z = absmin(d.z, coll.min.z - self.max.z);
//            }
//        }
//
//    }
//
//    static float absmin(float a, float b) {
//        return Mth::abs(a) < Mth::abs(b) ? a : b;
//    }





//    EntityCar* car = new EntityCar();
//    world->addEntity(car);
//    car->setPosition({10, 10, -10});


//        EntityRaycastCar* raycastCar = new EntityRaycastCar();
//    raycastCar->setPosition({0, 5, -10});
//    world->addEntity(raycastCar);

//        EventBus::EVENT_BUS.listen([&, raycastCar](KeyboardEvent* e) {
//            if (e->isPressed()) {
//                int key = e->getKey();
//                if (key == GLFW_KEY_ESCAPE) {
//                } else if (isIngame()) {
//                    if (key == GLFW_KEY_SLASH) {
//                        getRootGUI()->addGui(GuiScreenChat::INST);
//                    } else if (key == GLFW_KEY_G) {
//                        raycastCar->m_vehicle->applyEngineForce(100, 2);
//                        raycastCar->m_vehicle->applyEngineForce(100, 3);
//
//                        raycastCar->m_vehicle->setBrake(100, 2);
//                        raycastCar->m_vehicle->setBrake(100, 3);
//
//
//                        raycastCar->m_vehicle->setSteeringValue(0, 0);
//                        raycastCar->m_vehicle->setSteeringValue(0, 1);
//
//                        Log::info("Force");
//                    }
//                }
//            }
//        });



//    void addTaskOrExec() {
//        if (m_ThreadId == std::this_thread::get_id()) {  // execute immediately.
//            task();
//        } else {  // delay.
//            addTask();
//        }
//    }


        if (enet_address_set_host(&addr, hostname.c_str()) < 0)
            throw std::runtime_error(Strings::fmt("illegal hostname '{}', expect ip or domain name.", hostname));



#include <httplib/httplib.h>

httplib::Server serv;
serv.Get("/motd", [](const httplib::Request& req, httplib::Response& resp) {

resp.set_content(R"({"server_name": "The Dedicated Server"})", "application/json");
});

serv.listen("0.0.0.0", 8080);










    NoiseGeneratorPerlin noise{};


    ChunkGenerator() {
        noise.initPermutations(1);

    }

    static int sampIdx(int sX, int sZ, int sY) {
        int samples = 4+1;
        return (sX * samples + sZ) * samples + sY;
    }









        auto _Simplex = FastNoise::New<FastNoise::Simplex>();
        auto _Frac = FastNoise::New<FastNoise::FractalFBm>();

        _Frac->SetSource(_Simplex);
        _Frac->SetOctaveCount(5);

        std::vector<float> v(16*16*16);
        _Frac->GenUniformGrid3D(v.data(), 0,0,0, 16,16,16, 0.2f, 1337);




//            for (int rx = 0; rx < 16; ++rx) {
//                for (int ry = 0; ry < 16; ++ry) {
//                    for (int rz = 0; rz < 16; ++rz) {
//                        vec3 rp = vec3(rx, ry, rz);
//                        vec3 p = chunkpos + rp;
//
//                        if (p.y < -10)
//                            chunk->setMaterial(rp, MaterialStat(Materials::STONE, 0.5));
//                    }
//                }
//            }
//
//        return chunk;

        {
            for (int rx = 0; rx < 16; ++rx) {
                for (int rz = 0; rz < 16; ++rz) {
                    vec3 rp = vec3(rx, 0, rz);
                    vec3 p = chunkpos + rp;
                    float f = noise.fbm(p.x / 40.5f, p.z / 40.53f, 4) * 20;

                    for (int ry = 0; ry < 16; ++ry) {
                        float dens = f-(chunkpos.y+ry);
                        chunk->setCell(rx, ry, rz, Cell(dens > 0 ? Materials::STONE : Materials::AIR, dens));
                    }
                }
            }
        }
        return chunk;


        int samples = 4;
        int sampleSize = 4;

        double samps[125];  // len: numSampXYZ mul. 5*17*5=425; (samplesXZ+1)*(samplesY+1)*(samplesXZ+1)
        int cX = (int)chunkpos.x / 16;
        int cY = (int)chunkpos.y / 16;
        int cZ = (int)chunkpos.z / 16;
//        terrgenNoiseGen(samps, cX*samplesXZ,
//                        cY*samplesY,
//                        cZ*samplesXZ, samplesXZ+1, samplesY+1, samplesXZ+1);

        int tmpi = 0;
        for (int i = 0; i < 5; ++i) {
            for (int j = 0; j < 5; ++j) {
                for (int l = 0; l < 5; ++l) {
                    double ax = cX*samples + i;
                    double az = cZ*samples + j;
                    double ay = cY*samples + l;
                    double f = noise.fbm(ax/14, ay/12, az/14, 4);

                    double p = noise.fbm(ax/8, az/8, 1);
                    p = p-ay/10;

                    p += f* (p<0?12:1);

                    samps[tmpi++] = p;
                }
            }
        }

//        for (int rx = 0; rx < 16; ++rx) {
//            for (int rz = 0; rz < 16; ++rz) {
//                for (int ry = 0; ry < 16; ++ry) {
//                    float x = chunkpos.x + rx;
//                    float y = chunkpos.y + ry;
//                    float z = chunkpos.z + rz;
//                    float f = noise.noise(x / 40, y / 60, z / 40);
//
//                    if (f < 0)
//                        chunk->setBlock(rx, ry, rz, 1);
//
//                }
//            }
//        }

        for(int sX = 0; sX < samples; ++sX) {
            for(int sZ = 0; sZ < samples; ++sZ) {
                for(int sY = 0; sY < samples; ++sY) {
                    double sp000sum = samps[sampIdx(sX, sZ, sY)];
                    double sp010sum = samps[sampIdx(sX, sZ+1, sY)];
                    double sp100sum = samps[sampIdx(sX+1, sZ, sY)];
                    double sp110sum = samps[sampIdx(sX+1, sZ+1, sY)];
                    double sp001Ydiff = (samps[sampIdx(sX, sZ, sY+1)] - sp000sum) / sampleSize;
                    double sp011Ydiff = (samps[sampIdx(sX, sZ+1, sY+1)] - sp010sum) / sampleSize;
                    double sp101Ydiff = (samps[sampIdx(sX+1, sZ, sY+1)] - sp100sum) / sampleSize;
                    double sp111Ydiff = (samps[sampIdx(sX+1, sZ+1, sY+1)] - sp110sum) / sampleSize;

                    for(int dY = 0; dY < sampleSize; ++dY) {
                        double spXsum0 = sp000sum;
                        double spXsum1 = sp010sum;
                        double spXdiffz0 = (sp100sum - sp000sum) / sampleSize;
                        double spXdiffz1 = (sp110sum - sp010sum) / sampleSize;

                        for(int dX = 0; dX < sampleSize; ++dX) {  // X
                            double spZsum = spXsum0;
                            double spZdiffx0 = (spXsum1 - spXsum0) / sampleSize;

                            for(int dZ = 0; dZ < sampleSize; ++dZ) {
//                                if (sY * sampSizeY + dY < seaLevel) {
//                                    if (tmpera < 0.5D && sY * sampSizeY + dY >= seaLevel - 1) {
//                                        block = Block.ice.blockID;
//                                    } else {
//                                        block = Block.waterStill.blockID;
//                                    }
//                                }
                                //Log::info("F: ", spZsum);

                                float y = chunkpos.y+sY*sampleSize+dY;

                                u8 bl = 0;
                                if (spZsum > 0.0) {
                                    bl = Materials::STONE;
                                } else if (y < 0) {
                                    //bl = 0;//Blocks::WATER;
                                    bl = Materials::WATER;
                                }
//                                if (y > 30) {
//                                    bl = Materials::GRASS;
//                                }
//                                if (bl) {
                                chunk->setCell(sX * sampleSize + dX, sY * sampleSize + dY, sZ * sampleSize + dZ,
                                                   Cell(bl, spZsum));
//                                }
                                spZsum += spZdiffx0;
                            }

                            spXsum0 += spXdiffz0;
                            spXsum1 += spXdiffz1;
                        }

                        sp000sum += sp001Ydiff;
                        sp010sum += sp011Ydiff;
                        sp100sum += sp101Ydiff;
                        sp110sum += sp111Ydiff;
                    }
                }
            }
        }


        return chunk;












#target_link_libraries(DedicatedServer PRIVATE FastNoise2)

#target_link_libraries(Ethertia PRIVATE BulletDynamics BulletCollision LinearMath)
#target_link_libraries(Ethertia PRIVATE FastNoise2)




#if (APPLE)
#    target_link_libraries(Ethertia PRIVATE
#            "-framework Cocoa"
#            "-framework OpenGL"
#            "-framework IOKit"
#            "-framework OpenAL")

#endif()
#if (WIN32)
    #   mingw-w64 WinLibs build, add mingw64/bin to PATH without space. "winlibs-x86_64-posix-seh-gcc-12.2.0-llvm-14.0.6-mingw-w64ucrt-10.0.0-r2.zip" 'https://winlibs.com/'

    # ordered. enet networking.
#    target_link_libraries(Ethertia        PRIVATE winmm gdi32 wsock32 ws2_32)
#    target_link_libraries(DedicatedServer PRIVATE winmm gdi32 wsock32 ws2_32)
#endif()





#add_executable(Elytra
#        src/ethertia/lang/symbol/Scope.cpp
#        src/ethertia/lang/lexer/TokenType.cpp
#        src/ethertia/lang/symbol/SymbolInternalTypes.cpp
#        )



## lib fmt
#add_subdirectory(lib/fmt)
#target_link_libraries(Ethertia PRIVATE fmt::fmt)



#target_precompile_headers(Ethertia PRIVATE
#        <algorithm>
#        "lib/json/include/nlohmann/json.hpp"
#        )

#set(CMAKE_C_COMPILER ccache gcc)
#set(CMAKE_CXX_COMPILER ccache g++)

#find_program(CCACHE_PROGRAM ccache)
#if(CCACHE_PROGRAM)
#    message(STATUS "Set up ccache ...")
#    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
#    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
#endif()






#add_executable(Launcher
#        lib/tinyfd/tinyfiledialogs.c
#        src/ethertia/util/launcher/Launcher.cpp
#        )
#
## lib libui
#add_subdirectory(lib/libui)
#target_link_libraries(Launcher PRIVATE libui)




//        return;
//        for (Entity* e : entities) {
//            // motion
//            e->prevposition = e->position;
//
//            e->position += e->velocity * dt;
//
//            float vels = glm::length(e->velocity);
//            float linearDamping = 0.001f;
//            e->velocity *= vels < 0.01 ? 0 : Mth::pow(linearDamping, dt);
//
//            // collide
//            // get aabb of blocks that inside (prevpos, currpos)
//            // for each axis xyz, test nearest plane, and clip position & velocity
//
////            for (int dx = Mth::floor(e->position.x); dx < Mth::ceil(e->prevposition.x); ++dx) {
////                for (int dy = Mth::floor(e->position.y); dy < Mth::ceil(e->prevposition.y); ++dy) {
////                    for (int dz = Mth::floor(e->position.z); dz < Mth::ceil(e->prevposition.z); ++dz) {
////
////                    }
////                }
////            }
//
//            {
//                if (false ) {  // || !Ethertia::getWindow()->isAltKeyDown()
//                    glm::vec3& v = e->velocity;
//
//                    glm::vec3 pp = e->prevposition;
//                    AABB self = AABB({pp - glm::vec3(0.5f)},
//                                     {pp + glm::vec3(0.5f)});
//
//                    glm::vec3 d = e->position - e->prevposition;
//                    const glm::vec3 od = d;
//
//                    glm::vec3 bmin = glm::floor(glm::min(e->position, e->prevposition) - glm::vec3(0.5f));
//                    glm::vec3 bmax = glm::ceil(glm::max(e->position, e->prevposition) + glm::vec3(0.5f));
//
//                    for (int dx = bmin.x; dx < bmax.x; ++dx) {
//                        for (int dy = bmin.y; dy < bmax.y; ++dy) {
//                            for (int dz = bmin.z; dz < bmax.z; ++dz) {
//
//                                glm::vec3 min(dx, dy, dz);
//                                glm::vec3 max = min + glm::vec3(1);
//
//                                BlockState b = getBlock(min);
//                                if (!b.id) continue;
//
//                                collideAABB(self, d, AABB(min, max));
//                            }
//                        }
//                    }
//
//
//                    if (d.x != od.x) v.x = 0;
//                    if (d.y != od.y) v.y = 0;
//                    if (d.z != od.z) v.z = 0;
//
//                    e->position = e->prevposition + d;
//
//                }
//            }
//
//
//
//        }

//            int numFreq = nFFT / 2;
//            std::cout << "IDX ";
//            for (int i = 0; i < numFreq; ++i)
//            {
//                const float skewedProportionY = 1.0f - std::exp(std::log ((float)(numFreq - 1 - i) / numFreq) * 0.2f);
//                assert(skewedProportionY >= 0 && skewedProportionY <= 1.0f);
//
//                int fftIdx = (int)(skewedProportionY * numFreq);
//
//                float re = dst[fftIdx].real(), im = dst[fftIdx].imag();
//                float magnitude = std::sqrt(re*re + im*im);
//
//                std::cout << fftIdx << " ";
////                float dB = /*20.0f */ std::log10(magnitude) / 20.0;
//
//
//                Gui::drawRect(x+ i*w/(float)numFreq, y, 2, -(magnitude * h), Colors::WHITE);
//
//            }
//            std::cout << "\n";
//
//            int freqMark = 32;
//            int numFreqMarks = 19;
//            for (int i = 0; i < numFreqMarks; ++i) {
//
//
//                Gui::drawString(x + i*w/numFreqMarks, y, freqMark < 1024 ? std::to_string(freqMark) : Strings::fmt("{}k", freqMark / 1024), Colors::WHITE);
//                freqMark <<= 1;
//            }
