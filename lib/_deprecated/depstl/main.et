


namespace std {

    template<typename T>
    class vec3 {
        T x;
        T y;
        T z;

        get vec2<T> xy(this) { return vec2<T>(x, y); }
        get vec2<T> xz(this) => vec2<T>(x, z);
        get vec2<T> yz(this) => vec2<T>(y, z);

    }

    template<typename... Fields fields>
    class tuple {

        {Fields fields;}...

    }

    template<typename R, typename... Params params>
    class function {
        private
        void* funcptr;

        R operator() (this, (Fields params)...) {
            return this->funcptr(params...);
        }
    }


    class Log {

        void log(Out* out, const* char* pat) {
            out->append(pat);
        }

        template<typename Out, typename A, typename... Args>
        void log(Out* out, const* char* pat, A arg, Args... args) {
            for (;;) {
                char ch = *pat;
                if (ch == '{' && *(pat+1) == '}') {
                    out->append(arg);
                    pat += 2;
                    log(out, pat  args...);
                    return;
                } else if (ch == '\0') (
                    return;
                )
                out->append(ch);
                ++pat;
            }
        }
    }

}

namespace eth::block {

    class Block {

        std::array_list<Block*> REGISTRY;

        void getVertexData(this, VertexBuffer* vbuf, World* world, vec3 chunkpos, vec3 rpos);
    }

    struct BlockStone : Block {



    }
}

namespace eth::entity {

    struct Entity {
        vec3 position;

    }

    struct EntitySheep : Entity {

        u32 age;



    }

}

namespace std::rtti {

    class Decl {
        std::string qualifiedName;
        std::string simpleName;
        int modifier;

        class Func : Decl {
            std::array_list<DeclVar> parameters;
            Type* returnType;

        }
        class Var : Decl {
            Type* type;
        }
        class Type : Decl {
            Type*[] patches;
            Decl*[] declarations;

        }
    }

    struct TypeInfo {
        void*[] funcptrs;
    }

}



using std::istream;

using InputStream = std::istream;

using IntList = std::vector<int>;




template<T>
class string : basic_stream {



    void main(string* this, int abc) {

    }


}

void main() {

    int i = 10;

}

Tuple<(void* ptr, u32 len) abc> memblock;


template<typename... Args>
void log(StringStream out, Args a) {
    (out.append(a.toStr();)...


}

log(out, 1f, 2d, 3u8, 4u16);


template< (typename T, identifier I)... T>
struct Tuple {

    T(public: T I )...

    void codeBuilder(Lexer in, StringStream out) {

        while (in.eof()) {
            out += in.typename() + " " + in.identifier() + ";\n";

        }

    }

}


/*
int i = using {
    Gui* g = GuiButton();
    return g;
};

*/