// *********** THIS FILE IS GENERATED - DO NOT EDIT ***********
//     See cpp_generator.py for modifications
// ************************************************************

/*
** Copyright (c) 2017-2021 The Khronos Group Inc.
** Copyright (c) 2019-2021 Collabora, Ltd.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** ---- Exceptions to the Apache 2.0 License: ----
**
** As an exception, if you use this Software to generate code and portions of
** this Software are embedded into the generated code as a result, you may
** redistribute such product without providing attribution as would otherwise
** be required by Sections 4(a), 4(b) and 4(d) of the License.
**
** In addition, if you combine or link code generated by this Software with
** software that is licensed under the GPLv2 or the LGPL v2.0 or 2.1
** ("`Combined Software`") and if a court of competent jurisdiction determines
** that the patent provision (Section 3), the indemnity provision (Section 9)
** or other Section of the License conflicts with the conditions of the
** applicable GPL or LGPL license, you may retroactively and prospectively
** choose to deem waived or otherwise exclude such Section(s) of the License,
** but only in their entirety and only with respect to the Combined Software.
**
*/

/*
** This header is generated from the Khronos OpenXR XML API Registry.
**
*/
#ifndef OPENXR_TIME_HPP_
#define OPENXR_TIME_HPP_
/**
 * @file
 * @brief Contains a type-safe C++ projection of XrTime
 *
 * @see openxr_duration.hpp, xr::Time
 * @ingroup wrappers
 */
#include "openxr_duration.hpp"

#if !defined(OPENXR_HPP_INLINE)
#if defined(__clang___)
#if __has_attribute(always_inline)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#else
#define OPENXR_HPP_INLINE inline
#endif
#elif defined(__GNUC__)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#elif defined(_MSC_VER)
#define OPENXR_HPP_INLINE inline
#else
#define OPENXR_HPP_INLINE inline
#endif
#endif  // !OPENXR_HPP_INLINE

#if !defined(OPENXR_HPP_CONSTEXPR)
#if defined(_MSC_VER) && (_MSC_VER <= 1800)
#define OPENXR_HPP_CONSTEXPR
#else
#define OPENXR_HPP_CONSTEXPR constexpr
#endif
#endif  // !OPENXR_HPP_CONSTEXPR

#if !defined(OPENXR_HPP_SWITCH_CONSTEXPR)
//! @todo set this to constexpr in c++14
#define OPENXR_HPP_SWITCH_CONSTEXPR
#endif  // !OPENXR_HPP_SWITCH_CONSTEXPR

#if !defined(OPENXR_HPP_NAMESPACE)
#define OPENXR_HPP_NAMESPACE xr
#endif  // !OPENXR_HPP_NAMESPACE
namespace OPENXR_HPP_NAMESPACE {
/*!
 * @brief XrTime wrapper class
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrTime>
 *
 * @xrentity{XrTime}
 * @ingroup wrappers
 */
class Time {
public:
  /*!
   * @name Constructors, assignment, and conversions
   * @{
   */
  //! Default constructor.
  OPENXR_HPP_CONSTEXPR Time() noexcept = default;

  //! Explicit constructor from raw XrTime value
  OPENXR_HPP_CONSTEXPR explicit Time(XrTime v) noexcept : val_(v) {}

  //! @}
  /*!
   * @name Validity checking
   * @{
   */

  //! True if this time is valid (positive)
  OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ > 0; }
  //! Unary negation: True if this Time is invalid
  OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ <= 0; }
  //! @}
  /*!
   * @name Raw XrTime manipulation
   * @{
   */
  //! Gets the raw XrTime value.
  OPENXR_HPP_CONSTEXPR XrTime get() const noexcept { return val_; }
  /*!
   * @brief Clears this value, then returns the address of the raw XrTime value,
   * for use in creation/assignment.
   */
  XrTime *put(bool clear = true) noexcept {
    if (clear) val_ = 0;
    return &val_;
  }
  //! @}

  //! Add a Duration to the current Time
  Time &operator+=(Duration d) noexcept {
    val_ += d.get();
    return *this;
  }

  //! Subtract a Duration from the current Time
  Time &operator-=(Duration d) noexcept {
    val_ -= d.get();
    return *this;
  }

private:
  XrTime val_{};
};

static_assert(sizeof(XrTime) == sizeof(Time), "Original type and wrapper have different size!");

/*!
 * @brief Free function for getting the raw XrTime from an Time value.
 *
 * @found_by_adl
 * @see Time::get()
 * @relates Time
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrTime get(Time v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrTime from an
 * Time value.
 *
 * @found_by_adl
 * @see Time::put( )
 * @relates Time
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrTime *put(Time &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `<` comparison between Time values.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator<(Time lhs, Time rhs) noexcept {
  return lhs.get() < rhs.get();
}
//! @brief `>` comparison between Time values.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator>(Time lhs, Time rhs) noexcept {
  return lhs.get() > rhs.get();
}
//! @brief `<=` comparison between Time values.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator<=(Time lhs, Time rhs) noexcept {
  return lhs.get() <= rhs.get();
}
//! @brief `>=` comparison between Time values.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator>=(Time lhs, Time rhs) noexcept {
  return lhs.get() >= rhs.get();
}
//! @brief `==` comparison between Time values.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(Time lhs, Time rhs) noexcept {
  return lhs.get() == rhs.get();
}
//! @brief `!=` comparison between Time values.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(Time lhs, Time rhs) noexcept {
  return lhs.get() != rhs.get();
}
//! @brief `<` comparison between Time and raw XrTime.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator<(Time lhs, XrTime rhs) noexcept {
  return lhs.get() < rhs;
}
//! @brief `<` comparison between raw XrTime and Time.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator<(XrTime lhs, Time rhs) noexcept {
  return lhs < rhs.get();
}
//! @brief `>` comparison between Time and raw XrTime.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator>(Time lhs, XrTime rhs) noexcept {
  return lhs.get() > rhs;
}
//! @brief `>` comparison between raw XrTime and Time.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator>(XrTime lhs, Time rhs) noexcept {
  return lhs > rhs.get();
}
//! @brief `<=` comparison between Time and raw XrTime.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator<=(Time lhs, XrTime rhs) noexcept {
  return lhs.get() <= rhs;
}
//! @brief `<=` comparison between raw XrTime and Time.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator<=(XrTime lhs, Time rhs) noexcept {
  return lhs <= rhs.get();
}
//! @brief `>=` comparison between Time and raw XrTime.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator>=(Time lhs, XrTime rhs) noexcept {
  return lhs.get() >= rhs;
}
//! @brief `>=` comparison between raw XrTime and Time.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator>=(XrTime lhs, Time rhs) noexcept {
  return lhs >= rhs.get();
}
//! @brief `==` comparison between Time and raw XrTime.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(Time lhs, XrTime rhs) noexcept {
  return lhs.get() == rhs;
}
//! @brief `==` comparison between raw XrTime and Time.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrTime lhs, Time rhs) noexcept {
  return lhs == rhs.get();
}
//! @brief `!=` comparison between Time and raw XrTime.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(Time lhs, XrTime rhs) noexcept {
  return lhs.get() != rhs;
}
//! @brief `!=` comparison between raw XrTime and Time.
//! @relates Time
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrTime lhs, Time rhs) noexcept {
  return lhs != rhs.get();
}
//! The difference between two Time values is a Duration.
OPENXR_HPP_CONSTEXPR inline Duration operator-(Time lhs, Time rhs) noexcept {
  return Duration{lhs.get() - rhs.get()};
}

//! Subtract a Duration from a Time to get another Time
OPENXR_HPP_CONSTEXPR inline Time operator-(Time lhs, Duration rhs) noexcept {
  return Time{lhs.get() - rhs.get()};
}

//! Add a Duration to a Time to get another Time
OPENXR_HPP_CONSTEXPR inline Time operator+(Time lhs, Duration rhs) noexcept {
  return Time{lhs.get() + rhs.get()};
}

}  // namespace OPENXR_HPP_NAMESPACE

#endif  // ifndef OPENXR_TIME_HPP_
