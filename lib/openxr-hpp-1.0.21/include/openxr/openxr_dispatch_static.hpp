// *********** THIS FILE IS GENERATED - DO NOT EDIT ***********
//     See cpp_generator.py for modifications
// ************************************************************

/*
** Copyright (c) 2017-2021 The Khronos Group Inc.
** Copyright (c) 2019-2021 Collabora, Ltd.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** ---- Exceptions to the Apache 2.0 License: ----
**
** As an exception, if you use this Software to generate code and portions of
** this Software are embedded into the generated code as a result, you may
** redistribute such product without providing attribution as would otherwise
** be required by Sections 4(a), 4(b) and 4(d) of the License.
**
** In addition, if you combine or link code generated by this Software with
** software that is licensed under the GPLv2 or the LGPL v2.0 or 2.1
** ("`Combined Software`") and if a court of competent jurisdiction determines
** that the patent provision (Section 3), the indemnity provision (Section 9)
** or other Section of the License conflicts with the conditions of the
** applicable GPL or LGPL license, you may retroactively and prospectively
** choose to deem waived or otherwise exclude such Section(s) of the License,
** but only in their entirety and only with respect to the Combined Software.
**
*/

/*
** This header is generated from the Khronos OpenXR XML API Registry.
**
*/
#ifndef OPENXR_DISPATCH_STATIC_HPP_
#define OPENXR_DISPATCH_STATIC_HPP_
/**
 * @file
 * @brief Contains a "static" dispatcher class: provides only core entry points directly provided by
 * linking against the loader.
 *
 * @ingroup dispatch
 */

#include <openxr/openxr.h>

#ifdef OPENXR_HPP_DOXYGEN
#include <openxr/openxr_platform.h>
#endif

#include <type_traits>

#if !defined(OPENXR_HPP_INLINE)
#if defined(__clang___)
#if __has_attribute(always_inline)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#else
#define OPENXR_HPP_INLINE inline
#endif
#elif defined(__GNUC__)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#elif defined(_MSC_VER)
#define OPENXR_HPP_INLINE inline
#else
#define OPENXR_HPP_INLINE inline
#endif
#endif  // !OPENXR_HPP_INLINE

#if !defined(OPENXR_HPP_CONSTEXPR)
#if defined(_MSC_VER) && (_MSC_VER <= 1800)
#define OPENXR_HPP_CONSTEXPR
#else
#define OPENXR_HPP_CONSTEXPR constexpr
#endif
#endif  // !OPENXR_HPP_CONSTEXPR

#if !defined(OPENXR_HPP_SWITCH_CONSTEXPR)
//! @todo set this to constexpr in c++14
#define OPENXR_HPP_SWITCH_CONSTEXPR
#endif  // !OPENXR_HPP_SWITCH_CONSTEXPR

#if !defined(OPENXR_HPP_NAMESPACE)
#define OPENXR_HPP_NAMESPACE xr
#endif  // !OPENXR_HPP_NAMESPACE
/*!
 * @defgroup dispatch Dispatch classes
 * @brief Classes providing a method or function pointer member for OpenXR APIs.
 *
 * The classes provided here are useful basic classes, but all places that can take a dispatch class
 * are templated to be able to accept any class that meets the requirements.
 */

#ifndef XR_NO_PROTOTYPES

namespace OPENXR_HPP_NAMESPACE {

/*!
 * @brief Dispatch class for OpenXR core functions that uses exported, statically-available symbols.
 *
 * Not for use in game engines or other multi-module software where different modules might want
 * newer OpenXR APIs. If this is used, all parts of an application must build against and use the
 * same loader library.
 *
 * Does not provide extension functions because those are not exported from the loader library.
 *
 * @ingroup dispatch
 */
class DispatchLoaderStatic {
public:
  /*!
   * @name Core Commands
   * @{
   */

  //! @brief Call xrGetInstanceProcAddr
  OPENXR_HPP_INLINE XrResult xrGetInstanceProcAddr(XrInstance instance, const char* name,
                                                   PFN_xrVoidFunction* function) const {
    return ::xrGetInstanceProcAddr(instance, name, function);
  }

  //! @brief Return the function pointer for xrGetInstanceProcAddr - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrGetInstanceProcAddr getInstanceProcAddr_xrGetInstanceProcAddr() const {
    return &::xrGetInstanceProcAddr;
  }
  //! @brief Call xrEnumerateApiLayerProperties
  OPENXR_HPP_INLINE XrResult xrEnumerateApiLayerProperties(uint32_t propertyCapacityInput,
                                                           uint32_t* propertyCountOutput,
                                                           XrApiLayerProperties* properties) const {
    return ::xrEnumerateApiLayerProperties(propertyCapacityInput, propertyCountOutput, properties);
  }

  //! @brief Return the function pointer for xrEnumerateApiLayerProperties - provided just for
  //! feature parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrEnumerateApiLayerProperties
  getInstanceProcAddr_xrEnumerateApiLayerProperties() const {
    return &::xrEnumerateApiLayerProperties;
  }
  //! @brief Call xrEnumerateInstanceExtensionProperties
  OPENXR_HPP_INLINE XrResult xrEnumerateInstanceExtensionProperties(
      const char* layerName, uint32_t propertyCapacityInput, uint32_t* propertyCountOutput,
      XrExtensionProperties* properties) const {
    return ::xrEnumerateInstanceExtensionProperties(layerName, propertyCapacityInput,
                                                    propertyCountOutput, properties);
  }

  //! @brief Return the function pointer for xrEnumerateInstanceExtensionProperties - provided just
  //! for feature parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrEnumerateInstanceExtensionProperties
  getInstanceProcAddr_xrEnumerateInstanceExtensionProperties() const {
    return &::xrEnumerateInstanceExtensionProperties;
  }
  //! @brief Call xrCreateInstance
  OPENXR_HPP_INLINE XrResult xrCreateInstance(const XrInstanceCreateInfo* createInfo,
                                              XrInstance* instance) const {
    return ::xrCreateInstance(createInfo, instance);
  }

  //! @brief Return the function pointer for xrCreateInstance - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrCreateInstance getInstanceProcAddr_xrCreateInstance() const {
    return &::xrCreateInstance;
  }
  //! @brief Call xrDestroyInstance
  OPENXR_HPP_INLINE XrResult xrDestroyInstance(XrInstance instance) const {
    return ::xrDestroyInstance(instance);
  }

  //! @brief Return the function pointer for xrDestroyInstance - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrDestroyInstance getInstanceProcAddr_xrDestroyInstance() const {
    return &::xrDestroyInstance;
  }
  //! @brief Call xrGetInstanceProperties
  OPENXR_HPP_INLINE XrResult
  xrGetInstanceProperties(XrInstance instance, XrInstanceProperties* instanceProperties) const {
    return ::xrGetInstanceProperties(instance, instanceProperties);
  }

  //! @brief Return the function pointer for xrGetInstanceProperties - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrGetInstanceProperties
  getInstanceProcAddr_xrGetInstanceProperties() const {
    return &::xrGetInstanceProperties;
  }
  //! @brief Call xrPollEvent
  OPENXR_HPP_INLINE XrResult xrPollEvent(XrInstance instance, XrEventDataBuffer* eventData) const {
    return ::xrPollEvent(instance, eventData);
  }

  //! @brief Return the function pointer for xrPollEvent - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrPollEvent getInstanceProcAddr_xrPollEvent() const {
    return &::xrPollEvent;
  }
  //! @brief Call xrResultToString
  OPENXR_HPP_INLINE XrResult xrResultToString(XrInstance instance, XrResult value,
                                              char buffer[XR_MAX_RESULT_STRING_SIZE]) const {
    return ::xrResultToString(instance, value, buffer);
  }

  //! @brief Return the function pointer for xrResultToString - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrResultToString getInstanceProcAddr_xrResultToString() const {
    return &::xrResultToString;
  }
  //! @brief Call xrStructureTypeToString
  OPENXR_HPP_INLINE XrResult xrStructureTypeToString(
      XrInstance instance, XrStructureType value, char buffer[XR_MAX_STRUCTURE_NAME_SIZE]) const {
    return ::xrStructureTypeToString(instance, value, buffer);
  }

  //! @brief Return the function pointer for xrStructureTypeToString - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrStructureTypeToString
  getInstanceProcAddr_xrStructureTypeToString() const {
    return &::xrStructureTypeToString;
  }
  //! @brief Call xrGetSystem
  OPENXR_HPP_INLINE XrResult xrGetSystem(XrInstance instance, const XrSystemGetInfo* getInfo,
                                         XrSystemId* systemId) const {
    return ::xrGetSystem(instance, getInfo, systemId);
  }

  //! @brief Return the function pointer for xrGetSystem - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrGetSystem getInstanceProcAddr_xrGetSystem() const {
    return &::xrGetSystem;
  }
  //! @brief Call xrGetSystemProperties
  OPENXR_HPP_INLINE XrResult xrGetSystemProperties(XrInstance instance, XrSystemId systemId,
                                                   XrSystemProperties* properties) const {
    return ::xrGetSystemProperties(instance, systemId, properties);
  }

  //! @brief Return the function pointer for xrGetSystemProperties - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrGetSystemProperties getInstanceProcAddr_xrGetSystemProperties() const {
    return &::xrGetSystemProperties;
  }
  //! @brief Call xrEnumerateEnvironmentBlendModes
  OPENXR_HPP_INLINE XrResult xrEnumerateEnvironmentBlendModes(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t environmentBlendModeCapacityInput, uint32_t* environmentBlendModeCountOutput,
      XrEnvironmentBlendMode* environmentBlendModes) const {
    return ::xrEnumerateEnvironmentBlendModes(
        instance, systemId, viewConfigurationType, environmentBlendModeCapacityInput,
        environmentBlendModeCountOutput, environmentBlendModes);
  }

  //! @brief Return the function pointer for xrEnumerateEnvironmentBlendModes - provided just for
  //! feature parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrEnumerateEnvironmentBlendModes
  getInstanceProcAddr_xrEnumerateEnvironmentBlendModes() const {
    return &::xrEnumerateEnvironmentBlendModes;
  }
  //! @brief Call xrCreateSession
  OPENXR_HPP_INLINE XrResult xrCreateSession(XrInstance instance,
                                             const XrSessionCreateInfo* createInfo,
                                             XrSession* session) const {
    return ::xrCreateSession(instance, createInfo, session);
  }

  //! @brief Return the function pointer for xrCreateSession - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrCreateSession getInstanceProcAddr_xrCreateSession() const {
    return &::xrCreateSession;
  }
  //! @brief Call xrDestroySession
  OPENXR_HPP_INLINE XrResult xrDestroySession(XrSession session) const {
    return ::xrDestroySession(session);
  }

  //! @brief Return the function pointer for xrDestroySession - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrDestroySession getInstanceProcAddr_xrDestroySession() const {
    return &::xrDestroySession;
  }
  //! @brief Call xrEnumerateReferenceSpaces
  OPENXR_HPP_INLINE XrResult xrEnumerateReferenceSpaces(XrSession session,
                                                        uint32_t spaceCapacityInput,
                                                        uint32_t* spaceCountOutput,
                                                        XrReferenceSpaceType* spaces) const {
    return ::xrEnumerateReferenceSpaces(session, spaceCapacityInput, spaceCountOutput, spaces);
  }

  //! @brief Return the function pointer for xrEnumerateReferenceSpaces - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrEnumerateReferenceSpaces
  getInstanceProcAddr_xrEnumerateReferenceSpaces() const {
    return &::xrEnumerateReferenceSpaces;
  }
  //! @brief Call xrCreateReferenceSpace
  OPENXR_HPP_INLINE XrResult xrCreateReferenceSpace(XrSession session,
                                                    const XrReferenceSpaceCreateInfo* createInfo,
                                                    XrSpace* space) const {
    return ::xrCreateReferenceSpace(session, createInfo, space);
  }

  //! @brief Return the function pointer for xrCreateReferenceSpace - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrCreateReferenceSpace getInstanceProcAddr_xrCreateReferenceSpace() const {
    return &::xrCreateReferenceSpace;
  }
  //! @brief Call xrGetReferenceSpaceBoundsRect
  OPENXR_HPP_INLINE XrResult xrGetReferenceSpaceBoundsRect(XrSession session,
                                                           XrReferenceSpaceType referenceSpaceType,
                                                           XrExtent2Df* bounds) const {
    return ::xrGetReferenceSpaceBoundsRect(session, referenceSpaceType, bounds);
  }

  //! @brief Return the function pointer for xrGetReferenceSpaceBoundsRect - provided just for
  //! feature parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrGetReferenceSpaceBoundsRect
  getInstanceProcAddr_xrGetReferenceSpaceBoundsRect() const {
    return &::xrGetReferenceSpaceBoundsRect;
  }
  //! @brief Call xrCreateActionSpace
  OPENXR_HPP_INLINE XrResult xrCreateActionSpace(XrSession session,
                                                 const XrActionSpaceCreateInfo* createInfo,
                                                 XrSpace* space) const {
    return ::xrCreateActionSpace(session, createInfo, space);
  }

  //! @brief Return the function pointer for xrCreateActionSpace - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrCreateActionSpace getInstanceProcAddr_xrCreateActionSpace() const {
    return &::xrCreateActionSpace;
  }
  //! @brief Call xrLocateSpace
  OPENXR_HPP_INLINE XrResult xrLocateSpace(XrSpace space, XrSpace baseSpace, XrTime time,
                                           XrSpaceLocation* location) const {
    return ::xrLocateSpace(space, baseSpace, time, location);
  }

  //! @brief Return the function pointer for xrLocateSpace - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrLocateSpace getInstanceProcAddr_xrLocateSpace() const {
    return &::xrLocateSpace;
  }
  //! @brief Call xrDestroySpace
  OPENXR_HPP_INLINE XrResult xrDestroySpace(XrSpace space) const { return ::xrDestroySpace(space); }

  //! @brief Return the function pointer for xrDestroySpace - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrDestroySpace getInstanceProcAddr_xrDestroySpace() const {
    return &::xrDestroySpace;
  }
  //! @brief Call xrEnumerateViewConfigurations
  OPENXR_HPP_INLINE XrResult xrEnumerateViewConfigurations(
      XrInstance instance, XrSystemId systemId, uint32_t viewConfigurationTypeCapacityInput,
      uint32_t* viewConfigurationTypeCountOutput,
      XrViewConfigurationType* viewConfigurationTypes) const {
    return ::xrEnumerateViewConfigurations(instance, systemId, viewConfigurationTypeCapacityInput,
                                           viewConfigurationTypeCountOutput,
                                           viewConfigurationTypes);
  }

  //! @brief Return the function pointer for xrEnumerateViewConfigurations - provided just for
  //! feature parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrEnumerateViewConfigurations
  getInstanceProcAddr_xrEnumerateViewConfigurations() const {
    return &::xrEnumerateViewConfigurations;
  }
  //! @brief Call xrGetViewConfigurationProperties
  OPENXR_HPP_INLINE XrResult xrGetViewConfigurationProperties(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      XrViewConfigurationProperties* configurationProperties) const {
    return ::xrGetViewConfigurationProperties(instance, systemId, viewConfigurationType,
                                              configurationProperties);
  }

  //! @brief Return the function pointer for xrGetViewConfigurationProperties - provided just for
  //! feature parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrGetViewConfigurationProperties
  getInstanceProcAddr_xrGetViewConfigurationProperties() const {
    return &::xrGetViewConfigurationProperties;
  }
  //! @brief Call xrEnumerateViewConfigurationViews
  OPENXR_HPP_INLINE XrResult xrEnumerateViewConfigurationViews(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t viewCapacityInput, uint32_t* viewCountOutput, XrViewConfigurationView* views) const {
    return ::xrEnumerateViewConfigurationViews(instance, systemId, viewConfigurationType,
                                               viewCapacityInput, viewCountOutput, views);
  }

  //! @brief Return the function pointer for xrEnumerateViewConfigurationViews - provided just for
  //! feature parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrEnumerateViewConfigurationViews
  getInstanceProcAddr_xrEnumerateViewConfigurationViews() const {
    return &::xrEnumerateViewConfigurationViews;
  }
  //! @brief Call xrEnumerateSwapchainFormats
  OPENXR_HPP_INLINE XrResult xrEnumerateSwapchainFormats(XrSession session,
                                                         uint32_t formatCapacityInput,
                                                         uint32_t* formatCountOutput,
                                                         int64_t* formats) const {
    return ::xrEnumerateSwapchainFormats(session, formatCapacityInput, formatCountOutput, formats);
  }

  //! @brief Return the function pointer for xrEnumerateSwapchainFormats - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrEnumerateSwapchainFormats
  getInstanceProcAddr_xrEnumerateSwapchainFormats() const {
    return &::xrEnumerateSwapchainFormats;
  }
  //! @brief Call xrCreateSwapchain
  OPENXR_HPP_INLINE XrResult xrCreateSwapchain(XrSession session,
                                               const XrSwapchainCreateInfo* createInfo,
                                               XrSwapchain* swapchain) const {
    return ::xrCreateSwapchain(session, createInfo, swapchain);
  }

  //! @brief Return the function pointer for xrCreateSwapchain - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrCreateSwapchain getInstanceProcAddr_xrCreateSwapchain() const {
    return &::xrCreateSwapchain;
  }
  //! @brief Call xrDestroySwapchain
  OPENXR_HPP_INLINE XrResult xrDestroySwapchain(XrSwapchain swapchain) const {
    return ::xrDestroySwapchain(swapchain);
  }

  //! @brief Return the function pointer for xrDestroySwapchain - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrDestroySwapchain getInstanceProcAddr_xrDestroySwapchain() const {
    return &::xrDestroySwapchain;
  }
  //! @brief Call xrEnumerateSwapchainImages
  OPENXR_HPP_INLINE XrResult xrEnumerateSwapchainImages(XrSwapchain swapchain,
                                                        uint32_t imageCapacityInput,
                                                        uint32_t* imageCountOutput,
                                                        XrSwapchainImageBaseHeader* images) const {
    return ::xrEnumerateSwapchainImages(swapchain, imageCapacityInput, imageCountOutput, images);
  }

  //! @brief Return the function pointer for xrEnumerateSwapchainImages - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrEnumerateSwapchainImages
  getInstanceProcAddr_xrEnumerateSwapchainImages() const {
    return &::xrEnumerateSwapchainImages;
  }
  //! @brief Call xrAcquireSwapchainImage
  OPENXR_HPP_INLINE XrResult xrAcquireSwapchainImage(XrSwapchain swapchain,
                                                     const XrSwapchainImageAcquireInfo* acquireInfo,
                                                     uint32_t* index) const {
    return ::xrAcquireSwapchainImage(swapchain, acquireInfo, index);
  }

  //! @brief Return the function pointer for xrAcquireSwapchainImage - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrAcquireSwapchainImage
  getInstanceProcAddr_xrAcquireSwapchainImage() const {
    return &::xrAcquireSwapchainImage;
  }
  //! @brief Call xrWaitSwapchainImage
  OPENXR_HPP_INLINE XrResult xrWaitSwapchainImage(XrSwapchain swapchain,
                                                  const XrSwapchainImageWaitInfo* waitInfo) const {
    return ::xrWaitSwapchainImage(swapchain, waitInfo);
  }

  //! @brief Return the function pointer for xrWaitSwapchainImage - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrWaitSwapchainImage getInstanceProcAddr_xrWaitSwapchainImage() const {
    return &::xrWaitSwapchainImage;
  }
  //! @brief Call xrReleaseSwapchainImage
  OPENXR_HPP_INLINE XrResult xrReleaseSwapchainImage(
      XrSwapchain swapchain, const XrSwapchainImageReleaseInfo* releaseInfo) const {
    return ::xrReleaseSwapchainImage(swapchain, releaseInfo);
  }

  //! @brief Return the function pointer for xrReleaseSwapchainImage - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrReleaseSwapchainImage
  getInstanceProcAddr_xrReleaseSwapchainImage() const {
    return &::xrReleaseSwapchainImage;
  }
  //! @brief Call xrBeginSession
  OPENXR_HPP_INLINE XrResult xrBeginSession(XrSession session,
                                            const XrSessionBeginInfo* beginInfo) const {
    return ::xrBeginSession(session, beginInfo);
  }

  //! @brief Return the function pointer for xrBeginSession - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrBeginSession getInstanceProcAddr_xrBeginSession() const {
    return &::xrBeginSession;
  }
  //! @brief Call xrEndSession
  OPENXR_HPP_INLINE XrResult xrEndSession(XrSession session) const {
    return ::xrEndSession(session);
  }

  //! @brief Return the function pointer for xrEndSession - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrEndSession getInstanceProcAddr_xrEndSession() const {
    return &::xrEndSession;
  }
  //! @brief Call xrRequestExitSession
  OPENXR_HPP_INLINE XrResult xrRequestExitSession(XrSession session) const {
    return ::xrRequestExitSession(session);
  }

  //! @brief Return the function pointer for xrRequestExitSession - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrRequestExitSession getInstanceProcAddr_xrRequestExitSession() const {
    return &::xrRequestExitSession;
  }
  //! @brief Call xrWaitFrame
  OPENXR_HPP_INLINE XrResult xrWaitFrame(XrSession session, const XrFrameWaitInfo* frameWaitInfo,
                                         XrFrameState* frameState) const {
    return ::xrWaitFrame(session, frameWaitInfo, frameState);
  }

  //! @brief Return the function pointer for xrWaitFrame - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrWaitFrame getInstanceProcAddr_xrWaitFrame() const {
    return &::xrWaitFrame;
  }
  //! @brief Call xrBeginFrame
  OPENXR_HPP_INLINE XrResult xrBeginFrame(XrSession session,
                                          const XrFrameBeginInfo* frameBeginInfo) const {
    return ::xrBeginFrame(session, frameBeginInfo);
  }

  //! @brief Return the function pointer for xrBeginFrame - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrBeginFrame getInstanceProcAddr_xrBeginFrame() const {
    return &::xrBeginFrame;
  }
  //! @brief Call xrEndFrame
  OPENXR_HPP_INLINE XrResult xrEndFrame(XrSession session,
                                        const XrFrameEndInfo* frameEndInfo) const {
    return ::xrEndFrame(session, frameEndInfo);
  }

  //! @brief Return the function pointer for xrEndFrame - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrEndFrame getInstanceProcAddr_xrEndFrame() const { return &::xrEndFrame; }
  //! @brief Call xrLocateViews
  OPENXR_HPP_INLINE XrResult xrLocateViews(XrSession session,
                                           const XrViewLocateInfo* viewLocateInfo,
                                           XrViewState* viewState, uint32_t viewCapacityInput,
                                           uint32_t* viewCountOutput, XrView* views) const {
    return ::xrLocateViews(session, viewLocateInfo, viewState, viewCapacityInput, viewCountOutput,
                           views);
  }

  //! @brief Return the function pointer for xrLocateViews - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrLocateViews getInstanceProcAddr_xrLocateViews() const {
    return &::xrLocateViews;
  }
  //! @brief Call xrStringToPath
  OPENXR_HPP_INLINE XrResult xrStringToPath(XrInstance instance, const char* pathString,
                                            XrPath* path) const {
    return ::xrStringToPath(instance, pathString, path);
  }

  //! @brief Return the function pointer for xrStringToPath - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrStringToPath getInstanceProcAddr_xrStringToPath() const {
    return &::xrStringToPath;
  }
  //! @brief Call xrPathToString
  OPENXR_HPP_INLINE XrResult xrPathToString(XrInstance instance, XrPath path,
                                            uint32_t bufferCapacityInput,
                                            uint32_t* bufferCountOutput, char* buffer) const {
    return ::xrPathToString(instance, path, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Return the function pointer for xrPathToString - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrPathToString getInstanceProcAddr_xrPathToString() const {
    return &::xrPathToString;
  }
  //! @brief Call xrCreateActionSet
  OPENXR_HPP_INLINE XrResult xrCreateActionSet(XrInstance instance,
                                               const XrActionSetCreateInfo* createInfo,
                                               XrActionSet* actionSet) const {
    return ::xrCreateActionSet(instance, createInfo, actionSet);
  }

  //! @brief Return the function pointer for xrCreateActionSet - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrCreateActionSet getInstanceProcAddr_xrCreateActionSet() const {
    return &::xrCreateActionSet;
  }
  //! @brief Call xrDestroyActionSet
  OPENXR_HPP_INLINE XrResult xrDestroyActionSet(XrActionSet actionSet) const {
    return ::xrDestroyActionSet(actionSet);
  }

  //! @brief Return the function pointer for xrDestroyActionSet - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrDestroyActionSet getInstanceProcAddr_xrDestroyActionSet() const {
    return &::xrDestroyActionSet;
  }
  //! @brief Call xrCreateAction
  OPENXR_HPP_INLINE XrResult xrCreateAction(XrActionSet actionSet,
                                            const XrActionCreateInfo* createInfo,
                                            XrAction* action) const {
    return ::xrCreateAction(actionSet, createInfo, action);
  }

  //! @brief Return the function pointer for xrCreateAction - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrCreateAction getInstanceProcAddr_xrCreateAction() const {
    return &::xrCreateAction;
  }
  //! @brief Call xrDestroyAction
  OPENXR_HPP_INLINE XrResult xrDestroyAction(XrAction action) const {
    return ::xrDestroyAction(action);
  }

  //! @brief Return the function pointer for xrDestroyAction - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrDestroyAction getInstanceProcAddr_xrDestroyAction() const {
    return &::xrDestroyAction;
  }
  //! @brief Call xrSuggestInteractionProfileBindings
  OPENXR_HPP_INLINE XrResult xrSuggestInteractionProfileBindings(
      XrInstance instance, const XrInteractionProfileSuggestedBinding* suggestedBindings) const {
    return ::xrSuggestInteractionProfileBindings(instance, suggestedBindings);
  }

  //! @brief Return the function pointer for xrSuggestInteractionProfileBindings - provided just for
  //! feature parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrSuggestInteractionProfileBindings
  getInstanceProcAddr_xrSuggestInteractionProfileBindings() const {
    return &::xrSuggestInteractionProfileBindings;
  }
  //! @brief Call xrAttachSessionActionSets
  OPENXR_HPP_INLINE XrResult xrAttachSessionActionSets(
      XrSession session, const XrSessionActionSetsAttachInfo* attachInfo) const {
    return ::xrAttachSessionActionSets(session, attachInfo);
  }

  //! @brief Return the function pointer for xrAttachSessionActionSets - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrAttachSessionActionSets
  getInstanceProcAddr_xrAttachSessionActionSets() const {
    return &::xrAttachSessionActionSets;
  }
  //! @brief Call xrGetCurrentInteractionProfile
  OPENXR_HPP_INLINE XrResult
  xrGetCurrentInteractionProfile(XrSession session, XrPath topLevelUserPath,
                                 XrInteractionProfileState* interactionProfile) const {
    return ::xrGetCurrentInteractionProfile(session, topLevelUserPath, interactionProfile);
  }

  //! @brief Return the function pointer for xrGetCurrentInteractionProfile - provided just for
  //! feature parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrGetCurrentInteractionProfile
  getInstanceProcAddr_xrGetCurrentInteractionProfile() const {
    return &::xrGetCurrentInteractionProfile;
  }
  //! @brief Call xrGetActionStateBoolean
  OPENXR_HPP_INLINE XrResult xrGetActionStateBoolean(XrSession session,
                                                     const XrActionStateGetInfo* getInfo,
                                                     XrActionStateBoolean* state) const {
    return ::xrGetActionStateBoolean(session, getInfo, state);
  }

  //! @brief Return the function pointer for xrGetActionStateBoolean - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrGetActionStateBoolean
  getInstanceProcAddr_xrGetActionStateBoolean() const {
    return &::xrGetActionStateBoolean;
  }
  //! @brief Call xrGetActionStateFloat
  OPENXR_HPP_INLINE XrResult xrGetActionStateFloat(XrSession session,
                                                   const XrActionStateGetInfo* getInfo,
                                                   XrActionStateFloat* state) const {
    return ::xrGetActionStateFloat(session, getInfo, state);
  }

  //! @brief Return the function pointer for xrGetActionStateFloat - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrGetActionStateFloat getInstanceProcAddr_xrGetActionStateFloat() const {
    return &::xrGetActionStateFloat;
  }
  //! @brief Call xrGetActionStateVector2f
  OPENXR_HPP_INLINE XrResult xrGetActionStateVector2f(XrSession session,
                                                      const XrActionStateGetInfo* getInfo,
                                                      XrActionStateVector2f* state) const {
    return ::xrGetActionStateVector2f(session, getInfo, state);
  }

  //! @brief Return the function pointer for xrGetActionStateVector2f - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrGetActionStateVector2f
  getInstanceProcAddr_xrGetActionStateVector2f() const {
    return &::xrGetActionStateVector2f;
  }
  //! @brief Call xrGetActionStatePose
  OPENXR_HPP_INLINE XrResult xrGetActionStatePose(XrSession session,
                                                  const XrActionStateGetInfo* getInfo,
                                                  XrActionStatePose* state) const {
    return ::xrGetActionStatePose(session, getInfo, state);
  }

  //! @brief Return the function pointer for xrGetActionStatePose - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrGetActionStatePose getInstanceProcAddr_xrGetActionStatePose() const {
    return &::xrGetActionStatePose;
  }
  //! @brief Call xrSyncActions
  OPENXR_HPP_INLINE XrResult xrSyncActions(XrSession session,
                                           const XrActionsSyncInfo* syncInfo) const {
    return ::xrSyncActions(session, syncInfo);
  }

  //! @brief Return the function pointer for xrSyncActions - provided just for feature parity with
  //! xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrSyncActions getInstanceProcAddr_xrSyncActions() const {
    return &::xrSyncActions;
  }
  //! @brief Call xrEnumerateBoundSourcesForAction
  OPENXR_HPP_INLINE XrResult xrEnumerateBoundSourcesForAction(
      XrSession session, const XrBoundSourcesForActionEnumerateInfo* enumerateInfo,
      uint32_t sourceCapacityInput, uint32_t* sourceCountOutput, XrPath* sources) const {
    return ::xrEnumerateBoundSourcesForAction(session, enumerateInfo, sourceCapacityInput,
                                              sourceCountOutput, sources);
  }

  //! @brief Return the function pointer for xrEnumerateBoundSourcesForAction - provided just for
  //! feature parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrEnumerateBoundSourcesForAction
  getInstanceProcAddr_xrEnumerateBoundSourcesForAction() const {
    return &::xrEnumerateBoundSourcesForAction;
  }
  //! @brief Call xrGetInputSourceLocalizedName
  OPENXR_HPP_INLINE XrResult xrGetInputSourceLocalizedName(
      XrSession session, const XrInputSourceLocalizedNameGetInfo* getInfo,
      uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) const {
    return ::xrGetInputSourceLocalizedName(session, getInfo, bufferCapacityInput, bufferCountOutput,
                                           buffer);
  }

  //! @brief Return the function pointer for xrGetInputSourceLocalizedName - provided just for
  //! feature parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrGetInputSourceLocalizedName
  getInstanceProcAddr_xrGetInputSourceLocalizedName() const {
    return &::xrGetInputSourceLocalizedName;
  }
  //! @brief Call xrApplyHapticFeedback
  OPENXR_HPP_INLINE XrResult xrApplyHapticFeedback(XrSession session,
                                                   const XrHapticActionInfo* hapticActionInfo,
                                                   const XrHapticBaseHeader* hapticFeedback) const {
    return ::xrApplyHapticFeedback(session, hapticActionInfo, hapticFeedback);
  }

  //! @brief Return the function pointer for xrApplyHapticFeedback - provided just for feature
  //! parity with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrApplyHapticFeedback getInstanceProcAddr_xrApplyHapticFeedback() const {
    return &::xrApplyHapticFeedback;
  }
  //! @brief Call xrStopHapticFeedback
  OPENXR_HPP_INLINE XrResult
  xrStopHapticFeedback(XrSession session, const XrHapticActionInfo* hapticActionInfo) const {
    return ::xrStopHapticFeedback(session, hapticActionInfo);
  }

  //! @brief Return the function pointer for xrStopHapticFeedback - provided just for feature parity
  //! with xr::DispatchLoaderDynamic
  OPENXR_HPP_INLINE PFN_xrStopHapticFeedback getInstanceProcAddr_xrStopHapticFeedback() const {
    return &::xrStopHapticFeedback;
  }
  //! @}
};

#ifndef OPENXR_HPP_DOXYGEN
// forward declare and manually defining trait to avoid include
namespace traits {
  template <typename T>
  struct is_dispatch;
  template <>
  struct is_dispatch<::OPENXR_HPP_NAMESPACE::DispatchLoaderStatic> : std::true_type {};
}  // namespace traits
#endif  // !OPENXR_HPP_DOXYGEN

}  // namespace OPENXR_HPP_NAMESPACE

#endif  // ifndef XR_NO_PROTOTYPES

#endif  // ifndef OPENXR_DISPATCH_STATIC_HPP_
