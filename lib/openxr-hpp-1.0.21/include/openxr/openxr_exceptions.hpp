// *********** THIS FILE IS GENERATED - DO NOT EDIT ***********
//     See cpp_generator.py for modifications
// ************************************************************

/*
** Copyright (c) 2017-2021 The Khronos Group Inc.
** Copyright (c) 2019-2021 Collabora, Ltd.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** ---- Exceptions to the Apache 2.0 License: ----
**
** As an exception, if you use this Software to generate code and portions of
** this Software are embedded into the generated code as a result, you may
** redistribute such product without providing attribution as would otherwise
** be required by Sections 4(a), 4(b) and 4(d) of the License.
**
** In addition, if you combine or link code generated by this Software with
** software that is licensed under the GPLv2 or the LGPL v2.0 or 2.1
** ("`Combined Software`") and if a court of competent jurisdiction determines
** that the patent provision (Section 3), the indemnity provision (Section 9)
** or other Section of the License conflicts with the conditions of the
** applicable GPL or LGPL license, you may retroactively and prospectively
** choose to deem waived or otherwise exclude such Section(s) of the License,
** but only in their entirety and only with respect to the Combined Software.
**
*/

/*
** This header is generated from the Khronos OpenXR XML API Registry.
**
*/
#ifndef OPENXR_EXCEPTIONS_HPP_
#define OPENXR_EXCEPTIONS_HPP_
/**
 * @file
 * @brief C++ exceptions for the OpenXR error result codes.
 *
 * @see OPENXR_HPP_NO_EXCEPTIONS
 * @ingroup exceptions
 */

/*!
 * @def OPENXR_HPP_NO_EXCEPTIONS
 * @brief Define in order to disable throwing of exceptions from C++ projections of OpenXR methods.
 *
 * Enhanced mode calls can throw on receiving an error code, allowing only success codes to come
 * back through the normal path. Some can even omit the Result return value entirely, if there are
 * no particularly useful success codes besides Result::Success.
 *
 * @see OPENXR_HPP_DISABLE_ENHANCED_MODE
 * @see openxr_exceptions.hpp
 *
 * @ingroup config
 */

#if !defined(OPENXR_HPP_NO_EXCEPTIONS)

#include "openxr_enums.hpp"

#if !defined(OPENXR_HPP_INLINE)
#if defined(__clang___)
#if __has_attribute(always_inline)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#else
#define OPENXR_HPP_INLINE inline
#endif
#elif defined(__GNUC__)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#elif defined(_MSC_VER)
#define OPENXR_HPP_INLINE inline
#else
#define OPENXR_HPP_INLINE inline
#endif
#endif  // !OPENXR_HPP_INLINE

#if !defined(OPENXR_HPP_CONSTEXPR)
#if defined(_MSC_VER) && (_MSC_VER <= 1800)
#define OPENXR_HPP_CONSTEXPR
#else
#define OPENXR_HPP_CONSTEXPR constexpr
#endif
#endif  // !OPENXR_HPP_CONSTEXPR

#if !defined(OPENXR_HPP_SWITCH_CONSTEXPR)
//! @todo set this to constexpr in c++14
#define OPENXR_HPP_SWITCH_CONSTEXPR
#endif  // !OPENXR_HPP_SWITCH_CONSTEXPR

#if !defined(OPENXR_HPP_NAMESPACE)
#define OPENXR_HPP_NAMESPACE xr
#endif  // !OPENXR_HPP_NAMESPACE

#if !defined(OPENXR_HPP_STRINGIFY)
#define OPENXR_HPP_STRINGIFY2(text) #text
#define OPENXR_HPP_STRINGIFY(text) OPENXR_HPP_STRINGIFY2(text)
#define OPENXR_HPP_NAMESPACE_STRING OPENXR_HPP_STRINGIFY(OPENXR_HPP_NAMESPACE)
#endif  // !OPENXR_HPP_STRINGIFY
#include <stdexcept>
#include <system_error>

namespace OPENXR_HPP_NAMESPACE {

//! Implementation details
namespace impl {
#if defined(_MSC_VER) && (_MSC_VER == 1800)
#define noexcept _NOEXCEPT
#endif

  class ErrorCategoryImpl : public std::error_category {
  public:
    virtual const char* name() const noexcept override {
      return OPENXR_HPP_NAMESPACE_STRING "::Result";
    }
    virtual std::string message(int ev) const override {
      return to_string(static_cast<Result>(ev));
    }
  };

#if defined(_MSC_VER) && (_MSC_VER == 1800)
#undef noexcept
#endif

  OPENXR_HPP_INLINE const std::error_category& errorCategory() {
    static impl::ErrorCategoryImpl instance;
    return instance;
  }

  OPENXR_HPP_INLINE std::error_code make_error_code(Result e) {
    return std::error_code(static_cast<int>(e), errorCategory());
  }

  OPENXR_HPP_INLINE std::error_condition make_error_condition(Result e) {
    return std::error_condition(static_cast<int>(e), errorCategory());
  }

#if defined(_MSC_VER) && (_MSC_VER == 1800)
#define noexcept _NOEXCEPT
#endif
}  // namespace impl

//! OpenXR exceptions
namespace exceptions {
  /*!
   * @defgroup exceptions Exceptions and error handling
   *
   * @{
   */
  /*!
   * @defgroup base_exceptions Exception base classes
   * @{
   */
  //! @brief Base class for all OpenXR exceptions.
  //!
  //! Only used for catching all OpenXR exceptions.
  class Error {
  public:
    virtual ~Error() = default;

    virtual const char* what() const noexcept = 0;
  };

  //! @brief OpenXR logic error base exception class.
  //!
  //! Derives from both Error and std::logic_error for flexibility in catching.
  class LogicError : public Error, public std::logic_error {
  public:
    explicit LogicError(const std::string& what) : Error(), std::logic_error(what) {}
    explicit LogicError(char const* what) : Error(), std::logic_error(what) {}
    virtual ~LogicError() = default;

    virtual const char* what() const noexcept { return std::logic_error::what(); }
  };

  //! @brief OpenXR system error exception class - may be derived from or thrown directly.
  //!
  //! Derives from both Error and std::system_error for flexibility in catching.
  class SystemError : public Error, public std::system_error {
  public:
    SystemError(std::error_code ec) : Error(), std::system_error(ec) {}
    SystemError(std::error_code ec, std::string const& what)
        : Error(), std::system_error(ec, what) {}
    SystemError(std::error_code ec, char const* what) : Error(), std::system_error(ec, what) {}
    SystemError(int ev, std::error_category const& ecat) : Error(), std::system_error(ev, ecat) {}
    SystemError(int ev, std::error_category const& ecat, std::string const& what)
        : Error(), std::system_error(ev, ecat, what) {}
    SystemError(int ev, std::error_category const& ecat, char const* what)
        : Error(), std::system_error(ev, ecat, what) {}
    virtual ~SystemError() = default;

    virtual const char* what() const noexcept { return std::system_error::what(); }
  };

// end of base_exceptions
//! @}
#if defined(_MSC_VER) && (_MSC_VER == 1800)
#undef noexcept
#endif

  /*!
   * @defgroup result_exceptions Result-specific exceptions
   * @{
   */

  //! @brief Exception class for the Result::ErrorValidationFailure aka XR_ERROR_VALIDATION_FAILURE
  //! result code.
  class ValidationFailureError : public SystemError {
  public:
    ValidationFailureError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorValidationFailure), message) {}

    ValidationFailureError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorValidationFailure), message) {}
  };

  //! @brief Exception class for the Result::ErrorRuntimeFailure aka XR_ERROR_RUNTIME_FAILURE result
  //! code.
  class RuntimeFailureError : public SystemError {
  public:
    RuntimeFailureError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorRuntimeFailure), message) {}

    RuntimeFailureError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorRuntimeFailure), message) {}
  };

  //! @brief Exception class for the Result::ErrorOutOfMemory aka XR_ERROR_OUT_OF_MEMORY result
  //! code.
  class OutOfMemoryError : public SystemError {
  public:
    OutOfMemoryError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorOutOfMemory), message) {}

    OutOfMemoryError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorOutOfMemory), message) {}
  };

  //! @brief Exception class for the Result::ErrorAPIVersionUnsupported aka
  //! XR_ERROR_API_VERSION_UNSUPPORTED result code.
  class APIVersionUnsupportedError : public SystemError {
  public:
    APIVersionUnsupportedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorAPIVersionUnsupported), message) {}

    APIVersionUnsupportedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorAPIVersionUnsupported), message) {}
  };

  //! @brief Exception class for the Result::ErrorInitializationFailed aka
  //! XR_ERROR_INITIALIZATION_FAILED result code.
  class InitializationFailedError : public SystemError {
  public:
    InitializationFailedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorInitializationFailed), message) {}

    InitializationFailedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorInitializationFailed), message) {}
  };

  //! @brief Exception class for the Result::ErrorFunctionUnsupported aka
  //! XR_ERROR_FUNCTION_UNSUPPORTED result code.
  class FunctionUnsupportedError : public SystemError {
  public:
    FunctionUnsupportedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorFunctionUnsupported), message) {}

    FunctionUnsupportedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorFunctionUnsupported), message) {}
  };

  //! @brief Exception class for the Result::ErrorFeatureUnsupported aka
  //! XR_ERROR_FEATURE_UNSUPPORTED result code.
  class FeatureUnsupportedError : public SystemError {
  public:
    FeatureUnsupportedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorFeatureUnsupported), message) {}

    FeatureUnsupportedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorFeatureUnsupported), message) {}
  };

  //! @brief Exception class for the Result::ErrorExtensionNotPresent aka
  //! XR_ERROR_EXTENSION_NOT_PRESENT result code.
  class ExtensionNotPresentError : public SystemError {
  public:
    ExtensionNotPresentError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorExtensionNotPresent), message) {}

    ExtensionNotPresentError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorExtensionNotPresent), message) {}
  };

  //! @brief Exception class for the Result::ErrorLimitReached aka XR_ERROR_LIMIT_REACHED result
  //! code.
  class LimitReachedError : public SystemError {
  public:
    LimitReachedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorLimitReached), message) {}

    LimitReachedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorLimitReached), message) {}
  };

  //! @brief Exception class for the Result::ErrorSizeInsufficient aka XR_ERROR_SIZE_INSUFFICIENT
  //! result code.
  class SizeInsufficientError : public SystemError {
  public:
    SizeInsufficientError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSizeInsufficient), message) {}

    SizeInsufficientError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSizeInsufficient), message) {}
  };

  //! @brief Exception class for the Result::ErrorHandleInvalid aka XR_ERROR_HANDLE_INVALID result
  //! code.
  class HandleInvalidError : public SystemError {
  public:
    HandleInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorHandleInvalid), message) {}

    HandleInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorHandleInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorInstanceLost aka XR_ERROR_INSTANCE_LOST result
  //! code.
  class InstanceLostError : public SystemError {
  public:
    InstanceLostError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorInstanceLost), message) {}

    InstanceLostError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorInstanceLost), message) {}
  };

  //! @brief Exception class for the Result::ErrorSessionRunning aka XR_ERROR_SESSION_RUNNING result
  //! code.
  class SessionRunningError : public SystemError {
  public:
    SessionRunningError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSessionRunning), message) {}

    SessionRunningError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSessionRunning), message) {}
  };

  //! @brief Exception class for the Result::ErrorSessionNotRunning aka XR_ERROR_SESSION_NOT_RUNNING
  //! result code.
  class SessionNotRunningError : public SystemError {
  public:
    SessionNotRunningError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSessionNotRunning), message) {}

    SessionNotRunningError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSessionNotRunning), message) {}
  };

  //! @brief Exception class for the Result::ErrorSessionLost aka XR_ERROR_SESSION_LOST result code.
  class SessionLostError : public SystemError {
  public:
    SessionLostError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSessionLost), message) {}

    SessionLostError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSessionLost), message) {}
  };

  //! @brief Exception class for the Result::ErrorSystemInvalid aka XR_ERROR_SYSTEM_INVALID result
  //! code.
  class SystemInvalidError : public SystemError {
  public:
    SystemInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSystemInvalid), message) {}

    SystemInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSystemInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorPathInvalid aka XR_ERROR_PATH_INVALID result code.
  class PathInvalidError : public SystemError {
  public:
    PathInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorPathInvalid), message) {}

    PathInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorPathInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorPathCountExceeded aka XR_ERROR_PATH_COUNT_EXCEEDED
  //! result code.
  class PathCountExceededError : public SystemError {
  public:
    PathCountExceededError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorPathCountExceeded), message) {}

    PathCountExceededError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorPathCountExceeded), message) {}
  };

  //! @brief Exception class for the Result::ErrorPathFormatInvalid aka XR_ERROR_PATH_FORMAT_INVALID
  //! result code.
  class PathFormatInvalidError : public SystemError {
  public:
    PathFormatInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorPathFormatInvalid), message) {}

    PathFormatInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorPathFormatInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorPathUnsupported aka XR_ERROR_PATH_UNSUPPORTED
  //! result code.
  class PathUnsupportedError : public SystemError {
  public:
    PathUnsupportedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorPathUnsupported), message) {}

    PathUnsupportedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorPathUnsupported), message) {}
  };

  //! @brief Exception class for the Result::ErrorLayerInvalid aka XR_ERROR_LAYER_INVALID result
  //! code.
  class LayerInvalidError : public SystemError {
  public:
    LayerInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorLayerInvalid), message) {}

    LayerInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorLayerInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorLayerLimitExceeded aka
  //! XR_ERROR_LAYER_LIMIT_EXCEEDED result code.
  class LayerLimitExceededError : public SystemError {
  public:
    LayerLimitExceededError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorLayerLimitExceeded), message) {}

    LayerLimitExceededError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorLayerLimitExceeded), message) {}
  };

  //! @brief Exception class for the Result::ErrorSwapchainRectInvalid aka
  //! XR_ERROR_SWAPCHAIN_RECT_INVALID result code.
  class SwapchainRectInvalidError : public SystemError {
  public:
    SwapchainRectInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSwapchainRectInvalid), message) {}

    SwapchainRectInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSwapchainRectInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorSwapchainFormatUnsupported aka
  //! XR_ERROR_SWAPCHAIN_FORMAT_UNSUPPORTED result code.
  class SwapchainFormatUnsupportedError : public SystemError {
  public:
    SwapchainFormatUnsupportedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSwapchainFormatUnsupported), message) {}

    SwapchainFormatUnsupportedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSwapchainFormatUnsupported), message) {}
  };

  //! @brief Exception class for the Result::ErrorActionTypeMismatch aka
  //! XR_ERROR_ACTION_TYPE_MISMATCH result code.
  class ActionTypeMismatchError : public SystemError {
  public:
    ActionTypeMismatchError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorActionTypeMismatch), message) {}

    ActionTypeMismatchError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorActionTypeMismatch), message) {}
  };

  //! @brief Exception class for the Result::ErrorSessionNotReady aka XR_ERROR_SESSION_NOT_READY
  //! result code.
  class SessionNotReadyError : public SystemError {
  public:
    SessionNotReadyError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSessionNotReady), message) {}

    SessionNotReadyError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSessionNotReady), message) {}
  };

  //! @brief Exception class for the Result::ErrorSessionNotStopping aka
  //! XR_ERROR_SESSION_NOT_STOPPING result code.
  class SessionNotStoppingError : public SystemError {
  public:
    SessionNotStoppingError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSessionNotStopping), message) {}

    SessionNotStoppingError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSessionNotStopping), message) {}
  };

  //! @brief Exception class for the Result::ErrorTimeInvalid aka XR_ERROR_TIME_INVALID result code.
  class TimeInvalidError : public SystemError {
  public:
    TimeInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorTimeInvalid), message) {}

    TimeInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorTimeInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorReferenceSpaceUnsupported aka
  //! XR_ERROR_REFERENCE_SPACE_UNSUPPORTED result code.
  class ReferenceSpaceUnsupportedError : public SystemError {
  public:
    ReferenceSpaceUnsupportedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorReferenceSpaceUnsupported), message) {}

    ReferenceSpaceUnsupportedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorReferenceSpaceUnsupported), message) {}
  };

  //! @brief Exception class for the Result::ErrorFileAccessError aka XR_ERROR_FILE_ACCESS_ERROR
  //! result code.
  class FileAccessError : public SystemError {
  public:
    FileAccessError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorFileAccessError), message) {}

    FileAccessError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorFileAccessError), message) {}
  };

  //! @brief Exception class for the Result::ErrorFileContentsInvalid aka
  //! XR_ERROR_FILE_CONTENTS_INVALID result code.
  class FileContentsInvalidError : public SystemError {
  public:
    FileContentsInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorFileContentsInvalid), message) {}

    FileContentsInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorFileContentsInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorFormFactorUnsupported aka
  //! XR_ERROR_FORM_FACTOR_UNSUPPORTED result code.
  class FormFactorUnsupportedError : public SystemError {
  public:
    FormFactorUnsupportedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorFormFactorUnsupported), message) {}

    FormFactorUnsupportedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorFormFactorUnsupported), message) {}
  };

  //! @brief Exception class for the Result::ErrorFormFactorUnavailable aka
  //! XR_ERROR_FORM_FACTOR_UNAVAILABLE result code.
  class FormFactorUnavailableError : public SystemError {
  public:
    FormFactorUnavailableError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorFormFactorUnavailable), message) {}

    FormFactorUnavailableError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorFormFactorUnavailable), message) {}
  };

  //! @brief Exception class for the Result::ErrorAPILayerNotPresent aka
  //! XR_ERROR_API_LAYER_NOT_PRESENT result code.
  class APILayerNotPresentError : public SystemError {
  public:
    APILayerNotPresentError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorAPILayerNotPresent), message) {}

    APILayerNotPresentError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorAPILayerNotPresent), message) {}
  };

  //! @brief Exception class for the Result::ErrorCallOrderInvalid aka XR_ERROR_CALL_ORDER_INVALID
  //! result code.
  class CallOrderInvalidError : public SystemError {
  public:
    CallOrderInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorCallOrderInvalid), message) {}

    CallOrderInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorCallOrderInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorGraphicsDeviceInvalid aka
  //! XR_ERROR_GRAPHICS_DEVICE_INVALID result code.
  class GraphicsDeviceInvalidError : public SystemError {
  public:
    GraphicsDeviceInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorGraphicsDeviceInvalid), message) {}

    GraphicsDeviceInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorGraphicsDeviceInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorPoseInvalid aka XR_ERROR_POSE_INVALID result code.
  class PoseInvalidError : public SystemError {
  public:
    PoseInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorPoseInvalid), message) {}

    PoseInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorPoseInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorIndexOutOfRange aka XR_ERROR_INDEX_OUT_OF_RANGE
  //! result code.
  class IndexOutOfRangeError : public SystemError {
  public:
    IndexOutOfRangeError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorIndexOutOfRange), message) {}

    IndexOutOfRangeError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorIndexOutOfRange), message) {}
  };

  //! @brief Exception class for the Result::ErrorViewConfigurationTypeUnsupported aka
  //! XR_ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED result code.
  class ViewConfigurationTypeUnsupportedError : public SystemError {
  public:
    ViewConfigurationTypeUnsupportedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorViewConfigurationTypeUnsupported),
                      message) {}

    ViewConfigurationTypeUnsupportedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorViewConfigurationTypeUnsupported),
                      message) {}
  };

  //! @brief Exception class for the Result::ErrorEnvironmentBlendModeUnsupported aka
  //! XR_ERROR_ENVIRONMENT_BLEND_MODE_UNSUPPORTED result code.
  class EnvironmentBlendModeUnsupportedError : public SystemError {
  public:
    EnvironmentBlendModeUnsupportedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorEnvironmentBlendModeUnsupported),
                      message) {}

    EnvironmentBlendModeUnsupportedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorEnvironmentBlendModeUnsupported),
                      message) {}
  };

  //! @brief Exception class for the Result::ErrorNameDuplicated aka XR_ERROR_NAME_DUPLICATED result
  //! code.
  class NameDuplicatedError : public SystemError {
  public:
    NameDuplicatedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorNameDuplicated), message) {}

    NameDuplicatedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorNameDuplicated), message) {}
  };

  //! @brief Exception class for the Result::ErrorNameInvalid aka XR_ERROR_NAME_INVALID result code.
  class NameInvalidError : public SystemError {
  public:
    NameInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorNameInvalid), message) {}

    NameInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorNameInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorActionsetNotAttached aka
  //! XR_ERROR_ACTIONSET_NOT_ATTACHED result code.
  class ActionsetNotAttachedError : public SystemError {
  public:
    ActionsetNotAttachedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorActionsetNotAttached), message) {}

    ActionsetNotAttachedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorActionsetNotAttached), message) {}
  };

  //! @brief Exception class for the Result::ErrorActionsetsAlreadyAttached aka
  //! XR_ERROR_ACTIONSETS_ALREADY_ATTACHED result code.
  class ActionsetsAlreadyAttachedError : public SystemError {
  public:
    ActionsetsAlreadyAttachedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorActionsetsAlreadyAttached), message) {}

    ActionsetsAlreadyAttachedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorActionsetsAlreadyAttached), message) {}
  };

  //! @brief Exception class for the Result::ErrorLocalizedNameDuplicated aka
  //! XR_ERROR_LOCALIZED_NAME_DUPLICATED result code.
  class LocalizedNameDuplicatedError : public SystemError {
  public:
    LocalizedNameDuplicatedError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorLocalizedNameDuplicated), message) {}

    LocalizedNameDuplicatedError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorLocalizedNameDuplicated), message) {}
  };

  //! @brief Exception class for the Result::ErrorLocalizedNameInvalid aka
  //! XR_ERROR_LOCALIZED_NAME_INVALID result code.
  class LocalizedNameInvalidError : public SystemError {
  public:
    LocalizedNameInvalidError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorLocalizedNameInvalid), message) {}

    LocalizedNameInvalidError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorLocalizedNameInvalid), message) {}
  };

  //! @brief Exception class for the Result::ErrorGraphicsRequirementsCallMissing aka
  //! XR_ERROR_GRAPHICS_REQUIREMENTS_CALL_MISSING result code.
  class GraphicsRequirementsCallMissingError : public SystemError {
  public:
    GraphicsRequirementsCallMissingError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorGraphicsRequirementsCallMissing),
                      message) {}

    GraphicsRequirementsCallMissingError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorGraphicsRequirementsCallMissing),
                      message) {}
  };

  //! @brief Exception class for the Result::ErrorRuntimeUnavailable aka
  //! XR_ERROR_RUNTIME_UNAVAILABLE result code.
  class RuntimeUnavailableError : public SystemError {
  public:
    RuntimeUnavailableError(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorRuntimeUnavailable), message) {}

    RuntimeUnavailableError(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorRuntimeUnavailable), message) {}
  };

#ifdef XR_KHR_android_thread_settings
  //! @brief Exception class for the Result::ErrorAndroidThreadSettingsIdInvalidKHR aka
  //! XR_ERROR_ANDROID_THREAD_SETTINGS_ID_INVALID_KHR result code.
  class AndroidThreadSettingsIdInvalidErrorKHR : public SystemError {
  public:
    AndroidThreadSettingsIdInvalidErrorKHR(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorAndroidThreadSettingsIdInvalidKHR),
                      message) {}

    AndroidThreadSettingsIdInvalidErrorKHR(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorAndroidThreadSettingsIdInvalidKHR),
                      message) {}
  };
#endif  // XR_KHR_android_thread_settings
#ifdef XR_KHR_android_thread_settings
  //! @brief Exception class for the Result::ErrorAndroidThreadSettingsFailureKHR aka
  //! XR_ERROR_ANDROID_THREAD_SETTINGS_FAILURE_KHR result code.
  class AndroidThreadSettingsFailureErrorKHR : public SystemError {
  public:
    AndroidThreadSettingsFailureErrorKHR(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorAndroidThreadSettingsFailureKHR),
                      message) {}

    AndroidThreadSettingsFailureErrorKHR(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorAndroidThreadSettingsFailureKHR),
                      message) {}
  };
#endif  // XR_KHR_android_thread_settings
#ifdef XR_MSFT_spatial_anchor
  //! @brief Exception class for the Result::ErrorCreateSpatialAnchorFailedMSFT aka
  //! XR_ERROR_CREATE_SPATIAL_ANCHOR_FAILED_MSFT result code.
  class CreateSpatialAnchorFailedErrorMSFT : public SystemError {
  public:
    CreateSpatialAnchorFailedErrorMSFT(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorCreateSpatialAnchorFailedMSFT), message) {}

    CreateSpatialAnchorFailedErrorMSFT(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorCreateSpatialAnchorFailedMSFT), message) {}
  };
#endif  // XR_MSFT_spatial_anchor
#ifdef XR_MSFT_secondary_view_configuration
  //! @brief Exception class for the Result::ErrorSecondaryViewConfigurationTypeNotEnabledMSFT aka
  //! XR_ERROR_SECONDARY_VIEW_CONFIGURATION_TYPE_NOT_ENABLED_MSFT result code.
  class SecondaryViewConfigurationTypeNotEnabledErrorMSFT : public SystemError {
  public:
    SecondaryViewConfigurationTypeNotEnabledErrorMSFT(std::string const& message)
        : SystemError(
              impl::make_error_code(Result::ErrorSecondaryViewConfigurationTypeNotEnabledMSFT),
              message) {}

    SecondaryViewConfigurationTypeNotEnabledErrorMSFT(char const* message)
        : SystemError(
              impl::make_error_code(Result::ErrorSecondaryViewConfigurationTypeNotEnabledMSFT),
              message) {}
  };
#endif  // XR_MSFT_secondary_view_configuration
#ifdef XR_MSFT_controller_model
  //! @brief Exception class for the Result::ErrorControllerModelKeyInvalidMSFT aka
  //! XR_ERROR_CONTROLLER_MODEL_KEY_INVALID_MSFT result code.
  class ControllerModelKeyInvalidErrorMSFT : public SystemError {
  public:
    ControllerModelKeyInvalidErrorMSFT(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorControllerModelKeyInvalidMSFT), message) {}

    ControllerModelKeyInvalidErrorMSFT(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorControllerModelKeyInvalidMSFT), message) {}
  };
#endif  // XR_MSFT_controller_model
#ifdef XR_MSFT_composition_layer_reprojection
  //! @brief Exception class for the Result::ErrorReprojectionModeUnsupportedMSFT aka
  //! XR_ERROR_REPROJECTION_MODE_UNSUPPORTED_MSFT result code.
  class ReprojectionModeUnsupportedErrorMSFT : public SystemError {
  public:
    ReprojectionModeUnsupportedErrorMSFT(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorReprojectionModeUnsupportedMSFT),
                      message) {}

    ReprojectionModeUnsupportedErrorMSFT(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorReprojectionModeUnsupportedMSFT),
                      message) {}
  };
#endif  // XR_MSFT_composition_layer_reprojection
#ifdef XR_MSFT_scene_understanding
  //! @brief Exception class for the Result::ErrorComputeNewSceneNotCompletedMSFT aka
  //! XR_ERROR_COMPUTE_NEW_SCENE_NOT_COMPLETED_MSFT result code.
  class ComputeNewSceneNotCompletedErrorMSFT : public SystemError {
  public:
    ComputeNewSceneNotCompletedErrorMSFT(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorComputeNewSceneNotCompletedMSFT),
                      message) {}

    ComputeNewSceneNotCompletedErrorMSFT(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorComputeNewSceneNotCompletedMSFT),
                      message) {}
  };
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Exception class for the Result::ErrorSceneComponentIdInvalidMSFT aka
  //! XR_ERROR_SCENE_COMPONENT_ID_INVALID_MSFT result code.
  class SceneComponentIdInvalidErrorMSFT : public SystemError {
  public:
    SceneComponentIdInvalidErrorMSFT(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSceneComponentIdInvalidMSFT), message) {}

    SceneComponentIdInvalidErrorMSFT(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSceneComponentIdInvalidMSFT), message) {}
  };
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Exception class for the Result::ErrorSceneComponentTypeMismatchMSFT aka
  //! XR_ERROR_SCENE_COMPONENT_TYPE_MISMATCH_MSFT result code.
  class SceneComponentTypeMismatchErrorMSFT : public SystemError {
  public:
    SceneComponentTypeMismatchErrorMSFT(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSceneComponentTypeMismatchMSFT), message) {
    }

    SceneComponentTypeMismatchErrorMSFT(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSceneComponentTypeMismatchMSFT), message) {
    }
  };
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Exception class for the Result::ErrorSceneMeshBufferIdInvalidMSFT aka
  //! XR_ERROR_SCENE_MESH_BUFFER_ID_INVALID_MSFT result code.
  class SceneMeshBufferIdInvalidErrorMSFT : public SystemError {
  public:
    SceneMeshBufferIdInvalidErrorMSFT(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSceneMeshBufferIdInvalidMSFT), message) {}

    SceneMeshBufferIdInvalidErrorMSFT(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSceneMeshBufferIdInvalidMSFT), message) {}
  };
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Exception class for the Result::ErrorSceneComputeFeatureIncompatibleMSFT aka
  //! XR_ERROR_SCENE_COMPUTE_FEATURE_INCOMPATIBLE_MSFT result code.
  class SceneComputeFeatureIncompatibleErrorMSFT : public SystemError {
  public:
    SceneComputeFeatureIncompatibleErrorMSFT(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSceneComputeFeatureIncompatibleMSFT),
                      message) {}

    SceneComputeFeatureIncompatibleErrorMSFT(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSceneComputeFeatureIncompatibleMSFT),
                      message) {}
  };
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Exception class for the Result::ErrorSceneComputeConsistencyMismatchMSFT aka
  //! XR_ERROR_SCENE_COMPUTE_CONSISTENCY_MISMATCH_MSFT result code.
  class SceneComputeConsistencyMismatchErrorMSFT : public SystemError {
  public:
    SceneComputeConsistencyMismatchErrorMSFT(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSceneComputeConsistencyMismatchMSFT),
                      message) {}

    SceneComputeConsistencyMismatchErrorMSFT(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSceneComputeConsistencyMismatchMSFT),
                      message) {}
  };
#endif  // XR_MSFT_scene_understanding
#ifdef XR_FB_display_refresh_rate
  //! @brief Exception class for the Result::ErrorDisplayRefreshRateUnsupportedFB aka
  //! XR_ERROR_DISPLAY_REFRESH_RATE_UNSUPPORTED_FB result code.
  class DisplayRefreshRateUnsupportedErrorFB : public SystemError {
  public:
    DisplayRefreshRateUnsupportedErrorFB(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorDisplayRefreshRateUnsupportedFB),
                      message) {}

    DisplayRefreshRateUnsupportedErrorFB(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorDisplayRefreshRateUnsupportedFB),
                      message) {}
  };
#endif  // XR_FB_display_refresh_rate
#ifdef XR_FB_color_space
  //! @brief Exception class for the Result::ErrorColorSpaceUnsupportedFB aka
  //! XR_ERROR_COLOR_SPACE_UNSUPPORTED_FB result code.
  class ColorSpaceUnsupportedErrorFB : public SystemError {
  public:
    ColorSpaceUnsupportedErrorFB(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorColorSpaceUnsupportedFB), message) {}

    ColorSpaceUnsupportedErrorFB(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorColorSpaceUnsupportedFB), message) {}
  };
#endif  // XR_FB_color_space
#ifdef XR_FB_passthrough
  //! @brief Exception class for the Result::ErrorUnexpectedStatePassthroughFB aka
  //! XR_ERROR_UNEXPECTED_STATE_PASSTHROUGH_FB result code.
  class UnexpectedStatePassthroughErrorFB : public SystemError {
  public:
    UnexpectedStatePassthroughErrorFB(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorUnexpectedStatePassthroughFB), message) {}

    UnexpectedStatePassthroughErrorFB(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorUnexpectedStatePassthroughFB), message) {}
  };
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Exception class for the Result::ErrorFeatureAlreadyCreatedPassthroughFB aka
  //! XR_ERROR_FEATURE_ALREADY_CREATED_PASSTHROUGH_FB result code.
  class FeatureAlreadyCreatedPassthroughErrorFB : public SystemError {
  public:
    FeatureAlreadyCreatedPassthroughErrorFB(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorFeatureAlreadyCreatedPassthroughFB),
                      message) {}

    FeatureAlreadyCreatedPassthroughErrorFB(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorFeatureAlreadyCreatedPassthroughFB),
                      message) {}
  };
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Exception class for the Result::ErrorFeatureRequiredPassthroughFB aka
  //! XR_ERROR_FEATURE_REQUIRED_PASSTHROUGH_FB result code.
  class FeatureRequiredPassthroughErrorFB : public SystemError {
  public:
    FeatureRequiredPassthroughErrorFB(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorFeatureRequiredPassthroughFB), message) {}

    FeatureRequiredPassthroughErrorFB(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorFeatureRequiredPassthroughFB), message) {}
  };
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Exception class for the Result::ErrorNotPermittedPassthroughFB aka
  //! XR_ERROR_NOT_PERMITTED_PASSTHROUGH_FB result code.
  class NotPermittedPassthroughErrorFB : public SystemError {
  public:
    NotPermittedPassthroughErrorFB(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorNotPermittedPassthroughFB), message) {}

    NotPermittedPassthroughErrorFB(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorNotPermittedPassthroughFB), message) {}
  };
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Exception class for the Result::ErrorInsufficientResourcesPassthroughFB aka
  //! XR_ERROR_INSUFFICIENT_RESOURCES_PASSTHROUGH_FB result code.
  class InsufficientResourcesPassthroughErrorFB : public SystemError {
  public:
    InsufficientResourcesPassthroughErrorFB(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorInsufficientResourcesPassthroughFB),
                      message) {}

    InsufficientResourcesPassthroughErrorFB(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorInsufficientResourcesPassthroughFB),
                      message) {}
  };
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Exception class for the Result::ErrorUnknownPassthroughFB aka
  //! XR_ERROR_UNKNOWN_PASSTHROUGH_FB result code.
  class UnknownPassthroughErrorFB : public SystemError {
  public:
    UnknownPassthroughErrorFB(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorUnknownPassthroughFB), message) {}

    UnknownPassthroughErrorFB(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorUnknownPassthroughFB), message) {}
  };
#endif  // XR_FB_passthrough
#ifdef XR_FB_render_model
  //! @brief Exception class for the Result::ErrorRenderModelKeyInvalidFB aka
  //! XR_ERROR_RENDER_MODEL_KEY_INVALID_FB result code.
  class RenderModelKeyInvalidErrorFB : public SystemError {
  public:
    RenderModelKeyInvalidErrorFB(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorRenderModelKeyInvalidFB), message) {}

    RenderModelKeyInvalidErrorFB(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorRenderModelKeyInvalidFB), message) {}
  };
#endif  // XR_FB_render_model
#ifdef XR_VARJO_marker_tracking
  //! @brief Exception class for the Result::ErrorMarkerNotTrackedVARJO aka
  //! XR_ERROR_MARKER_NOT_TRACKED_VARJO result code.
  class MarkerNotTrackedErrorVARJO : public SystemError {
  public:
    MarkerNotTrackedErrorVARJO(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorMarkerNotTrackedVARJO), message) {}

    MarkerNotTrackedErrorVARJO(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorMarkerNotTrackedVARJO), message) {}
  };
#endif  // XR_VARJO_marker_tracking
#ifdef XR_VARJO_marker_tracking
  //! @brief Exception class for the Result::ErrorMarkerIdInvalidVARJO aka
  //! XR_ERROR_MARKER_ID_INVALID_VARJO result code.
  class MarkerIdInvalidErrorVARJO : public SystemError {
  public:
    MarkerIdInvalidErrorVARJO(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorMarkerIdInvalidVARJO), message) {}

    MarkerIdInvalidErrorVARJO(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorMarkerIdInvalidVARJO), message) {}
  };
#endif  // XR_VARJO_marker_tracking
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Exception class for the Result::ErrorSpatialAnchorNameNotFoundMSFT aka
  //! XR_ERROR_SPATIAL_ANCHOR_NAME_NOT_FOUND_MSFT result code.
  class SpatialAnchorNameNotFoundErrorMSFT : public SystemError {
  public:
    SpatialAnchorNameNotFoundErrorMSFT(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSpatialAnchorNameNotFoundMSFT), message) {}

    SpatialAnchorNameNotFoundErrorMSFT(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSpatialAnchorNameNotFoundMSFT), message) {}
  };
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Exception class for the Result::ErrorSpatialAnchorNameInvalidMSFT aka
  //! XR_ERROR_SPATIAL_ANCHOR_NAME_INVALID_MSFT result code.
  class SpatialAnchorNameInvalidErrorMSFT : public SystemError {
  public:
    SpatialAnchorNameInvalidErrorMSFT(std::string const& message)
        : SystemError(impl::make_error_code(Result::ErrorSpatialAnchorNameInvalidMSFT), message) {}

    SpatialAnchorNameInvalidErrorMSFT(char const* message)
        : SystemError(impl::make_error_code(Result::ErrorSpatialAnchorNameInvalidMSFT), message) {}
  };
#endif  // XR_MSFT_spatial_anchor_persistence
  // end of result_exceptions
  //! @}

  /*!
   * @brief Throws the best exception for a result code.
   *
   * Takes a result code and a message (usually the method triggering the exception) and throws the
   * most-specific exception available for that result code. As a fallback, it will throw a
   * SystemError directly.
   */
  OPENXR_HPP_INLINE void throwResultException(Result result, char const* message) {
    switch (result) {
      case Result::Success:
        // Not actually an error!
        throw SystemError(impl::make_error_code(result));

      case Result::TimeoutExpired:
        // Not actually an error!
        throw SystemError(impl::make_error_code(result));

      case Result::SessionLossPending:
        // Not actually an error!
        throw SystemError(impl::make_error_code(result));

      case Result::EventUnavailable:
        // Not actually an error!
        throw SystemError(impl::make_error_code(result));

      case Result::SpaceBoundsUnavailable:
        // Not actually an error!
        throw SystemError(impl::make_error_code(result));

      case Result::SessionNotFocused:
        // Not actually an error!
        throw SystemError(impl::make_error_code(result));

      case Result::FrameDiscarded:
        // Not actually an error!
        throw SystemError(impl::make_error_code(result));

      case Result::ErrorValidationFailure:
        throw ValidationFailureError(message);

      case Result::ErrorRuntimeFailure:
        throw RuntimeFailureError(message);

      case Result::ErrorOutOfMemory:
        throw OutOfMemoryError(message);

      case Result::ErrorAPIVersionUnsupported:
        throw APIVersionUnsupportedError(message);

      case Result::ErrorInitializationFailed:
        throw InitializationFailedError(message);

      case Result::ErrorFunctionUnsupported:
        throw FunctionUnsupportedError(message);

      case Result::ErrorFeatureUnsupported:
        throw FeatureUnsupportedError(message);

      case Result::ErrorExtensionNotPresent:
        throw ExtensionNotPresentError(message);

      case Result::ErrorLimitReached:
        throw LimitReachedError(message);

      case Result::ErrorSizeInsufficient:
        throw SizeInsufficientError(message);

      case Result::ErrorHandleInvalid:
        throw HandleInvalidError(message);

      case Result::ErrorInstanceLost:
        throw InstanceLostError(message);

      case Result::ErrorSessionRunning:
        throw SessionRunningError(message);

      case Result::ErrorSessionNotRunning:
        throw SessionNotRunningError(message);

      case Result::ErrorSessionLost:
        throw SessionLostError(message);

      case Result::ErrorSystemInvalid:
        throw SystemInvalidError(message);

      case Result::ErrorPathInvalid:
        throw PathInvalidError(message);

      case Result::ErrorPathCountExceeded:
        throw PathCountExceededError(message);

      case Result::ErrorPathFormatInvalid:
        throw PathFormatInvalidError(message);

      case Result::ErrorPathUnsupported:
        throw PathUnsupportedError(message);

      case Result::ErrorLayerInvalid:
        throw LayerInvalidError(message);

      case Result::ErrorLayerLimitExceeded:
        throw LayerLimitExceededError(message);

      case Result::ErrorSwapchainRectInvalid:
        throw SwapchainRectInvalidError(message);

      case Result::ErrorSwapchainFormatUnsupported:
        throw SwapchainFormatUnsupportedError(message);

      case Result::ErrorActionTypeMismatch:
        throw ActionTypeMismatchError(message);

      case Result::ErrorSessionNotReady:
        throw SessionNotReadyError(message);

      case Result::ErrorSessionNotStopping:
        throw SessionNotStoppingError(message);

      case Result::ErrorTimeInvalid:
        throw TimeInvalidError(message);

      case Result::ErrorReferenceSpaceUnsupported:
        throw ReferenceSpaceUnsupportedError(message);

      case Result::ErrorFileAccessError:
        throw FileAccessError(message);

      case Result::ErrorFileContentsInvalid:
        throw FileContentsInvalidError(message);

      case Result::ErrorFormFactorUnsupported:
        throw FormFactorUnsupportedError(message);

      case Result::ErrorFormFactorUnavailable:
        throw FormFactorUnavailableError(message);

      case Result::ErrorAPILayerNotPresent:
        throw APILayerNotPresentError(message);

      case Result::ErrorCallOrderInvalid:
        throw CallOrderInvalidError(message);

      case Result::ErrorGraphicsDeviceInvalid:
        throw GraphicsDeviceInvalidError(message);

      case Result::ErrorPoseInvalid:
        throw PoseInvalidError(message);

      case Result::ErrorIndexOutOfRange:
        throw IndexOutOfRangeError(message);

      case Result::ErrorViewConfigurationTypeUnsupported:
        throw ViewConfigurationTypeUnsupportedError(message);

      case Result::ErrorEnvironmentBlendModeUnsupported:
        throw EnvironmentBlendModeUnsupportedError(message);

      case Result::ErrorNameDuplicated:
        throw NameDuplicatedError(message);

      case Result::ErrorNameInvalid:
        throw NameInvalidError(message);

      case Result::ErrorActionsetNotAttached:
        throw ActionsetNotAttachedError(message);

      case Result::ErrorActionsetsAlreadyAttached:
        throw ActionsetsAlreadyAttachedError(message);

      case Result::ErrorLocalizedNameDuplicated:
        throw LocalizedNameDuplicatedError(message);

      case Result::ErrorLocalizedNameInvalid:
        throw LocalizedNameInvalidError(message);

      case Result::ErrorGraphicsRequirementsCallMissing:
        throw GraphicsRequirementsCallMissingError(message);

      case Result::ErrorRuntimeUnavailable:
        throw RuntimeUnavailableError(message);

#ifdef XR_KHR_android_thread_settings
      case Result::ErrorAndroidThreadSettingsIdInvalidKHR:
        throw AndroidThreadSettingsIdInvalidErrorKHR(message);
#endif  // XR_KHR_android_thread_settings

#ifdef XR_KHR_android_thread_settings
      case Result::ErrorAndroidThreadSettingsFailureKHR:
        throw AndroidThreadSettingsFailureErrorKHR(message);
#endif  // XR_KHR_android_thread_settings

#ifdef XR_MSFT_spatial_anchor
      case Result::ErrorCreateSpatialAnchorFailedMSFT:
        throw CreateSpatialAnchorFailedErrorMSFT(message);
#endif  // XR_MSFT_spatial_anchor

#ifdef XR_MSFT_secondary_view_configuration
      case Result::ErrorSecondaryViewConfigurationTypeNotEnabledMSFT:
        throw SecondaryViewConfigurationTypeNotEnabledErrorMSFT(message);
#endif  // XR_MSFT_secondary_view_configuration

#ifdef XR_MSFT_controller_model
      case Result::ErrorControllerModelKeyInvalidMSFT:
        throw ControllerModelKeyInvalidErrorMSFT(message);
#endif  // XR_MSFT_controller_model

#ifdef XR_MSFT_composition_layer_reprojection
      case Result::ErrorReprojectionModeUnsupportedMSFT:
        throw ReprojectionModeUnsupportedErrorMSFT(message);
#endif  // XR_MSFT_composition_layer_reprojection

#ifdef XR_MSFT_scene_understanding
      case Result::ErrorComputeNewSceneNotCompletedMSFT:
        throw ComputeNewSceneNotCompletedErrorMSFT(message);
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
      case Result::ErrorSceneComponentIdInvalidMSFT:
        throw SceneComponentIdInvalidErrorMSFT(message);
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
      case Result::ErrorSceneComponentTypeMismatchMSFT:
        throw SceneComponentTypeMismatchErrorMSFT(message);
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
      case Result::ErrorSceneMeshBufferIdInvalidMSFT:
        throw SceneMeshBufferIdInvalidErrorMSFT(message);
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
      case Result::ErrorSceneComputeFeatureIncompatibleMSFT:
        throw SceneComputeFeatureIncompatibleErrorMSFT(message);
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
      case Result::ErrorSceneComputeConsistencyMismatchMSFT:
        throw SceneComputeConsistencyMismatchErrorMSFT(message);
#endif  // XR_MSFT_scene_understanding

#ifdef XR_FB_display_refresh_rate
      case Result::ErrorDisplayRefreshRateUnsupportedFB:
        throw DisplayRefreshRateUnsupportedErrorFB(message);
#endif  // XR_FB_display_refresh_rate

#ifdef XR_FB_color_space
      case Result::ErrorColorSpaceUnsupportedFB:
        throw ColorSpaceUnsupportedErrorFB(message);
#endif  // XR_FB_color_space

#ifdef XR_FB_passthrough
      case Result::ErrorUnexpectedStatePassthroughFB:
        throw UnexpectedStatePassthroughErrorFB(message);
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
      case Result::ErrorFeatureAlreadyCreatedPassthroughFB:
        throw FeatureAlreadyCreatedPassthroughErrorFB(message);
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
      case Result::ErrorFeatureRequiredPassthroughFB:
        throw FeatureRequiredPassthroughErrorFB(message);
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
      case Result::ErrorNotPermittedPassthroughFB:
        throw NotPermittedPassthroughErrorFB(message);
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
      case Result::ErrorInsufficientResourcesPassthroughFB:
        throw InsufficientResourcesPassthroughErrorFB(message);
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
      case Result::ErrorUnknownPassthroughFB:
        throw UnknownPassthroughErrorFB(message);
#endif  // XR_FB_passthrough

#ifdef XR_FB_render_model
      case Result::ErrorRenderModelKeyInvalidFB:
        throw RenderModelKeyInvalidErrorFB(message);
#endif  // XR_FB_render_model

#ifdef XR_FB_render_model
      case Result::RenderModelUnavailableFB:
        // Not actually an error!
        throw SystemError(impl::make_error_code(result));
#endif  // XR_FB_render_model

#ifdef XR_VARJO_marker_tracking
      case Result::ErrorMarkerNotTrackedVARJO:
        throw MarkerNotTrackedErrorVARJO(message);
#endif  // XR_VARJO_marker_tracking

#ifdef XR_VARJO_marker_tracking
      case Result::ErrorMarkerIdInvalidVARJO:
        throw MarkerIdInvalidErrorVARJO(message);
#endif  // XR_VARJO_marker_tracking

#ifdef XR_MSFT_spatial_anchor_persistence
      case Result::ErrorSpatialAnchorNameNotFoundMSFT:
        throw SpatialAnchorNameNotFoundErrorMSFT(message);
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
      case Result::ErrorSpatialAnchorNameInvalidMSFT:
        throw SpatialAnchorNameInvalidErrorMSFT(message);
#endif  // XR_MSFT_spatial_anchor_persistence

      default:
        throw SystemError(impl::make_error_code(result));
    }
  }
  //! @}
}  // namespace exceptions
}  // namespace OPENXR_HPP_NAMESPACE

#if !defined(OPENXR_HPP_DOXYGEN)
namespace std {
template <>
struct is_error_code_enum<OPENXR_HPP_NAMESPACE::Result> : public true_type {};
}  // namespace std
#endif  // !defined(OPENXR_HPP_DOXYGEN)
#endif  // !defined(OPENXR_HPP_NO_EXCEPTIONS)

#endif  // ifndef OPENXR_EXCEPTIONS_HPP_
