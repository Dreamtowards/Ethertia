// *********** THIS FILE IS GENERATED - DO NOT EDIT ***********
//     See cpp_generator.py for modifications
// ************************************************************

/*
** Copyright (c) 2017-2021 The Khronos Group Inc.
** Copyright (c) 2019-2021 Collabora, Ltd.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** ---- Exceptions to the Apache 2.0 License: ----
**
** As an exception, if you use this Software to generate code and portions of
** this Software are embedded into the generated code as a result, you may
** redistribute such product without providing attribution as would otherwise
** be required by Sections 4(a), 4(b) and 4(d) of the License.
**
** In addition, if you combine or link code generated by this Software with
** software that is licensed under the GPLv2 or the LGPL v2.0 or 2.1
** ("`Combined Software`") and if a court of competent jurisdiction determines
** that the patent provision (Section 3), the indemnity provision (Section 9)
** or other Section of the License conflicts with the conditions of the
** applicable GPL or LGPL license, you may retroactively and prospectively
** choose to deem waived or otherwise exclude such Section(s) of the License,
** but only in their entirety and only with respect to the Combined Software.
**
*/

/*
** This header is generated from the Khronos OpenXR XML API Registry.
**
*/
#ifndef OPENXR_DISPATCH_DYNAMIC_HPP_
#define OPENXR_DISPATCH_DYNAMIC_HPP_
/**
 * @file
 * @brief Contains a dynamically-loading dispatcher class: loads entry points with
 * xrGetInstanceProcAddr, optionally lazily.
 * @ingroup dispatch
 */

#include <openxr/openxr.h>

#ifdef OPENXR_HPP_DOXYGEN
#include <openxr/openxr_platform.h>
#endif

#include <type_traits>

#if !defined(OPENXR_HPP_ASSERT)
#include <cassert>
#define OPENXR_HPP_ASSERT assert
#endif

#if !defined(OPENXR_HPP_INLINE)
#if defined(__clang___)
#if __has_attribute(always_inline)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#else
#define OPENXR_HPP_INLINE inline
#endif
#elif defined(__GNUC__)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#elif defined(_MSC_VER)
#define OPENXR_HPP_INLINE inline
#else
#define OPENXR_HPP_INLINE inline
#endif
#endif  // !OPENXR_HPP_INLINE

#if !defined(OPENXR_HPP_CONSTEXPR)
#if defined(_MSC_VER) && (_MSC_VER <= 1800)
#define OPENXR_HPP_CONSTEXPR
#else
#define OPENXR_HPP_CONSTEXPR constexpr
#endif
#endif  // !OPENXR_HPP_CONSTEXPR

#if !defined(OPENXR_HPP_SWITCH_CONSTEXPR)
//! @todo set this to constexpr in c++14
#define OPENXR_HPP_SWITCH_CONSTEXPR
#endif  // !OPENXR_HPP_SWITCH_CONSTEXPR

#if !defined(OPENXR_HPP_NAMESPACE)
#define OPENXR_HPP_NAMESPACE xr
#endif  // !OPENXR_HPP_NAMESPACE
namespace OPENXR_HPP_NAMESPACE {

/*!
 * @brief Dispatch class for OpenXR that looks up all functions using a provided or
 * statically-available xrGetInstanceProcAddr function and the optional Instance.
 *
 * This is safer to use, especially in large/multi-module applications, than DispatchLoaderStatic,
 * and is thus recommended.
 *
 * By default, it is lazy-populating: only populating a function pointer when it is attempted to be
 * called (if this object is not const). You can early-populate it using the createFullyPopulated()
 * factory method, providing an Instance and optionally a xrGetInstanceProcAddr function pointer.
 *
 * This class stores all function pointers as type-erased PFN_xrVoidFunction, casting at time of
 * call. This allows the same memory representation to be used across translation units that may not
 * share the same platform defines. Only the member function trampolines containing the casts are
 * conditional on platform defines.
 *
 * @ingroup dispatch
 */
class DispatchLoaderDynamic {
public:
  /*!
   * @name Constuctor/Factory functions
   * @{
   */
  /*!
   * @brief Create an empty dispatch table, which is mostly useless if XR_NO_PROTOTYPES is defined.
   *
   * If XR_NO_PROTOTYPES is not defined, the global symbol xrGetInstanceProcAddr is used.
   */
  DispatchLoaderDynamic()
      : DispatchLoaderDynamic(XR_NULL_HANDLE,
#ifdef XR_NO_PROTOTYPES
                              nullptr
#else
                              &::xrGetInstanceProcAddr
#endif
        ) {
  }
  /*!
   * @brief Create a lazy-populating dispatch table.
   */
  explicit DispatchLoaderDynamic(XrInstance instance, PFN_xrGetInstanceProcAddr getInstanceProcAddr)
      : m_instance(instance),
        pfnGetInstanceProcAddr(reinterpret_cast<PFN_xrVoidFunction>(getInstanceProcAddr)) {}

#ifndef XR_NO_PROTOTYPES
  /*!
   * @brief Create a lazy-populating dispatch table using the static xrGetInstanceProcAddr.
   */
  explicit DispatchLoaderDynamic(XrInstance instance)
      : DispatchLoaderDynamic(instance, &::xrGetInstanceProcAddr) {}
#endif  // !XR_NO_PROTOTYPES

  /*!
   * @brief Create a fully-populated dispatch table given a non-null XrInstance and a
   * getInstanceProcAddr.
   */
  static DispatchLoaderDynamic createFullyPopulated(XrInstance instance,
                                                    PFN_xrGetInstanceProcAddr getInstanceProcAddr) {
    OPENXR_HPP_ASSERT(instance != XR_NULL_HANDLE);
    DispatchLoaderDynamic dispatch{instance, getInstanceProcAddr};
    dispatch.populateFully();
    return dispatch;
  }
  //! @}

  /*!
   * @brief Fully populate a dispatch table given a non-null XrInstance and a getInstanceProcAddr.
   */
  void populateFully() {
    OPENXR_HPP_ASSERT(m_instance != XR_NULL_HANDLE);
    OPENXR_HPP_ASSERT(pfnGetInstanceProcAddr != nullptr);
    populate_("xrGetInstanceProcAddr", pfnGetInstanceProcAddr);
    populate_("xrEnumerateApiLayerProperties", pfnEnumerateApiLayerProperties);
    populate_("xrEnumerateInstanceExtensionProperties", pfnEnumerateInstanceExtensionProperties);
    populate_("xrCreateInstance", pfnCreateInstance);
    populate_("xrDestroyInstance", pfnDestroyInstance);
    populate_("xrGetInstanceProperties", pfnGetInstanceProperties);
    populate_("xrPollEvent", pfnPollEvent);
    populate_("xrResultToString", pfnResultToString);
    populate_("xrStructureTypeToString", pfnStructureTypeToString);
    populate_("xrGetSystem", pfnGetSystem);
    populate_("xrGetSystemProperties", pfnGetSystemProperties);
    populate_("xrEnumerateEnvironmentBlendModes", pfnEnumerateEnvironmentBlendModes);
    populate_("xrCreateSession", pfnCreateSession);
    populate_("xrDestroySession", pfnDestroySession);
    populate_("xrEnumerateReferenceSpaces", pfnEnumerateReferenceSpaces);
    populate_("xrCreateReferenceSpace", pfnCreateReferenceSpace);
    populate_("xrGetReferenceSpaceBoundsRect", pfnGetReferenceSpaceBoundsRect);
    populate_("xrCreateActionSpace", pfnCreateActionSpace);
    populate_("xrLocateSpace", pfnLocateSpace);
    populate_("xrDestroySpace", pfnDestroySpace);
    populate_("xrEnumerateViewConfigurations", pfnEnumerateViewConfigurations);
    populate_("xrGetViewConfigurationProperties", pfnGetViewConfigurationProperties);
    populate_("xrEnumerateViewConfigurationViews", pfnEnumerateViewConfigurationViews);
    populate_("xrEnumerateSwapchainFormats", pfnEnumerateSwapchainFormats);
    populate_("xrCreateSwapchain", pfnCreateSwapchain);
    populate_("xrDestroySwapchain", pfnDestroySwapchain);
    populate_("xrEnumerateSwapchainImages", pfnEnumerateSwapchainImages);
    populate_("xrAcquireSwapchainImage", pfnAcquireSwapchainImage);
    populate_("xrWaitSwapchainImage", pfnWaitSwapchainImage);
    populate_("xrReleaseSwapchainImage", pfnReleaseSwapchainImage);
    populate_("xrBeginSession", pfnBeginSession);
    populate_("xrEndSession", pfnEndSession);
    populate_("xrRequestExitSession", pfnRequestExitSession);
    populate_("xrWaitFrame", pfnWaitFrame);
    populate_("xrBeginFrame", pfnBeginFrame);
    populate_("xrEndFrame", pfnEndFrame);
    populate_("xrLocateViews", pfnLocateViews);
    populate_("xrStringToPath", pfnStringToPath);
    populate_("xrPathToString", pfnPathToString);
    populate_("xrCreateActionSet", pfnCreateActionSet);
    populate_("xrDestroyActionSet", pfnDestroyActionSet);
    populate_("xrCreateAction", pfnCreateAction);
    populate_("xrDestroyAction", pfnDestroyAction);
    populate_("xrSuggestInteractionProfileBindings", pfnSuggestInteractionProfileBindings);
    populate_("xrAttachSessionActionSets", pfnAttachSessionActionSets);
    populate_("xrGetCurrentInteractionProfile", pfnGetCurrentInteractionProfile);
    populate_("xrGetActionStateBoolean", pfnGetActionStateBoolean);
    populate_("xrGetActionStateFloat", pfnGetActionStateFloat);
    populate_("xrGetActionStateVector2f", pfnGetActionStateVector2f);
    populate_("xrGetActionStatePose", pfnGetActionStatePose);
    populate_("xrSyncActions", pfnSyncActions);
    populate_("xrEnumerateBoundSourcesForAction", pfnEnumerateBoundSourcesForAction);
    populate_("xrGetInputSourceLocalizedName", pfnGetInputSourceLocalizedName);
    populate_("xrApplyHapticFeedback", pfnApplyHapticFeedback);
    populate_("xrStopHapticFeedback", pfnStopHapticFeedback);
    populate_("xrSetAndroidApplicationThreadKHR", pfnSetAndroidApplicationThreadKHR);
    populate_("xrCreateSwapchainAndroidSurfaceKHR", pfnCreateSwapchainAndroidSurfaceKHR);
    populate_("xrGetOpenGLGraphicsRequirementsKHR", pfnGetOpenGLGraphicsRequirementsKHR);
    populate_("xrGetOpenGLESGraphicsRequirementsKHR", pfnGetOpenGLESGraphicsRequirementsKHR);
    populate_("xrGetVulkanInstanceExtensionsKHR", pfnGetVulkanInstanceExtensionsKHR);
    populate_("xrGetVulkanDeviceExtensionsKHR", pfnGetVulkanDeviceExtensionsKHR);
    populate_("xrGetVulkanGraphicsDeviceKHR", pfnGetVulkanGraphicsDeviceKHR);
    populate_("xrGetVulkanGraphicsRequirementsKHR", pfnGetVulkanGraphicsRequirementsKHR);
    populate_("xrGetD3D11GraphicsRequirementsKHR", pfnGetD3D11GraphicsRequirementsKHR);
    populate_("xrGetD3D12GraphicsRequirementsKHR", pfnGetD3D12GraphicsRequirementsKHR);
    populate_("xrGetVisibilityMaskKHR", pfnGetVisibilityMaskKHR);
    populate_("xrConvertWin32PerformanceCounterToTimeKHR",
              pfnConvertWin32PerformanceCounterToTimeKHR);
    populate_("xrConvertTimeToWin32PerformanceCounterKHR",
              pfnConvertTimeToWin32PerformanceCounterKHR);
    populate_("xrConvertTimespecTimeToTimeKHR", pfnConvertTimespecTimeToTimeKHR);
    populate_("xrConvertTimeToTimespecTimeKHR", pfnConvertTimeToTimespecTimeKHR);
    populate_("xrInitializeLoaderKHR", pfnInitializeLoaderKHR);
    populate_("xrCreateVulkanInstanceKHR", pfnCreateVulkanInstanceKHR);
    populate_("xrCreateVulkanDeviceKHR", pfnCreateVulkanDeviceKHR);
    populate_("xrGetVulkanGraphicsDevice2KHR", pfnGetVulkanGraphicsDevice2KHR);
    populate_("xrGetVulkanGraphicsRequirements2KHR", pfnGetVulkanGraphicsRequirements2KHR);
    populate_("xrPerfSettingsSetPerformanceLevelEXT", pfnPerfSettingsSetPerformanceLevelEXT);
    populate_("xrThermalGetTemperatureTrendEXT", pfnThermalGetTemperatureTrendEXT);
    populate_("xrSetDebugUtilsObjectNameEXT", pfnSetDebugUtilsObjectNameEXT);
    populate_("xrCreateDebugUtilsMessengerEXT", pfnCreateDebugUtilsMessengerEXT);
    populate_("xrDestroyDebugUtilsMessengerEXT", pfnDestroyDebugUtilsMessengerEXT);
    populate_("xrSubmitDebugUtilsMessageEXT", pfnSubmitDebugUtilsMessageEXT);
    populate_("xrSessionBeginDebugUtilsLabelRegionEXT", pfnSessionBeginDebugUtilsLabelRegionEXT);
    populate_("xrSessionEndDebugUtilsLabelRegionEXT", pfnSessionEndDebugUtilsLabelRegionEXT);
    populate_("xrSessionInsertDebugUtilsLabelEXT", pfnSessionInsertDebugUtilsLabelEXT);
    populate_("xrCreateSpatialAnchorMSFT", pfnCreateSpatialAnchorMSFT);
    populate_("xrCreateSpatialAnchorSpaceMSFT", pfnCreateSpatialAnchorSpaceMSFT);
    populate_("xrDestroySpatialAnchorMSFT", pfnDestroySpatialAnchorMSFT);
    populate_("xrSetInputDeviceActiveEXT", pfnSetInputDeviceActiveEXT);
    populate_("xrSetInputDeviceStateBoolEXT", pfnSetInputDeviceStateBoolEXT);
    populate_("xrSetInputDeviceStateFloatEXT", pfnSetInputDeviceStateFloatEXT);
    populate_("xrSetInputDeviceStateVector2fEXT", pfnSetInputDeviceStateVector2fEXT);
    populate_("xrSetInputDeviceLocationEXT", pfnSetInputDeviceLocationEXT);
    populate_("xrCreateSpatialGraphNodeSpaceMSFT", pfnCreateSpatialGraphNodeSpaceMSFT);
    populate_("xrCreateHandTrackerEXT", pfnCreateHandTrackerEXT);
    populate_("xrDestroyHandTrackerEXT", pfnDestroyHandTrackerEXT);
    populate_("xrLocateHandJointsEXT", pfnLocateHandJointsEXT);
    populate_("xrCreateHandMeshSpaceMSFT", pfnCreateHandMeshSpaceMSFT);
    populate_("xrUpdateHandMeshMSFT", pfnUpdateHandMeshMSFT);
    populate_("xrGetControllerModelKeyMSFT", pfnGetControllerModelKeyMSFT);
    populate_("xrLoadControllerModelMSFT", pfnLoadControllerModelMSFT);
    populate_("xrGetControllerModelPropertiesMSFT", pfnGetControllerModelPropertiesMSFT);
    populate_("xrGetControllerModelStateMSFT", pfnGetControllerModelStateMSFT);
    populate_("xrCreateSpatialAnchorFromPerceptionAnchorMSFT",
              pfnCreateSpatialAnchorFromPerceptionAnchorMSFT);
    populate_("xrTryGetPerceptionAnchorFromSpatialAnchorMSFT",
              pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT);
    populate_("xrEnumerateReprojectionModesMSFT", pfnEnumerateReprojectionModesMSFT);
    populate_("xrUpdateSwapchainFB", pfnUpdateSwapchainFB);
    populate_("xrGetSwapchainStateFB", pfnGetSwapchainStateFB);
    populate_("xrEnumerateSceneComputeFeaturesMSFT", pfnEnumerateSceneComputeFeaturesMSFT);
    populate_("xrCreateSceneObserverMSFT", pfnCreateSceneObserverMSFT);
    populate_("xrDestroySceneObserverMSFT", pfnDestroySceneObserverMSFT);
    populate_("xrCreateSceneMSFT", pfnCreateSceneMSFT);
    populate_("xrDestroySceneMSFT", pfnDestroySceneMSFT);
    populate_("xrComputeNewSceneMSFT", pfnComputeNewSceneMSFT);
    populate_("xrGetSceneComputeStateMSFT", pfnGetSceneComputeStateMSFT);
    populate_("xrGetSceneComponentsMSFT", pfnGetSceneComponentsMSFT);
    populate_("xrLocateSceneComponentsMSFT", pfnLocateSceneComponentsMSFT);
    populate_("xrGetSceneMeshBuffersMSFT", pfnGetSceneMeshBuffersMSFT);
    populate_("xrDeserializeSceneMSFT", pfnDeserializeSceneMSFT);
    populate_("xrGetSerializedSceneFragmentDataMSFT", pfnGetSerializedSceneFragmentDataMSFT);
    populate_("xrEnumerateDisplayRefreshRatesFB", pfnEnumerateDisplayRefreshRatesFB);
    populate_("xrGetDisplayRefreshRateFB", pfnGetDisplayRefreshRateFB);
    populate_("xrRequestDisplayRefreshRateFB", pfnRequestDisplayRefreshRateFB);
    populate_("xrEnumerateViveTrackerPathsHTCX", pfnEnumerateViveTrackerPathsHTCX);
    populate_("xrCreateFacialTrackerHTC", pfnCreateFacialTrackerHTC);
    populate_("xrDestroyFacialTrackerHTC", pfnDestroyFacialTrackerHTC);
    populate_("xrGetFacialExpressionsHTC", pfnGetFacialExpressionsHTC);
    populate_("xrEnumerateColorSpacesFB", pfnEnumerateColorSpacesFB);
    populate_("xrSetColorSpaceFB", pfnSetColorSpaceFB);
    populate_("xrGetHandMeshFB", pfnGetHandMeshFB);
    populate_("xrCreateFoveationProfileFB", pfnCreateFoveationProfileFB);
    populate_("xrDestroyFoveationProfileFB", pfnDestroyFoveationProfileFB);
    populate_("xrQuerySystemTrackedKeyboardFB", pfnQuerySystemTrackedKeyboardFB);
    populate_("xrCreateKeyboardSpaceFB", pfnCreateKeyboardSpaceFB);
    populate_("xrCreateTriangleMeshFB", pfnCreateTriangleMeshFB);
    populate_("xrDestroyTriangleMeshFB", pfnDestroyTriangleMeshFB);
    populate_("xrTriangleMeshGetVertexBufferFB", pfnTriangleMeshGetVertexBufferFB);
    populate_("xrTriangleMeshGetIndexBufferFB", pfnTriangleMeshGetIndexBufferFB);
    populate_("xrTriangleMeshBeginUpdateFB", pfnTriangleMeshBeginUpdateFB);
    populate_("xrTriangleMeshEndUpdateFB", pfnTriangleMeshEndUpdateFB);
    populate_("xrTriangleMeshBeginVertexBufferUpdateFB", pfnTriangleMeshBeginVertexBufferUpdateFB);
    populate_("xrTriangleMeshEndVertexBufferUpdateFB", pfnTriangleMeshEndVertexBufferUpdateFB);
    populate_("xrCreatePassthroughFB", pfnCreatePassthroughFB);
    populate_("xrDestroyPassthroughFB", pfnDestroyPassthroughFB);
    populate_("xrPassthroughStartFB", pfnPassthroughStartFB);
    populate_("xrPassthroughPauseFB", pfnPassthroughPauseFB);
    populate_("xrCreatePassthroughLayerFB", pfnCreatePassthroughLayerFB);
    populate_("xrDestroyPassthroughLayerFB", pfnDestroyPassthroughLayerFB);
    populate_("xrPassthroughLayerPauseFB", pfnPassthroughLayerPauseFB);
    populate_("xrPassthroughLayerResumeFB", pfnPassthroughLayerResumeFB);
    populate_("xrPassthroughLayerSetStyleFB", pfnPassthroughLayerSetStyleFB);
    populate_("xrCreateGeometryInstanceFB", pfnCreateGeometryInstanceFB);
    populate_("xrDestroyGeometryInstanceFB", pfnDestroyGeometryInstanceFB);
    populate_("xrGeometryInstanceSetTransformFB", pfnGeometryInstanceSetTransformFB);
    populate_("xrEnumerateRenderModelPathsFB", pfnEnumerateRenderModelPathsFB);
    populate_("xrGetRenderModelPropertiesFB", pfnGetRenderModelPropertiesFB);
    populate_("xrLoadRenderModelFB", pfnLoadRenderModelFB);
    populate_("xrSetEnvironmentDepthEstimationVARJO", pfnSetEnvironmentDepthEstimationVARJO);
    populate_("xrSetMarkerTrackingVARJO", pfnSetMarkerTrackingVARJO);
    populate_("xrSetMarkerTrackingTimeoutVARJO", pfnSetMarkerTrackingTimeoutVARJO);
    populate_("xrSetMarkerTrackingPredictionVARJO", pfnSetMarkerTrackingPredictionVARJO);
    populate_("xrGetMarkerSizeVARJO", pfnGetMarkerSizeVARJO);
    populate_("xrCreateMarkerSpaceVARJO", pfnCreateMarkerSpaceVARJO);
    populate_("xrCreateSpatialAnchorStoreConnectionMSFT",
              pfnCreateSpatialAnchorStoreConnectionMSFT);
    populate_("xrDestroySpatialAnchorStoreConnectionMSFT",
              pfnDestroySpatialAnchorStoreConnectionMSFT);
    populate_("xrPersistSpatialAnchorMSFT", pfnPersistSpatialAnchorMSFT);
    populate_("xrEnumeratePersistedSpatialAnchorNamesMSFT",
              pfnEnumeratePersistedSpatialAnchorNamesMSFT);
    populate_("xrCreateSpatialAnchorFromPersistedNameMSFT",
              pfnCreateSpatialAnchorFromPersistedNameMSFT);
    populate_("xrUnpersistSpatialAnchorMSFT", pfnUnpersistSpatialAnchorMSFT);
    populate_("xrClearSpatialAnchorStoreMSFT", pfnClearSpatialAnchorStoreMSFT);
    populate_("xrGetAudioOutputDeviceGuidOculus", pfnGetAudioOutputDeviceGuidOculus);
    populate_("xrGetAudioInputDeviceGuidOculus", pfnGetAudioInputDeviceGuidOculus);
    populate_("xrSetDigitalLensControlALMALENCE", pfnSetDigitalLensControlALMALENCE);
    populate_("xrPassthroughLayerSetKeyboardHandsIntensityFB",
              pfnPassthroughLayerSetKeyboardHandsIntensityFB);
  }

  /*!
   * @brief Fully populate a dispatch table given a non-null XrInstance and a getInstanceProcAddr.
   *
   * Can be called on an "empty" dispatch to make it "not empty".
   *
   * @see isEmpty
   */
  void populateFully(XrInstance instance, PFN_xrGetInstanceProcAddr getInstanceProcAddr) {
    m_instance = instance;
    pfnGetInstanceProcAddr = reinterpret_cast<PFN_xrVoidFunction>(getInstanceProcAddr);
    populateFully();
  }

  /*!
   * @brief If this dispatch is empty, it will need to be replaced/assigned before any functions
   * will work.
   */
  bool isEmpty() const noexcept { return nullptr == pfnGetInstanceProcAddr; }

  /*!
   * @name Entry points
   * @brief These populate the function pointer (if required and non-const), then cast it and call
   * it.
   *
   * We store everything as PFN_xrVoidFunction to allow us to have the same representation all over,
   * despite containing function pointers that might not be accessible without some platform
   * defines. Thus, only our accessor methods differ between different includes of this header, not
   * our data members.
   *
   * @{
   */

  //! @brief Call xrGetInstanceProcAddr, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetInstanceProcAddr(XrInstance instance, const char* name,
                                                   PFN_xrVoidFunction* function) {
    XrResult result = populate_("xrGetInstanceProcAddr", pfnGetInstanceProcAddr);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetInstanceProcAddr>(pfnGetInstanceProcAddr))(instance, name,
                                                                                 function);
  }

  //! @brief Call xrGetInstanceProcAddr (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetInstanceProcAddr(XrInstance instance, const char* name,
                                                   PFN_xrVoidFunction* function) const {
    return (reinterpret_cast<PFN_xrGetInstanceProcAddr>(pfnGetInstanceProcAddr))(instance, name,
                                                                                 function);
  }

  //! @brief Call xrEnumerateApiLayerProperties, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateApiLayerProperties(uint32_t propertyCapacityInput,
                                                           uint32_t* propertyCountOutput,
                                                           XrApiLayerProperties* properties) {
    XrResult result = populate_("xrEnumerateApiLayerProperties", pfnEnumerateApiLayerProperties);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateApiLayerProperties>(pfnEnumerateApiLayerProperties))(
        propertyCapacityInput, propertyCountOutput, properties);
  }

  //! @brief Call xrEnumerateApiLayerProperties (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateApiLayerProperties(uint32_t propertyCapacityInput,
                                                           uint32_t* propertyCountOutput,
                                                           XrApiLayerProperties* properties) const {
    return (reinterpret_cast<PFN_xrEnumerateApiLayerProperties>(pfnEnumerateApiLayerProperties))(
        propertyCapacityInput, propertyCountOutput, properties);
  }

  //! @brief Call xrEnumerateInstanceExtensionProperties, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateInstanceExtensionProperties(
      const char* layerName, uint32_t propertyCapacityInput, uint32_t* propertyCountOutput,
      XrExtensionProperties* properties) {
    XrResult result = populate_("xrEnumerateInstanceExtensionProperties",
                                pfnEnumerateInstanceExtensionProperties);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateInstanceExtensionProperties>(
        pfnEnumerateInstanceExtensionProperties))(layerName, propertyCapacityInput,
                                                  propertyCountOutput, properties);
  }

  //! @brief Call xrEnumerateInstanceExtensionProperties (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateInstanceExtensionProperties(
      const char* layerName, uint32_t propertyCapacityInput, uint32_t* propertyCountOutput,
      XrExtensionProperties* properties) const {
    return (reinterpret_cast<PFN_xrEnumerateInstanceExtensionProperties>(
        pfnEnumerateInstanceExtensionProperties))(layerName, propertyCapacityInput,
                                                  propertyCountOutput, properties);
  }

  //! @brief Call xrCreateInstance, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateInstance(const XrInstanceCreateInfo* createInfo,
                                              XrInstance* instance) {
    XrResult result = populate_("xrCreateInstance", pfnCreateInstance);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateInstance>(pfnCreateInstance))(createInfo, instance);
  }

  //! @brief Call xrCreateInstance (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateInstance(const XrInstanceCreateInfo* createInfo,
                                              XrInstance* instance) const {
    return (reinterpret_cast<PFN_xrCreateInstance>(pfnCreateInstance))(createInfo, instance);
  }

  //! @brief Call xrDestroyInstance, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyInstance(XrInstance instance) {
    XrResult result = populate_("xrDestroyInstance", pfnDestroyInstance);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyInstance>(pfnDestroyInstance))(instance);
  }

  //! @brief Call xrDestroyInstance (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyInstance(XrInstance instance) const {
    return (reinterpret_cast<PFN_xrDestroyInstance>(pfnDestroyInstance))(instance);
  }

  //! @brief Call xrGetInstanceProperties, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetInstanceProperties(XrInstance instance,
                                                     XrInstanceProperties* instanceProperties) {
    XrResult result = populate_("xrGetInstanceProperties", pfnGetInstanceProperties);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetInstanceProperties>(pfnGetInstanceProperties))(
        instance, instanceProperties);
  }

  //! @brief Call xrGetInstanceProperties (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetInstanceProperties(XrInstance instance, XrInstanceProperties* instanceProperties) const {
    return (reinterpret_cast<PFN_xrGetInstanceProperties>(pfnGetInstanceProperties))(
        instance, instanceProperties);
  }

  //! @brief Call xrPollEvent, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPollEvent(XrInstance instance, XrEventDataBuffer* eventData) {
    XrResult result = populate_("xrPollEvent", pfnPollEvent);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPollEvent>(pfnPollEvent))(instance, eventData);
  }

  //! @brief Call xrPollEvent (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPollEvent(XrInstance instance, XrEventDataBuffer* eventData) const {
    return (reinterpret_cast<PFN_xrPollEvent>(pfnPollEvent))(instance, eventData);
  }

  //! @brief Call xrResultToString, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrResultToString(XrInstance instance, XrResult value,
                                              char buffer[XR_MAX_RESULT_STRING_SIZE]) {
    XrResult result = populate_("xrResultToString", pfnResultToString);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrResultToString>(pfnResultToString))(instance, value, buffer);
  }

  //! @brief Call xrResultToString (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrResultToString(XrInstance instance, XrResult value,
                                              char buffer[XR_MAX_RESULT_STRING_SIZE]) const {
    return (reinterpret_cast<PFN_xrResultToString>(pfnResultToString))(instance, value, buffer);
  }

  //! @brief Call xrStructureTypeToString, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrStructureTypeToString(XrInstance instance, XrStructureType value,
                                                     char buffer[XR_MAX_STRUCTURE_NAME_SIZE]) {
    XrResult result = populate_("xrStructureTypeToString", pfnStructureTypeToString);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStructureTypeToString>(pfnStructureTypeToString))(instance,
                                                                                     value, buffer);
  }

  //! @brief Call xrStructureTypeToString (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrStructureTypeToString(
      XrInstance instance, XrStructureType value, char buffer[XR_MAX_STRUCTURE_NAME_SIZE]) const {
    return (reinterpret_cast<PFN_xrStructureTypeToString>(pfnStructureTypeToString))(instance,
                                                                                     value, buffer);
  }

  //! @brief Call xrGetSystem, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSystem(XrInstance instance, const XrSystemGetInfo* getInfo,
                                         XrSystemId* systemId) {
    XrResult result = populate_("xrGetSystem", pfnGetSystem);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSystem>(pfnGetSystem))(instance, getInfo, systemId);
  }

  //! @brief Call xrGetSystem (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSystem(XrInstance instance, const XrSystemGetInfo* getInfo,
                                         XrSystemId* systemId) const {
    return (reinterpret_cast<PFN_xrGetSystem>(pfnGetSystem))(instance, getInfo, systemId);
  }

  //! @brief Call xrGetSystemProperties, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSystemProperties(XrInstance instance, XrSystemId systemId,
                                                   XrSystemProperties* properties) {
    XrResult result = populate_("xrGetSystemProperties", pfnGetSystemProperties);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSystemProperties>(pfnGetSystemProperties))(instance, systemId,
                                                                                 properties);
  }

  //! @brief Call xrGetSystemProperties (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSystemProperties(XrInstance instance, XrSystemId systemId,
                                                   XrSystemProperties* properties) const {
    return (reinterpret_cast<PFN_xrGetSystemProperties>(pfnGetSystemProperties))(instance, systemId,
                                                                                 properties);
  }

  //! @brief Call xrEnumerateEnvironmentBlendModes, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateEnvironmentBlendModes(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t environmentBlendModeCapacityInput, uint32_t* environmentBlendModeCountOutput,
      XrEnvironmentBlendMode* environmentBlendModes) {
    XrResult result =
        populate_("xrEnumerateEnvironmentBlendModes", pfnEnumerateEnvironmentBlendModes);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateEnvironmentBlendModes>(pfnEnumerateEnvironmentBlendModes))(
        instance, systemId, viewConfigurationType, environmentBlendModeCapacityInput,
        environmentBlendModeCountOutput, environmentBlendModes);
  }

  //! @brief Call xrEnumerateEnvironmentBlendModes (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateEnvironmentBlendModes(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t environmentBlendModeCapacityInput, uint32_t* environmentBlendModeCountOutput,
      XrEnvironmentBlendMode* environmentBlendModes) const {
    return (
        reinterpret_cast<PFN_xrEnumerateEnvironmentBlendModes>(pfnEnumerateEnvironmentBlendModes))(
        instance, systemId, viewConfigurationType, environmentBlendModeCapacityInput,
        environmentBlendModeCountOutput, environmentBlendModes);
  }

  //! @brief Call xrCreateSession, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSession(XrInstance instance,
                                             const XrSessionCreateInfo* createInfo,
                                             XrSession* session) {
    XrResult result = populate_("xrCreateSession", pfnCreateSession);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSession>(pfnCreateSession))(instance, createInfo, session);
  }

  //! @brief Call xrCreateSession (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSession(XrInstance instance,
                                             const XrSessionCreateInfo* createInfo,
                                             XrSession* session) const {
    return (reinterpret_cast<PFN_xrCreateSession>(pfnCreateSession))(instance, createInfo, session);
  }

  //! @brief Call xrDestroySession, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySession(XrSession session) {
    XrResult result = populate_("xrDestroySession", pfnDestroySession);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySession>(pfnDestroySession))(session);
  }

  //! @brief Call xrDestroySession (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySession(XrSession session) const {
    return (reinterpret_cast<PFN_xrDestroySession>(pfnDestroySession))(session);
  }

  //! @brief Call xrEnumerateReferenceSpaces, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateReferenceSpaces(XrSession session,
                                                        uint32_t spaceCapacityInput,
                                                        uint32_t* spaceCountOutput,
                                                        XrReferenceSpaceType* spaces) {
    XrResult result = populate_("xrEnumerateReferenceSpaces", pfnEnumerateReferenceSpaces);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateReferenceSpaces>(pfnEnumerateReferenceSpaces))(
        session, spaceCapacityInput, spaceCountOutput, spaces);
  }

  //! @brief Call xrEnumerateReferenceSpaces (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateReferenceSpaces(XrSession session,
                                                        uint32_t spaceCapacityInput,
                                                        uint32_t* spaceCountOutput,
                                                        XrReferenceSpaceType* spaces) const {
    return (reinterpret_cast<PFN_xrEnumerateReferenceSpaces>(pfnEnumerateReferenceSpaces))(
        session, spaceCapacityInput, spaceCountOutput, spaces);
  }

  //! @brief Call xrCreateReferenceSpace, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateReferenceSpace(XrSession session,
                                                    const XrReferenceSpaceCreateInfo* createInfo,
                                                    XrSpace* space) {
    XrResult result = populate_("xrCreateReferenceSpace", pfnCreateReferenceSpace);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateReferenceSpace>(pfnCreateReferenceSpace))(
        session, createInfo, space);
  }

  //! @brief Call xrCreateReferenceSpace (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateReferenceSpace(XrSession session,
                                                    const XrReferenceSpaceCreateInfo* createInfo,
                                                    XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateReferenceSpace>(pfnCreateReferenceSpace))(
        session, createInfo, space);
  }

  //! @brief Call xrGetReferenceSpaceBoundsRect, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetReferenceSpaceBoundsRect(XrSession session,
                                                           XrReferenceSpaceType referenceSpaceType,
                                                           XrExtent2Df* bounds) {
    XrResult result = populate_("xrGetReferenceSpaceBoundsRect", pfnGetReferenceSpaceBoundsRect);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetReferenceSpaceBoundsRect>(pfnGetReferenceSpaceBoundsRect))(
        session, referenceSpaceType, bounds);
  }

  //! @brief Call xrGetReferenceSpaceBoundsRect (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetReferenceSpaceBoundsRect(XrSession session,
                                                           XrReferenceSpaceType referenceSpaceType,
                                                           XrExtent2Df* bounds) const {
    return (reinterpret_cast<PFN_xrGetReferenceSpaceBoundsRect>(pfnGetReferenceSpaceBoundsRect))(
        session, referenceSpaceType, bounds);
  }

  //! @brief Call xrCreateActionSpace, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateActionSpace(XrSession session,
                                                 const XrActionSpaceCreateInfo* createInfo,
                                                 XrSpace* space) {
    XrResult result = populate_("xrCreateActionSpace", pfnCreateActionSpace);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateActionSpace>(pfnCreateActionSpace))(session, createInfo,
                                                                             space);
  }

  //! @brief Call xrCreateActionSpace (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateActionSpace(XrSession session,
                                                 const XrActionSpaceCreateInfo* createInfo,
                                                 XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateActionSpace>(pfnCreateActionSpace))(session, createInfo,
                                                                             space);
  }

  //! @brief Call xrLocateSpace, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLocateSpace(XrSpace space, XrSpace baseSpace, XrTime time,
                                           XrSpaceLocation* location) {
    XrResult result = populate_("xrLocateSpace", pfnLocateSpace);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateSpace>(pfnLocateSpace))(space, baseSpace, time, location);
  }

  //! @brief Call xrLocateSpace (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLocateSpace(XrSpace space, XrSpace baseSpace, XrTime time,
                                           XrSpaceLocation* location) const {
    return (reinterpret_cast<PFN_xrLocateSpace>(pfnLocateSpace))(space, baseSpace, time, location);
  }

  //! @brief Call xrDestroySpace, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySpace(XrSpace space) {
    XrResult result = populate_("xrDestroySpace", pfnDestroySpace);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpace>(pfnDestroySpace))(space);
  }

  //! @brief Call xrDestroySpace (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySpace(XrSpace space) const {
    return (reinterpret_cast<PFN_xrDestroySpace>(pfnDestroySpace))(space);
  }

  //! @brief Call xrEnumerateViewConfigurations, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateViewConfigurations(
      XrInstance instance, XrSystemId systemId, uint32_t viewConfigurationTypeCapacityInput,
      uint32_t* viewConfigurationTypeCountOutput, XrViewConfigurationType* viewConfigurationTypes) {
    XrResult result = populate_("xrEnumerateViewConfigurations", pfnEnumerateViewConfigurations);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateViewConfigurations>(pfnEnumerateViewConfigurations))(
        instance, systemId, viewConfigurationTypeCapacityInput, viewConfigurationTypeCountOutput,
        viewConfigurationTypes);
  }

  //! @brief Call xrEnumerateViewConfigurations (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateViewConfigurations(
      XrInstance instance, XrSystemId systemId, uint32_t viewConfigurationTypeCapacityInput,
      uint32_t* viewConfigurationTypeCountOutput,
      XrViewConfigurationType* viewConfigurationTypes) const {
    return (reinterpret_cast<PFN_xrEnumerateViewConfigurations>(pfnEnumerateViewConfigurations))(
        instance, systemId, viewConfigurationTypeCapacityInput, viewConfigurationTypeCountOutput,
        viewConfigurationTypes);
  }

  //! @brief Call xrGetViewConfigurationProperties, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetViewConfigurationProperties(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      XrViewConfigurationProperties* configurationProperties) {
    XrResult result =
        populate_("xrGetViewConfigurationProperties", pfnGetViewConfigurationProperties);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrGetViewConfigurationProperties>(pfnGetViewConfigurationProperties))(
        instance, systemId, viewConfigurationType, configurationProperties);
  }

  //! @brief Call xrGetViewConfigurationProperties (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetViewConfigurationProperties(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      XrViewConfigurationProperties* configurationProperties) const {
    return (
        reinterpret_cast<PFN_xrGetViewConfigurationProperties>(pfnGetViewConfigurationProperties))(
        instance, systemId, viewConfigurationType, configurationProperties);
  }

  //! @brief Call xrEnumerateViewConfigurationViews, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateViewConfigurationViews(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t viewCapacityInput, uint32_t* viewCountOutput, XrViewConfigurationView* views) {
    XrResult result =
        populate_("xrEnumerateViewConfigurationViews", pfnEnumerateViewConfigurationViews);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateViewConfigurationViews>(
        pfnEnumerateViewConfigurationViews))(instance, systemId, viewConfigurationType,
                                             viewCapacityInput, viewCountOutput, views);
  }

  //! @brief Call xrEnumerateViewConfigurationViews (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateViewConfigurationViews(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t viewCapacityInput, uint32_t* viewCountOutput, XrViewConfigurationView* views) const {
    return (reinterpret_cast<PFN_xrEnumerateViewConfigurationViews>(
        pfnEnumerateViewConfigurationViews))(instance, systemId, viewConfigurationType,
                                             viewCapacityInput, viewCountOutput, views);
  }

  //! @brief Call xrEnumerateSwapchainFormats, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateSwapchainFormats(XrSession session,
                                                         uint32_t formatCapacityInput,
                                                         uint32_t* formatCountOutput,
                                                         int64_t* formats) {
    XrResult result = populate_("xrEnumerateSwapchainFormats", pfnEnumerateSwapchainFormats);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateSwapchainFormats>(pfnEnumerateSwapchainFormats))(
        session, formatCapacityInput, formatCountOutput, formats);
  }

  //! @brief Call xrEnumerateSwapchainFormats (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateSwapchainFormats(XrSession session,
                                                         uint32_t formatCapacityInput,
                                                         uint32_t* formatCountOutput,
                                                         int64_t* formats) const {
    return (reinterpret_cast<PFN_xrEnumerateSwapchainFormats>(pfnEnumerateSwapchainFormats))(
        session, formatCapacityInput, formatCountOutput, formats);
  }

  //! @brief Call xrCreateSwapchain, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSwapchain(XrSession session,
                                               const XrSwapchainCreateInfo* createInfo,
                                               XrSwapchain* swapchain) {
    XrResult result = populate_("xrCreateSwapchain", pfnCreateSwapchain);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSwapchain>(pfnCreateSwapchain))(session, createInfo,
                                                                         swapchain);
  }

  //! @brief Call xrCreateSwapchain (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSwapchain(XrSession session,
                                               const XrSwapchainCreateInfo* createInfo,
                                               XrSwapchain* swapchain) const {
    return (reinterpret_cast<PFN_xrCreateSwapchain>(pfnCreateSwapchain))(session, createInfo,
                                                                         swapchain);
  }

  //! @brief Call xrDestroySwapchain, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySwapchain(XrSwapchain swapchain) {
    XrResult result = populate_("xrDestroySwapchain", pfnDestroySwapchain);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySwapchain>(pfnDestroySwapchain))(swapchain);
  }

  //! @brief Call xrDestroySwapchain (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySwapchain(XrSwapchain swapchain) const {
    return (reinterpret_cast<PFN_xrDestroySwapchain>(pfnDestroySwapchain))(swapchain);
  }

  //! @brief Call xrEnumerateSwapchainImages, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateSwapchainImages(XrSwapchain swapchain,
                                                        uint32_t imageCapacityInput,
                                                        uint32_t* imageCountOutput,
                                                        XrSwapchainImageBaseHeader* images) {
    XrResult result = populate_("xrEnumerateSwapchainImages", pfnEnumerateSwapchainImages);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateSwapchainImages>(pfnEnumerateSwapchainImages))(
        swapchain, imageCapacityInput, imageCountOutput, images);
  }

  //! @brief Call xrEnumerateSwapchainImages (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateSwapchainImages(XrSwapchain swapchain,
                                                        uint32_t imageCapacityInput,
                                                        uint32_t* imageCountOutput,
                                                        XrSwapchainImageBaseHeader* images) const {
    return (reinterpret_cast<PFN_xrEnumerateSwapchainImages>(pfnEnumerateSwapchainImages))(
        swapchain, imageCapacityInput, imageCountOutput, images);
  }

  //! @brief Call xrAcquireSwapchainImage, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrAcquireSwapchainImage(XrSwapchain swapchain,
                                                     const XrSwapchainImageAcquireInfo* acquireInfo,
                                                     uint32_t* index) {
    XrResult result = populate_("xrAcquireSwapchainImage", pfnAcquireSwapchainImage);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrAcquireSwapchainImage>(pfnAcquireSwapchainImage))(
        swapchain, acquireInfo, index);
  }

  //! @brief Call xrAcquireSwapchainImage (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrAcquireSwapchainImage(XrSwapchain swapchain,
                                                     const XrSwapchainImageAcquireInfo* acquireInfo,
                                                     uint32_t* index) const {
    return (reinterpret_cast<PFN_xrAcquireSwapchainImage>(pfnAcquireSwapchainImage))(
        swapchain, acquireInfo, index);
  }

  //! @brief Call xrWaitSwapchainImage, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrWaitSwapchainImage(XrSwapchain swapchain,
                                                  const XrSwapchainImageWaitInfo* waitInfo) {
    XrResult result = populate_("xrWaitSwapchainImage", pfnWaitSwapchainImage);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrWaitSwapchainImage>(pfnWaitSwapchainImage))(swapchain, waitInfo);
  }

  //! @brief Call xrWaitSwapchainImage (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrWaitSwapchainImage(XrSwapchain swapchain,
                                                  const XrSwapchainImageWaitInfo* waitInfo) const {
    return (reinterpret_cast<PFN_xrWaitSwapchainImage>(pfnWaitSwapchainImage))(swapchain, waitInfo);
  }

  //! @brief Call xrReleaseSwapchainImage, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrReleaseSwapchainImage(XrSwapchain swapchain, const XrSwapchainImageReleaseInfo* releaseInfo) {
    XrResult result = populate_("xrReleaseSwapchainImage", pfnReleaseSwapchainImage);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrReleaseSwapchainImage>(pfnReleaseSwapchainImage))(swapchain,
                                                                                     releaseInfo);
  }

  //! @brief Call xrReleaseSwapchainImage (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrReleaseSwapchainImage(
      XrSwapchain swapchain, const XrSwapchainImageReleaseInfo* releaseInfo) const {
    return (reinterpret_cast<PFN_xrReleaseSwapchainImage>(pfnReleaseSwapchainImage))(swapchain,
                                                                                     releaseInfo);
  }

  //! @brief Call xrBeginSession, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrBeginSession(XrSession session,
                                            const XrSessionBeginInfo* beginInfo) {
    XrResult result = populate_("xrBeginSession", pfnBeginSession);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrBeginSession>(pfnBeginSession))(session, beginInfo);
  }

  //! @brief Call xrBeginSession (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrBeginSession(XrSession session,
                                            const XrSessionBeginInfo* beginInfo) const {
    return (reinterpret_cast<PFN_xrBeginSession>(pfnBeginSession))(session, beginInfo);
  }

  //! @brief Call xrEndSession, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEndSession(XrSession session) {
    XrResult result = populate_("xrEndSession", pfnEndSession);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEndSession>(pfnEndSession))(session);
  }

  //! @brief Call xrEndSession (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEndSession(XrSession session) const {
    return (reinterpret_cast<PFN_xrEndSession>(pfnEndSession))(session);
  }

  //! @brief Call xrRequestExitSession, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrRequestExitSession(XrSession session) {
    XrResult result = populate_("xrRequestExitSession", pfnRequestExitSession);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrRequestExitSession>(pfnRequestExitSession))(session);
  }

  //! @brief Call xrRequestExitSession (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrRequestExitSession(XrSession session) const {
    return (reinterpret_cast<PFN_xrRequestExitSession>(pfnRequestExitSession))(session);
  }

  //! @brief Call xrWaitFrame, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrWaitFrame(XrSession session, const XrFrameWaitInfo* frameWaitInfo,
                                         XrFrameState* frameState) {
    XrResult result = populate_("xrWaitFrame", pfnWaitFrame);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrWaitFrame>(pfnWaitFrame))(session, frameWaitInfo, frameState);
  }

  //! @brief Call xrWaitFrame (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrWaitFrame(XrSession session, const XrFrameWaitInfo* frameWaitInfo,
                                         XrFrameState* frameState) const {
    return (reinterpret_cast<PFN_xrWaitFrame>(pfnWaitFrame))(session, frameWaitInfo, frameState);
  }

  //! @brief Call xrBeginFrame, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrBeginFrame(XrSession session,
                                          const XrFrameBeginInfo* frameBeginInfo) {
    XrResult result = populate_("xrBeginFrame", pfnBeginFrame);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrBeginFrame>(pfnBeginFrame))(session, frameBeginInfo);
  }

  //! @brief Call xrBeginFrame (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrBeginFrame(XrSession session,
                                          const XrFrameBeginInfo* frameBeginInfo) const {
    return (reinterpret_cast<PFN_xrBeginFrame>(pfnBeginFrame))(session, frameBeginInfo);
  }

  //! @brief Call xrEndFrame, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEndFrame(XrSession session, const XrFrameEndInfo* frameEndInfo) {
    XrResult result = populate_("xrEndFrame", pfnEndFrame);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEndFrame>(pfnEndFrame))(session, frameEndInfo);
  }

  //! @brief Call xrEndFrame (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEndFrame(XrSession session,
                                        const XrFrameEndInfo* frameEndInfo) const {
    return (reinterpret_cast<PFN_xrEndFrame>(pfnEndFrame))(session, frameEndInfo);
  }

  //! @brief Call xrLocateViews, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLocateViews(XrSession session,
                                           const XrViewLocateInfo* viewLocateInfo,
                                           XrViewState* viewState, uint32_t viewCapacityInput,
                                           uint32_t* viewCountOutput, XrView* views) {
    XrResult result = populate_("xrLocateViews", pfnLocateViews);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateViews>(pfnLocateViews))(
        session, viewLocateInfo, viewState, viewCapacityInput, viewCountOutput, views);
  }

  //! @brief Call xrLocateViews (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLocateViews(XrSession session,
                                           const XrViewLocateInfo* viewLocateInfo,
                                           XrViewState* viewState, uint32_t viewCapacityInput,
                                           uint32_t* viewCountOutput, XrView* views) const {
    return (reinterpret_cast<PFN_xrLocateViews>(pfnLocateViews))(
        session, viewLocateInfo, viewState, viewCapacityInput, viewCountOutput, views);
  }

  //! @brief Call xrStringToPath, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrStringToPath(XrInstance instance, const char* pathString,
                                            XrPath* path) {
    XrResult result = populate_("xrStringToPath", pfnStringToPath);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStringToPath>(pfnStringToPath))(instance, pathString, path);
  }

  //! @brief Call xrStringToPath (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrStringToPath(XrInstance instance, const char* pathString,
                                            XrPath* path) const {
    return (reinterpret_cast<PFN_xrStringToPath>(pfnStringToPath))(instance, pathString, path);
  }

  //! @brief Call xrPathToString, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPathToString(XrInstance instance, XrPath path,
                                            uint32_t bufferCapacityInput,
                                            uint32_t* bufferCountOutput, char* buffer) {
    XrResult result = populate_("xrPathToString", pfnPathToString);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPathToString>(pfnPathToString))(
        instance, path, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrPathToString (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPathToString(XrInstance instance, XrPath path,
                                            uint32_t bufferCapacityInput,
                                            uint32_t* bufferCountOutput, char* buffer) const {
    return (reinterpret_cast<PFN_xrPathToString>(pfnPathToString))(
        instance, path, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrCreateActionSet, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateActionSet(XrInstance instance,
                                               const XrActionSetCreateInfo* createInfo,
                                               XrActionSet* actionSet) {
    XrResult result = populate_("xrCreateActionSet", pfnCreateActionSet);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateActionSet>(pfnCreateActionSet))(instance, createInfo,
                                                                         actionSet);
  }

  //! @brief Call xrCreateActionSet (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateActionSet(XrInstance instance,
                                               const XrActionSetCreateInfo* createInfo,
                                               XrActionSet* actionSet) const {
    return (reinterpret_cast<PFN_xrCreateActionSet>(pfnCreateActionSet))(instance, createInfo,
                                                                         actionSet);
  }

  //! @brief Call xrDestroyActionSet, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyActionSet(XrActionSet actionSet) {
    XrResult result = populate_("xrDestroyActionSet", pfnDestroyActionSet);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyActionSet>(pfnDestroyActionSet))(actionSet);
  }

  //! @brief Call xrDestroyActionSet (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyActionSet(XrActionSet actionSet) const {
    return (reinterpret_cast<PFN_xrDestroyActionSet>(pfnDestroyActionSet))(actionSet);
  }

  //! @brief Call xrCreateAction, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateAction(XrActionSet actionSet,
                                            const XrActionCreateInfo* createInfo,
                                            XrAction* action) {
    XrResult result = populate_("xrCreateAction", pfnCreateAction);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateAction>(pfnCreateAction))(actionSet, createInfo, action);
  }

  //! @brief Call xrCreateAction (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateAction(XrActionSet actionSet,
                                            const XrActionCreateInfo* createInfo,
                                            XrAction* action) const {
    return (reinterpret_cast<PFN_xrCreateAction>(pfnCreateAction))(actionSet, createInfo, action);
  }

  //! @brief Call xrDestroyAction, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyAction(XrAction action) {
    XrResult result = populate_("xrDestroyAction", pfnDestroyAction);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyAction>(pfnDestroyAction))(action);
  }

  //! @brief Call xrDestroyAction (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyAction(XrAction action) const {
    return (reinterpret_cast<PFN_xrDestroyAction>(pfnDestroyAction))(action);
  }

  //! @brief Call xrSuggestInteractionProfileBindings, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSuggestInteractionProfileBindings(
      XrInstance instance, const XrInteractionProfileSuggestedBinding* suggestedBindings) {
    XrResult result =
        populate_("xrSuggestInteractionProfileBindings", pfnSuggestInteractionProfileBindings);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSuggestInteractionProfileBindings>(
        pfnSuggestInteractionProfileBindings))(instance, suggestedBindings);
  }

  //! @brief Call xrSuggestInteractionProfileBindings (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSuggestInteractionProfileBindings(
      XrInstance instance, const XrInteractionProfileSuggestedBinding* suggestedBindings) const {
    return (reinterpret_cast<PFN_xrSuggestInteractionProfileBindings>(
        pfnSuggestInteractionProfileBindings))(instance, suggestedBindings);
  }

  //! @brief Call xrAttachSessionActionSets, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrAttachSessionActionSets(XrSession session, const XrSessionActionSetsAttachInfo* attachInfo) {
    XrResult result = populate_("xrAttachSessionActionSets", pfnAttachSessionActionSets);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrAttachSessionActionSets>(pfnAttachSessionActionSets))(
        session, attachInfo);
  }

  //! @brief Call xrAttachSessionActionSets (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrAttachSessionActionSets(
      XrSession session, const XrSessionActionSetsAttachInfo* attachInfo) const {
    return (reinterpret_cast<PFN_xrAttachSessionActionSets>(pfnAttachSessionActionSets))(
        session, attachInfo);
  }

  //! @brief Call xrGetCurrentInteractionProfile, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetCurrentInteractionProfile(
      XrSession session, XrPath topLevelUserPath, XrInteractionProfileState* interactionProfile) {
    XrResult result = populate_("xrGetCurrentInteractionProfile", pfnGetCurrentInteractionProfile);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetCurrentInteractionProfile>(pfnGetCurrentInteractionProfile))(
        session, topLevelUserPath, interactionProfile);
  }

  //! @brief Call xrGetCurrentInteractionProfile (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetCurrentInteractionProfile(XrSession session, XrPath topLevelUserPath,
                                 XrInteractionProfileState* interactionProfile) const {
    return (reinterpret_cast<PFN_xrGetCurrentInteractionProfile>(pfnGetCurrentInteractionProfile))(
        session, topLevelUserPath, interactionProfile);
  }

  //! @brief Call xrGetActionStateBoolean, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetActionStateBoolean(XrSession session,
                                                     const XrActionStateGetInfo* getInfo,
                                                     XrActionStateBoolean* state) {
    XrResult result = populate_("xrGetActionStateBoolean", pfnGetActionStateBoolean);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetActionStateBoolean>(pfnGetActionStateBoolean))(
        session, getInfo, state);
  }

  //! @brief Call xrGetActionStateBoolean (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetActionStateBoolean(XrSession session,
                                                     const XrActionStateGetInfo* getInfo,
                                                     XrActionStateBoolean* state) const {
    return (reinterpret_cast<PFN_xrGetActionStateBoolean>(pfnGetActionStateBoolean))(
        session, getInfo, state);
  }

  //! @brief Call xrGetActionStateFloat, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetActionStateFloat(XrSession session,
                                                   const XrActionStateGetInfo* getInfo,
                                                   XrActionStateFloat* state) {
    XrResult result = populate_("xrGetActionStateFloat", pfnGetActionStateFloat);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetActionStateFloat>(pfnGetActionStateFloat))(session, getInfo,
                                                                                 state);
  }

  //! @brief Call xrGetActionStateFloat (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetActionStateFloat(XrSession session,
                                                   const XrActionStateGetInfo* getInfo,
                                                   XrActionStateFloat* state) const {
    return (reinterpret_cast<PFN_xrGetActionStateFloat>(pfnGetActionStateFloat))(session, getInfo,
                                                                                 state);
  }

  //! @brief Call xrGetActionStateVector2f, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetActionStateVector2f(XrSession session,
                                                      const XrActionStateGetInfo* getInfo,
                                                      XrActionStateVector2f* state) {
    XrResult result = populate_("xrGetActionStateVector2f", pfnGetActionStateVector2f);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetActionStateVector2f>(pfnGetActionStateVector2f))(
        session, getInfo, state);
  }

  //! @brief Call xrGetActionStateVector2f (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetActionStateVector2f(XrSession session,
                                                      const XrActionStateGetInfo* getInfo,
                                                      XrActionStateVector2f* state) const {
    return (reinterpret_cast<PFN_xrGetActionStateVector2f>(pfnGetActionStateVector2f))(
        session, getInfo, state);
  }

  //! @brief Call xrGetActionStatePose, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetActionStatePose(XrSession session,
                                                  const XrActionStateGetInfo* getInfo,
                                                  XrActionStatePose* state) {
    XrResult result = populate_("xrGetActionStatePose", pfnGetActionStatePose);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetActionStatePose>(pfnGetActionStatePose))(session, getInfo,
                                                                               state);
  }

  //! @brief Call xrGetActionStatePose (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetActionStatePose(XrSession session,
                                                  const XrActionStateGetInfo* getInfo,
                                                  XrActionStatePose* state) const {
    return (reinterpret_cast<PFN_xrGetActionStatePose>(pfnGetActionStatePose))(session, getInfo,
                                                                               state);
  }

  //! @brief Call xrSyncActions, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSyncActions(XrSession session, const XrActionsSyncInfo* syncInfo) {
    XrResult result = populate_("xrSyncActions", pfnSyncActions);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSyncActions>(pfnSyncActions))(session, syncInfo);
  }

  //! @brief Call xrSyncActions (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSyncActions(XrSession session,
                                           const XrActionsSyncInfo* syncInfo) const {
    return (reinterpret_cast<PFN_xrSyncActions>(pfnSyncActions))(session, syncInfo);
  }

  //! @brief Call xrEnumerateBoundSourcesForAction, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateBoundSourcesForAction(
      XrSession session, const XrBoundSourcesForActionEnumerateInfo* enumerateInfo,
      uint32_t sourceCapacityInput, uint32_t* sourceCountOutput, XrPath* sources) {
    XrResult result =
        populate_("xrEnumerateBoundSourcesForAction", pfnEnumerateBoundSourcesForAction);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateBoundSourcesForAction>(pfnEnumerateBoundSourcesForAction))(
        session, enumerateInfo, sourceCapacityInput, sourceCountOutput, sources);
  }

  //! @brief Call xrEnumerateBoundSourcesForAction (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateBoundSourcesForAction(
      XrSession session, const XrBoundSourcesForActionEnumerateInfo* enumerateInfo,
      uint32_t sourceCapacityInput, uint32_t* sourceCountOutput, XrPath* sources) const {
    return (
        reinterpret_cast<PFN_xrEnumerateBoundSourcesForAction>(pfnEnumerateBoundSourcesForAction))(
        session, enumerateInfo, sourceCapacityInput, sourceCountOutput, sources);
  }

  //! @brief Call xrGetInputSourceLocalizedName, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetInputSourceLocalizedName(
      XrSession session, const XrInputSourceLocalizedNameGetInfo* getInfo,
      uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) {
    XrResult result = populate_("xrGetInputSourceLocalizedName", pfnGetInputSourceLocalizedName);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetInputSourceLocalizedName>(pfnGetInputSourceLocalizedName))(
        session, getInfo, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetInputSourceLocalizedName (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetInputSourceLocalizedName(
      XrSession session, const XrInputSourceLocalizedNameGetInfo* getInfo,
      uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) const {
    return (reinterpret_cast<PFN_xrGetInputSourceLocalizedName>(pfnGetInputSourceLocalizedName))(
        session, getInfo, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrApplyHapticFeedback, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrApplyHapticFeedback(XrSession session,
                                                   const XrHapticActionInfo* hapticActionInfo,
                                                   const XrHapticBaseHeader* hapticFeedback) {
    XrResult result = populate_("xrApplyHapticFeedback", pfnApplyHapticFeedback);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrApplyHapticFeedback>(pfnApplyHapticFeedback))(
        session, hapticActionInfo, hapticFeedback);
  }

  //! @brief Call xrApplyHapticFeedback (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrApplyHapticFeedback(XrSession session,
                                                   const XrHapticActionInfo* hapticActionInfo,
                                                   const XrHapticBaseHeader* hapticFeedback) const {
    return (reinterpret_cast<PFN_xrApplyHapticFeedback>(pfnApplyHapticFeedback))(
        session, hapticActionInfo, hapticFeedback);
  }

  //! @brief Call xrStopHapticFeedback, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrStopHapticFeedback(XrSession session,
                                                  const XrHapticActionInfo* hapticActionInfo) {
    XrResult result = populate_("xrStopHapticFeedback", pfnStopHapticFeedback);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStopHapticFeedback>(pfnStopHapticFeedback))(session,
                                                                               hapticActionInfo);
  }

  //! @brief Call xrStopHapticFeedback (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrStopHapticFeedback(XrSession session, const XrHapticActionInfo* hapticActionInfo) const {
    return (reinterpret_cast<PFN_xrStopHapticFeedback>(pfnStopHapticFeedback))(session,
                                                                               hapticActionInfo);
  }

#ifdef XR_KHR_android_thread_settings
#if defined(XR_USE_PLATFORM_ANDROID)
  //! @brief Call xrSetAndroidApplicationThreadKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetAndroidApplicationThreadKHR(XrSession session,
                                                              XrAndroidThreadTypeKHR threadType,
                                                              uint32_t threadId) {
    XrResult result =
        populate_("xrSetAndroidApplicationThreadKHR", pfnSetAndroidApplicationThreadKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetAndroidApplicationThreadKHR>(
        pfnSetAndroidApplicationThreadKHR))(session, threadType, threadId);
  }

  //! @brief Call xrSetAndroidApplicationThreadKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetAndroidApplicationThreadKHR(XrSession session,
                                                              XrAndroidThreadTypeKHR threadType,
                                                              uint32_t threadId) const {
    return (reinterpret_cast<PFN_xrSetAndroidApplicationThreadKHR>(
        pfnSetAndroidApplicationThreadKHR))(session, threadType, threadId);
  }
#endif  // defined(XR_USE_PLATFORM_ANDROID)
#endif  // XR_KHR_android_thread_settings
#ifdef XR_KHR_android_surface_swapchain
#if defined(XR_USE_PLATFORM_ANDROID)
  //! @brief Call xrCreateSwapchainAndroidSurfaceKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSwapchainAndroidSurfaceKHR(XrSession session,
                                                                const XrSwapchainCreateInfo* info,
                                                                XrSwapchain* swapchain,
                                                                jobject* surface) {
    XrResult result =
        populate_("xrCreateSwapchainAndroidSurfaceKHR", pfnCreateSwapchainAndroidSurfaceKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSwapchainAndroidSurfaceKHR>(
        pfnCreateSwapchainAndroidSurfaceKHR))(session, info, swapchain, surface);
  }

  //! @brief Call xrCreateSwapchainAndroidSurfaceKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSwapchainAndroidSurfaceKHR(XrSession session,
                                                                const XrSwapchainCreateInfo* info,
                                                                XrSwapchain* swapchain,
                                                                jobject* surface) const {
    return (reinterpret_cast<PFN_xrCreateSwapchainAndroidSurfaceKHR>(
        pfnCreateSwapchainAndroidSurfaceKHR))(session, info, swapchain, surface);
  }
#endif  // defined(XR_USE_PLATFORM_ANDROID)
#endif  // XR_KHR_android_surface_swapchain
#ifdef XR_KHR_opengl_enable
#if defined(XR_USE_GRAPHICS_API_OPENGL)
  //! @brief Call xrGetOpenGLGraphicsRequirementsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetOpenGLGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                     XrGraphicsRequirementsOpenGLKHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetOpenGLGraphicsRequirementsKHR", pfnGetOpenGLGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetOpenGLGraphicsRequirementsKHR>(
        pfnGetOpenGLGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetOpenGLGraphicsRequirementsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetOpenGLGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                     XrGraphicsRequirementsOpenGLKHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetOpenGLGraphicsRequirementsKHR>(
        pfnGetOpenGLGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_OPENGL)
#endif  // XR_KHR_opengl_enable
#ifdef XR_KHR_opengl_es_enable
#if defined(XR_USE_GRAPHICS_API_OPENGL_ES)
  //! @brief Call xrGetOpenGLESGraphicsRequirementsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetOpenGLESGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                       XrGraphicsRequirementsOpenGLESKHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetOpenGLESGraphicsRequirementsKHR", pfnGetOpenGLESGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetOpenGLESGraphicsRequirementsKHR>(
        pfnGetOpenGLESGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetOpenGLESGraphicsRequirementsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetOpenGLESGraphicsRequirementsKHR(
      XrInstance instance, XrSystemId systemId,
      XrGraphicsRequirementsOpenGLESKHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetOpenGLESGraphicsRequirementsKHR>(
        pfnGetOpenGLESGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_OPENGL_ES)
#endif  // XR_KHR_opengl_es_enable
#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrGetVulkanInstanceExtensionsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetVulkanInstanceExtensionsKHR(XrInstance instance,
                                                              XrSystemId systemId,
                                                              uint32_t bufferCapacityInput,
                                                              uint32_t* bufferCountOutput,
                                                              char* buffer) {
    XrResult result =
        populate_("xrGetVulkanInstanceExtensionsKHR", pfnGetVulkanInstanceExtensionsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrGetVulkanInstanceExtensionsKHR>(pfnGetVulkanInstanceExtensionsKHR))(
        instance, systemId, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetVulkanInstanceExtensionsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetVulkanInstanceExtensionsKHR(XrInstance instance,
                                                              XrSystemId systemId,
                                                              uint32_t bufferCapacityInput,
                                                              uint32_t* bufferCountOutput,
                                                              char* buffer) const {
    return (
        reinterpret_cast<PFN_xrGetVulkanInstanceExtensionsKHR>(pfnGetVulkanInstanceExtensionsKHR))(
        instance, systemId, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable
#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrGetVulkanDeviceExtensionsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetVulkanDeviceExtensionsKHR(XrInstance instance,
                                                            XrSystemId systemId,
                                                            uint32_t bufferCapacityInput,
                                                            uint32_t* bufferCountOutput,
                                                            char* buffer) {
    XrResult result = populate_("xrGetVulkanDeviceExtensionsKHR", pfnGetVulkanDeviceExtensionsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVulkanDeviceExtensionsKHR>(pfnGetVulkanDeviceExtensionsKHR))(
        instance, systemId, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetVulkanDeviceExtensionsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetVulkanDeviceExtensionsKHR(XrInstance instance,
                                                            XrSystemId systemId,
                                                            uint32_t bufferCapacityInput,
                                                            uint32_t* bufferCountOutput,
                                                            char* buffer) const {
    return (reinterpret_cast<PFN_xrGetVulkanDeviceExtensionsKHR>(pfnGetVulkanDeviceExtensionsKHR))(
        instance, systemId, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable
#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrGetVulkanGraphicsDeviceKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetVulkanGraphicsDeviceKHR(XrInstance instance, XrSystemId systemId,
                                                          VkInstance vkInstance,
                                                          VkPhysicalDevice* vkPhysicalDevice) {
    XrResult result = populate_("xrGetVulkanGraphicsDeviceKHR", pfnGetVulkanGraphicsDeviceKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDeviceKHR>(pfnGetVulkanGraphicsDeviceKHR))(
        instance, systemId, vkInstance, vkPhysicalDevice);
  }

  //! @brief Call xrGetVulkanGraphicsDeviceKHR (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetVulkanGraphicsDeviceKHR(XrInstance instance, XrSystemId systemId, VkInstance vkInstance,
                               VkPhysicalDevice* vkPhysicalDevice) const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDeviceKHR>(pfnGetVulkanGraphicsDeviceKHR))(
        instance, systemId, vkInstance, vkPhysicalDevice);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable
#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrGetVulkanGraphicsRequirementsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetVulkanGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                     XrGraphicsRequirementsVulkanKHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetVulkanGraphicsRequirementsKHR", pfnGetVulkanGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirementsKHR>(
        pfnGetVulkanGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetVulkanGraphicsRequirementsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetVulkanGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                     XrGraphicsRequirementsVulkanKHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirementsKHR>(
        pfnGetVulkanGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable
#ifdef XR_KHR_D3D11_enable
#if defined(XR_USE_GRAPHICS_API_D3D11)
  //! @brief Call xrGetD3D11GraphicsRequirementsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetD3D11GraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                    XrGraphicsRequirementsD3D11KHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetD3D11GraphicsRequirementsKHR", pfnGetD3D11GraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetD3D11GraphicsRequirementsKHR>(
        pfnGetD3D11GraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetD3D11GraphicsRequirementsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetD3D11GraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                    XrGraphicsRequirementsD3D11KHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetD3D11GraphicsRequirementsKHR>(
        pfnGetD3D11GraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_D3D11)
#endif  // XR_KHR_D3D11_enable
#ifdef XR_KHR_D3D12_enable
#if defined(XR_USE_GRAPHICS_API_D3D12)
  //! @brief Call xrGetD3D12GraphicsRequirementsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetD3D12GraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                    XrGraphicsRequirementsD3D12KHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetD3D12GraphicsRequirementsKHR", pfnGetD3D12GraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetD3D12GraphicsRequirementsKHR>(
        pfnGetD3D12GraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetD3D12GraphicsRequirementsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetD3D12GraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                    XrGraphicsRequirementsD3D12KHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetD3D12GraphicsRequirementsKHR>(
        pfnGetD3D12GraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_D3D12)
#endif  // XR_KHR_D3D12_enable
#ifdef XR_KHR_visibility_mask
  //! @brief Call xrGetVisibilityMaskKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetVisibilityMaskKHR(XrSession session,
                                                    XrViewConfigurationType viewConfigurationType,
                                                    uint32_t viewIndex,
                                                    XrVisibilityMaskTypeKHR visibilityMaskType,
                                                    XrVisibilityMaskKHR* visibilityMask) {
    XrResult result = populate_("xrGetVisibilityMaskKHR", pfnGetVisibilityMaskKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVisibilityMaskKHR>(pfnGetVisibilityMaskKHR))(
        session, viewConfigurationType, viewIndex, visibilityMaskType, visibilityMask);
  }

  //! @brief Call xrGetVisibilityMaskKHR (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetVisibilityMaskKHR(XrSession session,
                                                    XrViewConfigurationType viewConfigurationType,
                                                    uint32_t viewIndex,
                                                    XrVisibilityMaskTypeKHR visibilityMaskType,
                                                    XrVisibilityMaskKHR* visibilityMask) const {
    return (reinterpret_cast<PFN_xrGetVisibilityMaskKHR>(pfnGetVisibilityMaskKHR))(
        session, viewConfigurationType, viewIndex, visibilityMaskType, visibilityMask);
  }
#endif  // XR_KHR_visibility_mask
#ifdef XR_KHR_win32_convert_performance_counter_time
#if defined(XR_USE_PLATFORM_WIN32)
  //! @brief Call xrConvertWin32PerformanceCounterToTimeKHR, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrConvertWin32PerformanceCounterToTimeKHR(
      XrInstance instance, const LARGE_INTEGER* performanceCounter, XrTime* time) {
    XrResult result = populate_("xrConvertWin32PerformanceCounterToTimeKHR",
                                pfnConvertWin32PerformanceCounterToTimeKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrConvertWin32PerformanceCounterToTimeKHR>(
        pfnConvertWin32PerformanceCounterToTimeKHR))(instance, performanceCounter, time);
  }

  //! @brief Call xrConvertWin32PerformanceCounterToTimeKHR (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrConvertWin32PerformanceCounterToTimeKHR(
      XrInstance instance, const LARGE_INTEGER* performanceCounter, XrTime* time) const {
    return (reinterpret_cast<PFN_xrConvertWin32PerformanceCounterToTimeKHR>(
        pfnConvertWin32PerformanceCounterToTimeKHR))(instance, performanceCounter, time);
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_KHR_win32_convert_performance_counter_time
#ifdef XR_KHR_win32_convert_performance_counter_time
#if defined(XR_USE_PLATFORM_WIN32)
  //! @brief Call xrConvertTimeToWin32PerformanceCounterKHR, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrConvertTimeToWin32PerformanceCounterKHR(
      XrInstance instance, XrTime time, LARGE_INTEGER* performanceCounter) {
    XrResult result = populate_("xrConvertTimeToWin32PerformanceCounterKHR",
                                pfnConvertTimeToWin32PerformanceCounterKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrConvertTimeToWin32PerformanceCounterKHR>(
        pfnConvertTimeToWin32PerformanceCounterKHR))(instance, time, performanceCounter);
  }

  //! @brief Call xrConvertTimeToWin32PerformanceCounterKHR (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrConvertTimeToWin32PerformanceCounterKHR(
      XrInstance instance, XrTime time, LARGE_INTEGER* performanceCounter) const {
    return (reinterpret_cast<PFN_xrConvertTimeToWin32PerformanceCounterKHR>(
        pfnConvertTimeToWin32PerformanceCounterKHR))(instance, time, performanceCounter);
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_KHR_win32_convert_performance_counter_time
#ifdef XR_KHR_convert_timespec_time
#if defined(XR_USE_TIMESPEC)
  //! @brief Call xrConvertTimespecTimeToTimeKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrConvertTimespecTimeToTimeKHR(XrInstance instance,
                                                            const struct timespec* timespecTime,
                                                            XrTime* time) {
    XrResult result = populate_("xrConvertTimespecTimeToTimeKHR", pfnConvertTimespecTimeToTimeKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrConvertTimespecTimeToTimeKHR>(pfnConvertTimespecTimeToTimeKHR))(
        instance, timespecTime, time);
  }

  //! @brief Call xrConvertTimespecTimeToTimeKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrConvertTimespecTimeToTimeKHR(XrInstance instance,
                                                            const struct timespec* timespecTime,
                                                            XrTime* time) const {
    return (reinterpret_cast<PFN_xrConvertTimespecTimeToTimeKHR>(pfnConvertTimespecTimeToTimeKHR))(
        instance, timespecTime, time);
  }
#endif  // defined(XR_USE_TIMESPEC)
#endif  // XR_KHR_convert_timespec_time
#ifdef XR_KHR_convert_timespec_time
#if defined(XR_USE_TIMESPEC)
  //! @brief Call xrConvertTimeToTimespecTimeKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrConvertTimeToTimespecTimeKHR(XrInstance instance, XrTime time,
                                                            struct timespec* timespecTime) {
    XrResult result = populate_("xrConvertTimeToTimespecTimeKHR", pfnConvertTimeToTimespecTimeKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrConvertTimeToTimespecTimeKHR>(pfnConvertTimeToTimespecTimeKHR))(
        instance, time, timespecTime);
  }

  //! @brief Call xrConvertTimeToTimespecTimeKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrConvertTimeToTimespecTimeKHR(XrInstance instance, XrTime time,
                                                            struct timespec* timespecTime) const {
    return (reinterpret_cast<PFN_xrConvertTimeToTimespecTimeKHR>(pfnConvertTimeToTimespecTimeKHR))(
        instance, time, timespecTime);
  }
#endif  // defined(XR_USE_TIMESPEC)
#endif  // XR_KHR_convert_timespec_time
#ifdef XR_KHR_loader_init
  //! @brief Call xrInitializeLoaderKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrInitializeLoaderKHR(const XrLoaderInitInfoBaseHeaderKHR* loaderInitInfo) {
    XrResult result = populate_("xrInitializeLoaderKHR", pfnInitializeLoaderKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrInitializeLoaderKHR>(pfnInitializeLoaderKHR))(loaderInitInfo);
  }

  //! @brief Call xrInitializeLoaderKHR (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrInitializeLoaderKHR(const XrLoaderInitInfoBaseHeaderKHR* loaderInitInfo) const {
    return (reinterpret_cast<PFN_xrInitializeLoaderKHR>(pfnInitializeLoaderKHR))(loaderInitInfo);
  }
#endif  // XR_KHR_loader_init
#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrCreateVulkanInstanceKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateVulkanInstanceKHR(XrInstance instance, const XrVulkanInstanceCreateInfoKHR* createInfo,
                            VkInstance* vulkanInstance, VkResult* vulkanResult) {
    XrResult result = populate_("xrCreateVulkanInstanceKHR", pfnCreateVulkanInstanceKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateVulkanInstanceKHR>(pfnCreateVulkanInstanceKHR))(
        instance, createInfo, vulkanInstance, vulkanResult);
  }

  //! @brief Call xrCreateVulkanInstanceKHR (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateVulkanInstanceKHR(XrInstance instance, const XrVulkanInstanceCreateInfoKHR* createInfo,
                            VkInstance* vulkanInstance, VkResult* vulkanResult) const {
    return (reinterpret_cast<PFN_xrCreateVulkanInstanceKHR>(pfnCreateVulkanInstanceKHR))(
        instance, createInfo, vulkanInstance, vulkanResult);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2
#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrCreateVulkanDeviceKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateVulkanDeviceKHR(XrInstance instance,
                                                     const XrVulkanDeviceCreateInfoKHR* createInfo,
                                                     VkDevice* vulkanDevice,
                                                     VkResult* vulkanResult) {
    XrResult result = populate_("xrCreateVulkanDeviceKHR", pfnCreateVulkanDeviceKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateVulkanDeviceKHR>(pfnCreateVulkanDeviceKHR))(
        instance, createInfo, vulkanDevice, vulkanResult);
  }

  //! @brief Call xrCreateVulkanDeviceKHR (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateVulkanDeviceKHR(XrInstance instance,
                                                     const XrVulkanDeviceCreateInfoKHR* createInfo,
                                                     VkDevice* vulkanDevice,
                                                     VkResult* vulkanResult) const {
    return (reinterpret_cast<PFN_xrCreateVulkanDeviceKHR>(pfnCreateVulkanDeviceKHR))(
        instance, createInfo, vulkanDevice, vulkanResult);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2
#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrGetVulkanGraphicsDevice2KHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetVulkanGraphicsDevice2KHR(
      XrInstance instance, const XrVulkanGraphicsDeviceGetInfoKHR* getInfo,
      VkPhysicalDevice* vulkanPhysicalDevice) {
    XrResult result = populate_("xrGetVulkanGraphicsDevice2KHR", pfnGetVulkanGraphicsDevice2KHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDevice2KHR>(pfnGetVulkanGraphicsDevice2KHR))(
        instance, getInfo, vulkanPhysicalDevice);
  }

  //! @brief Call xrGetVulkanGraphicsDevice2KHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetVulkanGraphicsDevice2KHR(
      XrInstance instance, const XrVulkanGraphicsDeviceGetInfoKHR* getInfo,
      VkPhysicalDevice* vulkanPhysicalDevice) const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDevice2KHR>(pfnGetVulkanGraphicsDevice2KHR))(
        instance, getInfo, vulkanPhysicalDevice);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2
#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrGetVulkanGraphicsRequirements2KHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetVulkanGraphicsRequirements2KHR(XrInstance instance, XrSystemId systemId,
                                      XrGraphicsRequirementsVulkanKHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetVulkanGraphicsRequirements2KHR", pfnGetVulkanGraphicsRequirements2KHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirements2KHR>(
        pfnGetVulkanGraphicsRequirements2KHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetVulkanGraphicsRequirements2KHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetVulkanGraphicsRequirements2KHR(XrInstance instance, XrSystemId systemId,
                                      XrGraphicsRequirementsVulkanKHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirements2KHR>(
        pfnGetVulkanGraphicsRequirements2KHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2
#ifdef XR_EXT_performance_settings
  //! @brief Call xrPerfSettingsSetPerformanceLevelEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPerfSettingsSetPerformanceLevelEXT(XrSession session,
                                                                  XrPerfSettingsDomainEXT domain,
                                                                  XrPerfSettingsLevelEXT level) {
    XrResult result =
        populate_("xrPerfSettingsSetPerformanceLevelEXT", pfnPerfSettingsSetPerformanceLevelEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPerfSettingsSetPerformanceLevelEXT>(
        pfnPerfSettingsSetPerformanceLevelEXT))(session, domain, level);
  }

  //! @brief Call xrPerfSettingsSetPerformanceLevelEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrPerfSettingsSetPerformanceLevelEXT(
      XrSession session, XrPerfSettingsDomainEXT domain, XrPerfSettingsLevelEXT level) const {
    return (reinterpret_cast<PFN_xrPerfSettingsSetPerformanceLevelEXT>(
        pfnPerfSettingsSetPerformanceLevelEXT))(session, domain, level);
  }
#endif  // XR_EXT_performance_settings
#ifdef XR_EXT_thermal_query
  //! @brief Call xrThermalGetTemperatureTrendEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrThermalGetTemperatureTrendEXT(XrSession session, XrPerfSettingsDomainEXT domain,
                                  XrPerfSettingsNotificationLevelEXT* notificationLevel,
                                  float* tempHeadroom, float* tempSlope) {
    XrResult result =
        populate_("xrThermalGetTemperatureTrendEXT", pfnThermalGetTemperatureTrendEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrThermalGetTemperatureTrendEXT>(pfnThermalGetTemperatureTrendEXT))(
        session, domain, notificationLevel, tempHeadroom, tempSlope);
  }

  //! @brief Call xrThermalGetTemperatureTrendEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrThermalGetTemperatureTrendEXT(XrSession session, XrPerfSettingsDomainEXT domain,
                                  XrPerfSettingsNotificationLevelEXT* notificationLevel,
                                  float* tempHeadroom, float* tempSlope) const {
    return (
        reinterpret_cast<PFN_xrThermalGetTemperatureTrendEXT>(pfnThermalGetTemperatureTrendEXT))(
        session, domain, notificationLevel, tempHeadroom, tempSlope);
  }
#endif  // XR_EXT_thermal_query
#ifdef XR_EXT_debug_utils
  //! @brief Call xrSetDebugUtilsObjectNameEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrSetDebugUtilsObjectNameEXT(XrInstance instance, const XrDebugUtilsObjectNameInfoEXT* nameInfo) {
    XrResult result = populate_("xrSetDebugUtilsObjectNameEXT", pfnSetDebugUtilsObjectNameEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetDebugUtilsObjectNameEXT>(pfnSetDebugUtilsObjectNameEXT))(
        instance, nameInfo);
  }

  //! @brief Call xrSetDebugUtilsObjectNameEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetDebugUtilsObjectNameEXT(
      XrInstance instance, const XrDebugUtilsObjectNameInfoEXT* nameInfo) const {
    return (reinterpret_cast<PFN_xrSetDebugUtilsObjectNameEXT>(pfnSetDebugUtilsObjectNameEXT))(
        instance, nameInfo);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_EXT_debug_utils
  //! @brief Call xrCreateDebugUtilsMessengerEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateDebugUtilsMessengerEXT(
      XrInstance instance, const XrDebugUtilsMessengerCreateInfoEXT* createInfo,
      XrDebugUtilsMessengerEXT* messenger) {
    XrResult result = populate_("xrCreateDebugUtilsMessengerEXT", pfnCreateDebugUtilsMessengerEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateDebugUtilsMessengerEXT>(pfnCreateDebugUtilsMessengerEXT))(
        instance, createInfo, messenger);
  }

  //! @brief Call xrCreateDebugUtilsMessengerEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateDebugUtilsMessengerEXT(
      XrInstance instance, const XrDebugUtilsMessengerCreateInfoEXT* createInfo,
      XrDebugUtilsMessengerEXT* messenger) const {
    return (reinterpret_cast<PFN_xrCreateDebugUtilsMessengerEXT>(pfnCreateDebugUtilsMessengerEXT))(
        instance, createInfo, messenger);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_EXT_debug_utils
  //! @brief Call xrDestroyDebugUtilsMessengerEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyDebugUtilsMessengerEXT(XrDebugUtilsMessengerEXT messenger) {
    XrResult result =
        populate_("xrDestroyDebugUtilsMessengerEXT", pfnDestroyDebugUtilsMessengerEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyDebugUtilsMessengerEXT>(
        pfnDestroyDebugUtilsMessengerEXT))(messenger);
  }

  //! @brief Call xrDestroyDebugUtilsMessengerEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrDestroyDebugUtilsMessengerEXT(XrDebugUtilsMessengerEXT messenger) const {
    return (reinterpret_cast<PFN_xrDestroyDebugUtilsMessengerEXT>(
        pfnDestroyDebugUtilsMessengerEXT))(messenger);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_EXT_debug_utils
  //! @brief Call xrSubmitDebugUtilsMessageEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSubmitDebugUtilsMessageEXT(
      XrInstance instance, XrDebugUtilsMessageSeverityFlagsEXT messageSeverity,
      XrDebugUtilsMessageTypeFlagsEXT messageTypes,
      const XrDebugUtilsMessengerCallbackDataEXT* callbackData) {
    XrResult result = populate_("xrSubmitDebugUtilsMessageEXT", pfnSubmitDebugUtilsMessageEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSubmitDebugUtilsMessageEXT>(pfnSubmitDebugUtilsMessageEXT))(
        instance, messageSeverity, messageTypes, callbackData);
  }

  //! @brief Call xrSubmitDebugUtilsMessageEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSubmitDebugUtilsMessageEXT(
      XrInstance instance, XrDebugUtilsMessageSeverityFlagsEXT messageSeverity,
      XrDebugUtilsMessageTypeFlagsEXT messageTypes,
      const XrDebugUtilsMessengerCallbackDataEXT* callbackData) const {
    return (reinterpret_cast<PFN_xrSubmitDebugUtilsMessageEXT>(pfnSubmitDebugUtilsMessageEXT))(
        instance, messageSeverity, messageTypes, callbackData);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_EXT_debug_utils
  //! @brief Call xrSessionBeginDebugUtilsLabelRegionEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrSessionBeginDebugUtilsLabelRegionEXT(XrSession session, const XrDebugUtilsLabelEXT* labelInfo) {
    XrResult result = populate_("xrSessionBeginDebugUtilsLabelRegionEXT",
                                pfnSessionBeginDebugUtilsLabelRegionEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSessionBeginDebugUtilsLabelRegionEXT>(
        pfnSessionBeginDebugUtilsLabelRegionEXT))(session, labelInfo);
  }

  //! @brief Call xrSessionBeginDebugUtilsLabelRegionEXT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrSessionBeginDebugUtilsLabelRegionEXT(
      XrSession session, const XrDebugUtilsLabelEXT* labelInfo) const {
    return (reinterpret_cast<PFN_xrSessionBeginDebugUtilsLabelRegionEXT>(
        pfnSessionBeginDebugUtilsLabelRegionEXT))(session, labelInfo);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_EXT_debug_utils
  //! @brief Call xrSessionEndDebugUtilsLabelRegionEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSessionEndDebugUtilsLabelRegionEXT(XrSession session) {
    XrResult result =
        populate_("xrSessionEndDebugUtilsLabelRegionEXT", pfnSessionEndDebugUtilsLabelRegionEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSessionEndDebugUtilsLabelRegionEXT>(
        pfnSessionEndDebugUtilsLabelRegionEXT))(session);
  }

  //! @brief Call xrSessionEndDebugUtilsLabelRegionEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSessionEndDebugUtilsLabelRegionEXT(XrSession session) const {
    return (reinterpret_cast<PFN_xrSessionEndDebugUtilsLabelRegionEXT>(
        pfnSessionEndDebugUtilsLabelRegionEXT))(session);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_EXT_debug_utils
  //! @brief Call xrSessionInsertDebugUtilsLabelEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrSessionInsertDebugUtilsLabelEXT(XrSession session, const XrDebugUtilsLabelEXT* labelInfo) {
    XrResult result =
        populate_("xrSessionInsertDebugUtilsLabelEXT", pfnSessionInsertDebugUtilsLabelEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSessionInsertDebugUtilsLabelEXT>(
        pfnSessionInsertDebugUtilsLabelEXT))(session, labelInfo);
  }

  //! @brief Call xrSessionInsertDebugUtilsLabelEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSessionInsertDebugUtilsLabelEXT(
      XrSession session, const XrDebugUtilsLabelEXT* labelInfo) const {
    return (reinterpret_cast<PFN_xrSessionInsertDebugUtilsLabelEXT>(
        pfnSessionInsertDebugUtilsLabelEXT))(session, labelInfo);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_MSFT_spatial_anchor
  //! @brief Call xrCreateSpatialAnchorMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateSpatialAnchorMSFT(XrSession session, const XrSpatialAnchorCreateInfoMSFT* createInfo,
                            XrSpatialAnchorMSFT* anchor) {
    XrResult result = populate_("xrCreateSpatialAnchorMSFT", pfnCreateSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorMSFT>(pfnCreateSpatialAnchorMSFT))(
        session, createInfo, anchor);
  }

  //! @brief Call xrCreateSpatialAnchorMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateSpatialAnchorMSFT(XrSession session, const XrSpatialAnchorCreateInfoMSFT* createInfo,
                            XrSpatialAnchorMSFT* anchor) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorMSFT>(pfnCreateSpatialAnchorMSFT))(
        session, createInfo, anchor);
  }
#endif  // XR_MSFT_spatial_anchor
#ifdef XR_MSFT_spatial_anchor
  //! @brief Call xrCreateSpatialAnchorSpaceMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorSpaceMSFT(
      XrSession session, const XrSpatialAnchorSpaceCreateInfoMSFT* createInfo, XrSpace* space) {
    XrResult result = populate_("xrCreateSpatialAnchorSpaceMSFT", pfnCreateSpatialAnchorSpaceMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorSpaceMSFT>(pfnCreateSpatialAnchorSpaceMSFT))(
        session, createInfo, space);
  }

  //! @brief Call xrCreateSpatialAnchorSpaceMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorSpaceMSFT(
      XrSession session, const XrSpatialAnchorSpaceCreateInfoMSFT* createInfo,
      XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorSpaceMSFT>(pfnCreateSpatialAnchorSpaceMSFT))(
        session, createInfo, space);
  }
#endif  // XR_MSFT_spatial_anchor
#ifdef XR_MSFT_spatial_anchor
  //! @brief Call xrDestroySpatialAnchorMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySpatialAnchorMSFT(XrSpatialAnchorMSFT anchor) {
    XrResult result = populate_("xrDestroySpatialAnchorMSFT", pfnDestroySpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialAnchorMSFT>(pfnDestroySpatialAnchorMSFT))(anchor);
  }

  //! @brief Call xrDestroySpatialAnchorMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySpatialAnchorMSFT(XrSpatialAnchorMSFT anchor) const {
    return (reinterpret_cast<PFN_xrDestroySpatialAnchorMSFT>(pfnDestroySpatialAnchorMSFT))(anchor);
  }
#endif  // XR_MSFT_spatial_anchor
#ifdef XR_EXT_conformance_automation
  //! @brief Call xrSetInputDeviceActiveEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceActiveEXT(XrSession session, XrPath interactionProfile,
                                                       XrPath topLevelPath, XrBool32 isActive) {
    XrResult result = populate_("xrSetInputDeviceActiveEXT", pfnSetInputDeviceActiveEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceActiveEXT>(pfnSetInputDeviceActiveEXT))(
        session, interactionProfile, topLevelPath, isActive);
  }

  //! @brief Call xrSetInputDeviceActiveEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceActiveEXT(XrSession session, XrPath interactionProfile,
                                                       XrPath topLevelPath,
                                                       XrBool32 isActive) const {
    return (reinterpret_cast<PFN_xrSetInputDeviceActiveEXT>(pfnSetInputDeviceActiveEXT))(
        session, interactionProfile, topLevelPath, isActive);
  }
#endif  // XR_EXT_conformance_automation
#ifdef XR_EXT_conformance_automation
  //! @brief Call xrSetInputDeviceStateBoolEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceStateBoolEXT(XrSession session, XrPath topLevelPath,
                                                          XrPath inputSourcePath, XrBool32 state) {
    XrResult result = populate_("xrSetInputDeviceStateBoolEXT", pfnSetInputDeviceStateBoolEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceStateBoolEXT>(pfnSetInputDeviceStateBoolEXT))(
        session, topLevelPath, inputSourcePath, state);
  }

  //! @brief Call xrSetInputDeviceStateBoolEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceStateBoolEXT(XrSession session, XrPath topLevelPath,
                                                          XrPath inputSourcePath,
                                                          XrBool32 state) const {
    return (reinterpret_cast<PFN_xrSetInputDeviceStateBoolEXT>(pfnSetInputDeviceStateBoolEXT))(
        session, topLevelPath, inputSourcePath, state);
  }
#endif  // XR_EXT_conformance_automation
#ifdef XR_EXT_conformance_automation
  //! @brief Call xrSetInputDeviceStateFloatEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceStateFloatEXT(XrSession session, XrPath topLevelPath,
                                                           XrPath inputSourcePath, float state) {
    XrResult result = populate_("xrSetInputDeviceStateFloatEXT", pfnSetInputDeviceStateFloatEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceStateFloatEXT>(pfnSetInputDeviceStateFloatEXT))(
        session, topLevelPath, inputSourcePath, state);
  }

  //! @brief Call xrSetInputDeviceStateFloatEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceStateFloatEXT(XrSession session, XrPath topLevelPath,
                                                           XrPath inputSourcePath,
                                                           float state) const {
    return (reinterpret_cast<PFN_xrSetInputDeviceStateFloatEXT>(pfnSetInputDeviceStateFloatEXT))(
        session, topLevelPath, inputSourcePath, state);
  }
#endif  // XR_EXT_conformance_automation
#ifdef XR_EXT_conformance_automation
  //! @brief Call xrSetInputDeviceStateVector2fEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceStateVector2fEXT(XrSession session,
                                                              XrPath topLevelPath,
                                                              XrPath inputSourcePath,
                                                              XrVector2f state) {
    XrResult result =
        populate_("xrSetInputDeviceStateVector2fEXT", pfnSetInputDeviceStateVector2fEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceStateVector2fEXT>(
        pfnSetInputDeviceStateVector2fEXT))(session, topLevelPath, inputSourcePath, state);
  }

  //! @brief Call xrSetInputDeviceStateVector2fEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceStateVector2fEXT(XrSession session,
                                                              XrPath topLevelPath,
                                                              XrPath inputSourcePath,
                                                              XrVector2f state) const {
    return (reinterpret_cast<PFN_xrSetInputDeviceStateVector2fEXT>(
        pfnSetInputDeviceStateVector2fEXT))(session, topLevelPath, inputSourcePath, state);
  }
#endif  // XR_EXT_conformance_automation
#ifdef XR_EXT_conformance_automation
  //! @brief Call xrSetInputDeviceLocationEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceLocationEXT(XrSession session, XrPath topLevelPath,
                                                         XrPath inputSourcePath, XrSpace space,
                                                         XrPosef pose) {
    XrResult result = populate_("xrSetInputDeviceLocationEXT", pfnSetInputDeviceLocationEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceLocationEXT>(pfnSetInputDeviceLocationEXT))(
        session, topLevelPath, inputSourcePath, space, pose);
  }

  //! @brief Call xrSetInputDeviceLocationEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceLocationEXT(XrSession session, XrPath topLevelPath,
                                                         XrPath inputSourcePath, XrSpace space,
                                                         XrPosef pose) const {
    return (reinterpret_cast<PFN_xrSetInputDeviceLocationEXT>(pfnSetInputDeviceLocationEXT))(
        session, topLevelPath, inputSourcePath, space, pose);
  }
#endif  // XR_EXT_conformance_automation
#ifdef XR_MSFT_spatial_graph_bridge
  //! @brief Call xrCreateSpatialGraphNodeSpaceMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialGraphNodeSpaceMSFT(
      XrSession session, const XrSpatialGraphNodeSpaceCreateInfoMSFT* createInfo, XrSpace* space) {
    XrResult result =
        populate_("xrCreateSpatialGraphNodeSpaceMSFT", pfnCreateSpatialGraphNodeSpaceMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialGraphNodeSpaceMSFT>(
        pfnCreateSpatialGraphNodeSpaceMSFT))(session, createInfo, space);
  }

  //! @brief Call xrCreateSpatialGraphNodeSpaceMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialGraphNodeSpaceMSFT(
      XrSession session, const XrSpatialGraphNodeSpaceCreateInfoMSFT* createInfo,
      XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateSpatialGraphNodeSpaceMSFT>(
        pfnCreateSpatialGraphNodeSpaceMSFT))(session, createInfo, space);
  }
#endif  // XR_MSFT_spatial_graph_bridge
#ifdef XR_EXT_hand_tracking
  //! @brief Call xrCreateHandTrackerEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateHandTrackerEXT(XrSession session,
                                                    const XrHandTrackerCreateInfoEXT* createInfo,
                                                    XrHandTrackerEXT* handTracker) {
    XrResult result = populate_("xrCreateHandTrackerEXT", pfnCreateHandTrackerEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateHandTrackerEXT>(pfnCreateHandTrackerEXT))(
        session, createInfo, handTracker);
  }

  //! @brief Call xrCreateHandTrackerEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateHandTrackerEXT(XrSession session,
                                                    const XrHandTrackerCreateInfoEXT* createInfo,
                                                    XrHandTrackerEXT* handTracker) const {
    return (reinterpret_cast<PFN_xrCreateHandTrackerEXT>(pfnCreateHandTrackerEXT))(
        session, createInfo, handTracker);
  }
#endif  // XR_EXT_hand_tracking
#ifdef XR_EXT_hand_tracking
  //! @brief Call xrDestroyHandTrackerEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyHandTrackerEXT(XrHandTrackerEXT handTracker) {
    XrResult result = populate_("xrDestroyHandTrackerEXT", pfnDestroyHandTrackerEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyHandTrackerEXT>(pfnDestroyHandTrackerEXT))(handTracker);
  }

  //! @brief Call xrDestroyHandTrackerEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyHandTrackerEXT(XrHandTrackerEXT handTracker) const {
    return (reinterpret_cast<PFN_xrDestroyHandTrackerEXT>(pfnDestroyHandTrackerEXT))(handTracker);
  }
#endif  // XR_EXT_hand_tracking
#ifdef XR_EXT_hand_tracking
  //! @brief Call xrLocateHandJointsEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLocateHandJointsEXT(XrHandTrackerEXT handTracker,
                                                   const XrHandJointsLocateInfoEXT* locateInfo,
                                                   XrHandJointLocationsEXT* locations) {
    XrResult result = populate_("xrLocateHandJointsEXT", pfnLocateHandJointsEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateHandJointsEXT>(pfnLocateHandJointsEXT))(
        handTracker, locateInfo, locations);
  }

  //! @brief Call xrLocateHandJointsEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLocateHandJointsEXT(XrHandTrackerEXT handTracker,
                                                   const XrHandJointsLocateInfoEXT* locateInfo,
                                                   XrHandJointLocationsEXT* locations) const {
    return (reinterpret_cast<PFN_xrLocateHandJointsEXT>(pfnLocateHandJointsEXT))(
        handTracker, locateInfo, locations);
  }
#endif  // XR_EXT_hand_tracking
#ifdef XR_MSFT_hand_tracking_mesh
  //! @brief Call xrCreateHandMeshSpaceMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateHandMeshSpaceMSFT(XrHandTrackerEXT handTracker,
                            const XrHandMeshSpaceCreateInfoMSFT* createInfo, XrSpace* space) {
    XrResult result = populate_("xrCreateHandMeshSpaceMSFT", pfnCreateHandMeshSpaceMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateHandMeshSpaceMSFT>(pfnCreateHandMeshSpaceMSFT))(
        handTracker, createInfo, space);
  }

  //! @brief Call xrCreateHandMeshSpaceMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateHandMeshSpaceMSFT(XrHandTrackerEXT handTracker,
                            const XrHandMeshSpaceCreateInfoMSFT* createInfo, XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateHandMeshSpaceMSFT>(pfnCreateHandMeshSpaceMSFT))(
        handTracker, createInfo, space);
  }
#endif  // XR_MSFT_hand_tracking_mesh
#ifdef XR_MSFT_hand_tracking_mesh
  //! @brief Call xrUpdateHandMeshMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrUpdateHandMeshMSFT(XrHandTrackerEXT handTracker,
                                                  const XrHandMeshUpdateInfoMSFT* updateInfo,
                                                  XrHandMeshMSFT* handMesh) {
    XrResult result = populate_("xrUpdateHandMeshMSFT", pfnUpdateHandMeshMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUpdateHandMeshMSFT>(pfnUpdateHandMeshMSFT))(
        handTracker, updateInfo, handMesh);
  }

  //! @brief Call xrUpdateHandMeshMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrUpdateHandMeshMSFT(XrHandTrackerEXT handTracker,
                                                  const XrHandMeshUpdateInfoMSFT* updateInfo,
                                                  XrHandMeshMSFT* handMesh) const {
    return (reinterpret_cast<PFN_xrUpdateHandMeshMSFT>(pfnUpdateHandMeshMSFT))(
        handTracker, updateInfo, handMesh);
  }
#endif  // XR_MSFT_hand_tracking_mesh
#ifdef XR_MSFT_controller_model
  //! @brief Call xrGetControllerModelKeyMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetControllerModelKeyMSFT(XrSession session, XrPath topLevelUserPath,
                              XrControllerModelKeyStateMSFT* controllerModelKeyState) {
    XrResult result = populate_("xrGetControllerModelKeyMSFT", pfnGetControllerModelKeyMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetControllerModelKeyMSFT>(pfnGetControllerModelKeyMSFT))(
        session, topLevelUserPath, controllerModelKeyState);
  }

  //! @brief Call xrGetControllerModelKeyMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetControllerModelKeyMSFT(XrSession session, XrPath topLevelUserPath,
                              XrControllerModelKeyStateMSFT* controllerModelKeyState) const {
    return (reinterpret_cast<PFN_xrGetControllerModelKeyMSFT>(pfnGetControllerModelKeyMSFT))(
        session, topLevelUserPath, controllerModelKeyState);
  }
#endif  // XR_MSFT_controller_model
#ifdef XR_MSFT_controller_model
  //! @brief Call xrLoadControllerModelMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLoadControllerModelMSFT(XrSession session,
                                                       XrControllerModelKeyMSFT modelKey,
                                                       uint32_t bufferCapacityInput,
                                                       uint32_t* bufferCountOutput,
                                                       uint8_t* buffer) {
    XrResult result = populate_("xrLoadControllerModelMSFT", pfnLoadControllerModelMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLoadControllerModelMSFT>(pfnLoadControllerModelMSFT))(
        session, modelKey, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrLoadControllerModelMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLoadControllerModelMSFT(XrSession session,
                                                       XrControllerModelKeyMSFT modelKey,
                                                       uint32_t bufferCapacityInput,
                                                       uint32_t* bufferCountOutput,
                                                       uint8_t* buffer) const {
    return (reinterpret_cast<PFN_xrLoadControllerModelMSFT>(pfnLoadControllerModelMSFT))(
        session, modelKey, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // XR_MSFT_controller_model
#ifdef XR_MSFT_controller_model
  //! @brief Call xrGetControllerModelPropertiesMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetControllerModelPropertiesMSFT(XrSession session, XrControllerModelKeyMSFT modelKey,
                                     XrControllerModelPropertiesMSFT* properties) {
    XrResult result =
        populate_("xrGetControllerModelPropertiesMSFT", pfnGetControllerModelPropertiesMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetControllerModelPropertiesMSFT>(
        pfnGetControllerModelPropertiesMSFT))(session, modelKey, properties);
  }

  //! @brief Call xrGetControllerModelPropertiesMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetControllerModelPropertiesMSFT(XrSession session, XrControllerModelKeyMSFT modelKey,
                                     XrControllerModelPropertiesMSFT* properties) const {
    return (reinterpret_cast<PFN_xrGetControllerModelPropertiesMSFT>(
        pfnGetControllerModelPropertiesMSFT))(session, modelKey, properties);
  }
#endif  // XR_MSFT_controller_model
#ifdef XR_MSFT_controller_model
  //! @brief Call xrGetControllerModelStateMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetControllerModelStateMSFT(XrSession session,
                                                           XrControllerModelKeyMSFT modelKey,
                                                           XrControllerModelStateMSFT* state) {
    XrResult result = populate_("xrGetControllerModelStateMSFT", pfnGetControllerModelStateMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetControllerModelStateMSFT>(pfnGetControllerModelStateMSFT))(
        session, modelKey, state);
  }

  //! @brief Call xrGetControllerModelStateMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetControllerModelStateMSFT(XrSession session, XrControllerModelKeyMSFT modelKey,
                                XrControllerModelStateMSFT* state) const {
    return (reinterpret_cast<PFN_xrGetControllerModelStateMSFT>(pfnGetControllerModelStateMSFT))(
        session, modelKey, state);
  }
#endif  // XR_MSFT_controller_model
#ifdef XR_MSFT_perception_anchor_interop
#if defined(XR_USE_PLATFORM_WIN32)
  //! @brief Call xrCreateSpatialAnchorFromPerceptionAnchorMSFT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorFromPerceptionAnchorMSFT(
      XrSession session, IUnknown* perceptionAnchor, XrSpatialAnchorMSFT* anchor) {
    XrResult result = populate_("xrCreateSpatialAnchorFromPerceptionAnchorMSFT",
                                pfnCreateSpatialAnchorFromPerceptionAnchorMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT>(
        pfnCreateSpatialAnchorFromPerceptionAnchorMSFT))(session, perceptionAnchor, anchor);
  }

  //! @brief Call xrCreateSpatialAnchorFromPerceptionAnchorMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorFromPerceptionAnchorMSFT(
      XrSession session, IUnknown* perceptionAnchor, XrSpatialAnchorMSFT* anchor) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT>(
        pfnCreateSpatialAnchorFromPerceptionAnchorMSFT))(session, perceptionAnchor, anchor);
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_MSFT_perception_anchor_interop
#ifdef XR_MSFT_perception_anchor_interop
#if defined(XR_USE_PLATFORM_WIN32)
  //! @brief Call xrTryGetPerceptionAnchorFromSpatialAnchorMSFT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrTryGetPerceptionAnchorFromSpatialAnchorMSFT(
      XrSession session, XrSpatialAnchorMSFT anchor, IUnknown** perceptionAnchor) {
    XrResult result = populate_("xrTryGetPerceptionAnchorFromSpatialAnchorMSFT",
                                pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT>(
        pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT))(session, anchor, perceptionAnchor);
  }

  //! @brief Call xrTryGetPerceptionAnchorFromSpatialAnchorMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrTryGetPerceptionAnchorFromSpatialAnchorMSFT(
      XrSession session, XrSpatialAnchorMSFT anchor, IUnknown** perceptionAnchor) const {
    return (reinterpret_cast<PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT>(
        pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT))(session, anchor, perceptionAnchor);
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_MSFT_perception_anchor_interop
#ifdef XR_MSFT_composition_layer_reprojection
  //! @brief Call xrEnumerateReprojectionModesMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateReprojectionModesMSFT(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t modeCapacityInput, uint32_t* modeCountOutput, XrReprojectionModeMSFT* modes) {
    XrResult result =
        populate_("xrEnumerateReprojectionModesMSFT", pfnEnumerateReprojectionModesMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateReprojectionModesMSFT>(pfnEnumerateReprojectionModesMSFT))(
        instance, systemId, viewConfigurationType, modeCapacityInput, modeCountOutput, modes);
  }

  //! @brief Call xrEnumerateReprojectionModesMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateReprojectionModesMSFT(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t modeCapacityInput, uint32_t* modeCountOutput, XrReprojectionModeMSFT* modes) const {
    return (
        reinterpret_cast<PFN_xrEnumerateReprojectionModesMSFT>(pfnEnumerateReprojectionModesMSFT))(
        instance, systemId, viewConfigurationType, modeCapacityInput, modeCountOutput, modes);
  }
#endif  // XR_MSFT_composition_layer_reprojection
#ifdef XR_FB_swapchain_update_state
  //! @brief Call xrUpdateSwapchainFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrUpdateSwapchainFB(XrSwapchain swapchain,
                                                 const XrSwapchainStateBaseHeaderFB* state) {
    XrResult result = populate_("xrUpdateSwapchainFB", pfnUpdateSwapchainFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUpdateSwapchainFB>(pfnUpdateSwapchainFB))(swapchain, state);
  }

  //! @brief Call xrUpdateSwapchainFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrUpdateSwapchainFB(XrSwapchain swapchain,
                                                 const XrSwapchainStateBaseHeaderFB* state) const {
    return (reinterpret_cast<PFN_xrUpdateSwapchainFB>(pfnUpdateSwapchainFB))(swapchain, state);
  }
#endif  // XR_FB_swapchain_update_state
#ifdef XR_FB_swapchain_update_state
  //! @brief Call xrGetSwapchainStateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSwapchainStateFB(XrSwapchain swapchain,
                                                   XrSwapchainStateBaseHeaderFB* state) {
    XrResult result = populate_("xrGetSwapchainStateFB", pfnGetSwapchainStateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSwapchainStateFB>(pfnGetSwapchainStateFB))(swapchain, state);
  }

  //! @brief Call xrGetSwapchainStateFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSwapchainStateFB(XrSwapchain swapchain,
                                                   XrSwapchainStateBaseHeaderFB* state) const {
    return (reinterpret_cast<PFN_xrGetSwapchainStateFB>(pfnGetSwapchainStateFB))(swapchain, state);
  }
#endif  // XR_FB_swapchain_update_state
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrEnumerateSceneComputeFeaturesMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateSceneComputeFeaturesMSFT(
      XrInstance instance, XrSystemId systemId, uint32_t featureCapacityInput,
      uint32_t* featureCountOutput, XrSceneComputeFeatureMSFT* features) {
    XrResult result =
        populate_("xrEnumerateSceneComputeFeaturesMSFT", pfnEnumerateSceneComputeFeaturesMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateSceneComputeFeaturesMSFT>(
        pfnEnumerateSceneComputeFeaturesMSFT))(instance, systemId, featureCapacityInput,
                                               featureCountOutput, features);
  }

  //! @brief Call xrEnumerateSceneComputeFeaturesMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateSceneComputeFeaturesMSFT(
      XrInstance instance, XrSystemId systemId, uint32_t featureCapacityInput,
      uint32_t* featureCountOutput, XrSceneComputeFeatureMSFT* features) const {
    return (reinterpret_cast<PFN_xrEnumerateSceneComputeFeaturesMSFT>(
        pfnEnumerateSceneComputeFeaturesMSFT))(instance, systemId, featureCapacityInput,
                                               featureCountOutput, features);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrCreateSceneObserverMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateSceneObserverMSFT(XrSession session, const XrSceneObserverCreateInfoMSFT* createInfo,
                            XrSceneObserverMSFT* sceneObserver) {
    XrResult result = populate_("xrCreateSceneObserverMSFT", pfnCreateSceneObserverMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSceneObserverMSFT>(pfnCreateSceneObserverMSFT))(
        session, createInfo, sceneObserver);
  }

  //! @brief Call xrCreateSceneObserverMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateSceneObserverMSFT(XrSession session, const XrSceneObserverCreateInfoMSFT* createInfo,
                            XrSceneObserverMSFT* sceneObserver) const {
    return (reinterpret_cast<PFN_xrCreateSceneObserverMSFT>(pfnCreateSceneObserverMSFT))(
        session, createInfo, sceneObserver);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrDestroySceneObserverMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySceneObserverMSFT(XrSceneObserverMSFT sceneObserver) {
    XrResult result = populate_("xrDestroySceneObserverMSFT", pfnDestroySceneObserverMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySceneObserverMSFT>(pfnDestroySceneObserverMSFT))(
        sceneObserver);
  }

  //! @brief Call xrDestroySceneObserverMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySceneObserverMSFT(XrSceneObserverMSFT sceneObserver) const {
    return (reinterpret_cast<PFN_xrDestroySceneObserverMSFT>(pfnDestroySceneObserverMSFT))(
        sceneObserver);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrCreateSceneMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSceneMSFT(XrSceneObserverMSFT sceneObserver,
                                               const XrSceneCreateInfoMSFT* createInfo,
                                               XrSceneMSFT* scene) {
    XrResult result = populate_("xrCreateSceneMSFT", pfnCreateSceneMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSceneMSFT>(pfnCreateSceneMSFT))(sceneObserver, createInfo,
                                                                         scene);
  }

  //! @brief Call xrCreateSceneMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSceneMSFT(XrSceneObserverMSFT sceneObserver,
                                               const XrSceneCreateInfoMSFT* createInfo,
                                               XrSceneMSFT* scene) const {
    return (reinterpret_cast<PFN_xrCreateSceneMSFT>(pfnCreateSceneMSFT))(sceneObserver, createInfo,
                                                                         scene);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrDestroySceneMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySceneMSFT(XrSceneMSFT scene) {
    XrResult result = populate_("xrDestroySceneMSFT", pfnDestroySceneMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySceneMSFT>(pfnDestroySceneMSFT))(scene);
  }

  //! @brief Call xrDestroySceneMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySceneMSFT(XrSceneMSFT scene) const {
    return (reinterpret_cast<PFN_xrDestroySceneMSFT>(pfnDestroySceneMSFT))(scene);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrComputeNewSceneMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrComputeNewSceneMSFT(XrSceneObserverMSFT sceneObserver,
                                                   const XrNewSceneComputeInfoMSFT* computeInfo) {
    XrResult result = populate_("xrComputeNewSceneMSFT", pfnComputeNewSceneMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrComputeNewSceneMSFT>(pfnComputeNewSceneMSFT))(sceneObserver,
                                                                                 computeInfo);
  }

  //! @brief Call xrComputeNewSceneMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrComputeNewSceneMSFT(
      XrSceneObserverMSFT sceneObserver, const XrNewSceneComputeInfoMSFT* computeInfo) const {
    return (reinterpret_cast<PFN_xrComputeNewSceneMSFT>(pfnComputeNewSceneMSFT))(sceneObserver,
                                                                                 computeInfo);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrGetSceneComputeStateMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSceneComputeStateMSFT(XrSceneObserverMSFT sceneObserver,
                                                        XrSceneComputeStateMSFT* state) {
    XrResult result = populate_("xrGetSceneComputeStateMSFT", pfnGetSceneComputeStateMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSceneComputeStateMSFT>(pfnGetSceneComputeStateMSFT))(
        sceneObserver, state);
  }

  //! @brief Call xrGetSceneComputeStateMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSceneComputeStateMSFT(XrSceneObserverMSFT sceneObserver,
                                                        XrSceneComputeStateMSFT* state) const {
    return (reinterpret_cast<PFN_xrGetSceneComputeStateMSFT>(pfnGetSceneComputeStateMSFT))(
        sceneObserver, state);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrGetSceneComponentsMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSceneComponentsMSFT(XrSceneMSFT scene,
                                                      const XrSceneComponentsGetInfoMSFT* getInfo,
                                                      XrSceneComponentsMSFT* components) {
    XrResult result = populate_("xrGetSceneComponentsMSFT", pfnGetSceneComponentsMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSceneComponentsMSFT>(pfnGetSceneComponentsMSFT))(
        scene, getInfo, components);
  }

  //! @brief Call xrGetSceneComponentsMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSceneComponentsMSFT(XrSceneMSFT scene,
                                                      const XrSceneComponentsGetInfoMSFT* getInfo,
                                                      XrSceneComponentsMSFT* components) const {
    return (reinterpret_cast<PFN_xrGetSceneComponentsMSFT>(pfnGetSceneComponentsMSFT))(
        scene, getInfo, components);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrLocateSceneComponentsMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrLocateSceneComponentsMSFT(XrSceneMSFT scene, const XrSceneComponentsLocateInfoMSFT* locateInfo,
                              XrSceneComponentLocationsMSFT* locations) {
    XrResult result = populate_("xrLocateSceneComponentsMSFT", pfnLocateSceneComponentsMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateSceneComponentsMSFT>(pfnLocateSceneComponentsMSFT))(
        scene, locateInfo, locations);
  }

  //! @brief Call xrLocateSceneComponentsMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrLocateSceneComponentsMSFT(XrSceneMSFT scene, const XrSceneComponentsLocateInfoMSFT* locateInfo,
                              XrSceneComponentLocationsMSFT* locations) const {
    return (reinterpret_cast<PFN_xrLocateSceneComponentsMSFT>(pfnLocateSceneComponentsMSFT))(
        scene, locateInfo, locations);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrGetSceneMeshBuffersMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSceneMeshBuffersMSFT(XrSceneMSFT scene,
                                                       const XrSceneMeshBuffersGetInfoMSFT* getInfo,
                                                       XrSceneMeshBuffersMSFT* buffers) {
    XrResult result = populate_("xrGetSceneMeshBuffersMSFT", pfnGetSceneMeshBuffersMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSceneMeshBuffersMSFT>(pfnGetSceneMeshBuffersMSFT))(
        scene, getInfo, buffers);
  }

  //! @brief Call xrGetSceneMeshBuffersMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSceneMeshBuffersMSFT(XrSceneMSFT scene,
                                                       const XrSceneMeshBuffersGetInfoMSFT* getInfo,
                                                       XrSceneMeshBuffersMSFT* buffers) const {
    return (reinterpret_cast<PFN_xrGetSceneMeshBuffersMSFT>(pfnGetSceneMeshBuffersMSFT))(
        scene, getInfo, buffers);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding_serialization
  //! @brief Call xrDeserializeSceneMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDeserializeSceneMSFT(
      XrSceneObserverMSFT sceneObserver, const XrSceneDeserializeInfoMSFT* deserializeInfo) {
    XrResult result = populate_("xrDeserializeSceneMSFT", pfnDeserializeSceneMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDeserializeSceneMSFT>(pfnDeserializeSceneMSFT))(sceneObserver,
                                                                                   deserializeInfo);
  }

  //! @brief Call xrDeserializeSceneMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDeserializeSceneMSFT(
      XrSceneObserverMSFT sceneObserver, const XrSceneDeserializeInfoMSFT* deserializeInfo) const {
    return (reinterpret_cast<PFN_xrDeserializeSceneMSFT>(pfnDeserializeSceneMSFT))(sceneObserver,
                                                                                   deserializeInfo);
  }
#endif  // XR_MSFT_scene_understanding_serialization
#ifdef XR_MSFT_scene_understanding_serialization
  //! @brief Call xrGetSerializedSceneFragmentDataMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSerializedSceneFragmentDataMSFT(
      XrSceneMSFT scene, const XrSerializedSceneFragmentDataGetInfoMSFT* getInfo,
      uint32_t countInput, uint32_t* readOutput, uint8_t* buffer) {
    XrResult result =
        populate_("xrGetSerializedSceneFragmentDataMSFT", pfnGetSerializedSceneFragmentDataMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSerializedSceneFragmentDataMSFT>(
        pfnGetSerializedSceneFragmentDataMSFT))(scene, getInfo, countInput, readOutput, buffer);
  }

  //! @brief Call xrGetSerializedSceneFragmentDataMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetSerializedSceneFragmentDataMSFT(
      XrSceneMSFT scene, const XrSerializedSceneFragmentDataGetInfoMSFT* getInfo,
      uint32_t countInput, uint32_t* readOutput, uint8_t* buffer) const {
    return (reinterpret_cast<PFN_xrGetSerializedSceneFragmentDataMSFT>(
        pfnGetSerializedSceneFragmentDataMSFT))(scene, getInfo, countInput, readOutput, buffer);
  }
#endif  // XR_MSFT_scene_understanding_serialization
#ifdef XR_FB_display_refresh_rate
  //! @brief Call xrEnumerateDisplayRefreshRatesFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateDisplayRefreshRatesFB(
      XrSession session, uint32_t displayRefreshRateCapacityInput,
      uint32_t* displayRefreshRateCountOutput, float* displayRefreshRates) {
    XrResult result =
        populate_("xrEnumerateDisplayRefreshRatesFB", pfnEnumerateDisplayRefreshRatesFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateDisplayRefreshRatesFB>(
        pfnEnumerateDisplayRefreshRatesFB))(session, displayRefreshRateCapacityInput,
                                            displayRefreshRateCountOutput, displayRefreshRates);
  }

  //! @brief Call xrEnumerateDisplayRefreshRatesFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateDisplayRefreshRatesFB(
      XrSession session, uint32_t displayRefreshRateCapacityInput,
      uint32_t* displayRefreshRateCountOutput, float* displayRefreshRates) const {
    return (reinterpret_cast<PFN_xrEnumerateDisplayRefreshRatesFB>(
        pfnEnumerateDisplayRefreshRatesFB))(session, displayRefreshRateCapacityInput,
                                            displayRefreshRateCountOutput, displayRefreshRates);
  }
#endif  // XR_FB_display_refresh_rate
#ifdef XR_FB_display_refresh_rate
  //! @brief Call xrGetDisplayRefreshRateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetDisplayRefreshRateFB(XrSession session,
                                                       float* displayRefreshRate) {
    XrResult result = populate_("xrGetDisplayRefreshRateFB", pfnGetDisplayRefreshRateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetDisplayRefreshRateFB>(pfnGetDisplayRefreshRateFB))(
        session, displayRefreshRate);
  }

  //! @brief Call xrGetDisplayRefreshRateFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetDisplayRefreshRateFB(XrSession session,
                                                       float* displayRefreshRate) const {
    return (reinterpret_cast<PFN_xrGetDisplayRefreshRateFB>(pfnGetDisplayRefreshRateFB))(
        session, displayRefreshRate);
  }
#endif  // XR_FB_display_refresh_rate
#ifdef XR_FB_display_refresh_rate
  //! @brief Call xrRequestDisplayRefreshRateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrRequestDisplayRefreshRateFB(XrSession session,
                                                           float displayRefreshRate) {
    XrResult result = populate_("xrRequestDisplayRefreshRateFB", pfnRequestDisplayRefreshRateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrRequestDisplayRefreshRateFB>(pfnRequestDisplayRefreshRateFB))(
        session, displayRefreshRate);
  }

  //! @brief Call xrRequestDisplayRefreshRateFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrRequestDisplayRefreshRateFB(XrSession session,
                                                           float displayRefreshRate) const {
    return (reinterpret_cast<PFN_xrRequestDisplayRefreshRateFB>(pfnRequestDisplayRefreshRateFB))(
        session, displayRefreshRate);
  }
#endif  // XR_FB_display_refresh_rate
#ifdef XR_HTCX_vive_tracker_interaction
  //! @brief Call xrEnumerateViveTrackerPathsHTCX, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateViveTrackerPathsHTCX(XrInstance instance,
                                                             uint32_t pathCapacityInput,
                                                             uint32_t* pathCountOutput,
                                                             XrViveTrackerPathsHTCX* paths) {
    XrResult result =
        populate_("xrEnumerateViveTrackerPathsHTCX", pfnEnumerateViveTrackerPathsHTCX);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateViveTrackerPathsHTCX>(
        pfnEnumerateViveTrackerPathsHTCX))(instance, pathCapacityInput, pathCountOutput, paths);
  }

  //! @brief Call xrEnumerateViveTrackerPathsHTCX (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateViveTrackerPathsHTCX(XrInstance instance,
                                                             uint32_t pathCapacityInput,
                                                             uint32_t* pathCountOutput,
                                                             XrViveTrackerPathsHTCX* paths) const {
    return (reinterpret_cast<PFN_xrEnumerateViveTrackerPathsHTCX>(
        pfnEnumerateViveTrackerPathsHTCX))(instance, pathCapacityInput, pathCountOutput, paths);
  }
#endif  // XR_HTCX_vive_tracker_interaction
#ifdef XR_HTC_facial_tracking
  //! @brief Call xrCreateFacialTrackerHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateFacialTrackerHTC(XrSession session, const XrFacialTrackerCreateInfoHTC* createInfo,
                           XrFacialTrackerHTC* facialTracker) {
    XrResult result = populate_("xrCreateFacialTrackerHTC", pfnCreateFacialTrackerHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateFacialTrackerHTC>(pfnCreateFacialTrackerHTC))(
        session, createInfo, facialTracker);
  }

  //! @brief Call xrCreateFacialTrackerHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateFacialTrackerHTC(XrSession session, const XrFacialTrackerCreateInfoHTC* createInfo,
                           XrFacialTrackerHTC* facialTracker) const {
    return (reinterpret_cast<PFN_xrCreateFacialTrackerHTC>(pfnCreateFacialTrackerHTC))(
        session, createInfo, facialTracker);
  }
#endif  // XR_HTC_facial_tracking
#ifdef XR_HTC_facial_tracking
  //! @brief Call xrDestroyFacialTrackerHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyFacialTrackerHTC(XrFacialTrackerHTC facialTracker) {
    XrResult result = populate_("xrDestroyFacialTrackerHTC", pfnDestroyFacialTrackerHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyFacialTrackerHTC>(pfnDestroyFacialTrackerHTC))(
        facialTracker);
  }

  //! @brief Call xrDestroyFacialTrackerHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyFacialTrackerHTC(XrFacialTrackerHTC facialTracker) const {
    return (reinterpret_cast<PFN_xrDestroyFacialTrackerHTC>(pfnDestroyFacialTrackerHTC))(
        facialTracker);
  }
#endif  // XR_HTC_facial_tracking
#ifdef XR_HTC_facial_tracking
  //! @brief Call xrGetFacialExpressionsHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetFacialExpressionsHTC(XrFacialTrackerHTC facialTracker,
                                                       XrFacialExpressionsHTC* facialExpressions) {
    XrResult result = populate_("xrGetFacialExpressionsHTC", pfnGetFacialExpressionsHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetFacialExpressionsHTC>(pfnGetFacialExpressionsHTC))(
        facialTracker, facialExpressions);
  }

  //! @brief Call xrGetFacialExpressionsHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetFacialExpressionsHTC(
      XrFacialTrackerHTC facialTracker, XrFacialExpressionsHTC* facialExpressions) const {
    return (reinterpret_cast<PFN_xrGetFacialExpressionsHTC>(pfnGetFacialExpressionsHTC))(
        facialTracker, facialExpressions);
  }
#endif  // XR_HTC_facial_tracking
#ifdef XR_FB_color_space
  //! @brief Call xrEnumerateColorSpacesFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateColorSpacesFB(XrSession session,
                                                      uint32_t colorSpaceCapacityInput,
                                                      uint32_t* colorSpaceCountOutput,
                                                      XrColorSpaceFB* colorSpaces) {
    XrResult result = populate_("xrEnumerateColorSpacesFB", pfnEnumerateColorSpacesFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateColorSpacesFB>(pfnEnumerateColorSpacesFB))(
        session, colorSpaceCapacityInput, colorSpaceCountOutput, colorSpaces);
  }

  //! @brief Call xrEnumerateColorSpacesFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateColorSpacesFB(XrSession session,
                                                      uint32_t colorSpaceCapacityInput,
                                                      uint32_t* colorSpaceCountOutput,
                                                      XrColorSpaceFB* colorSpaces) const {
    return (reinterpret_cast<PFN_xrEnumerateColorSpacesFB>(pfnEnumerateColorSpacesFB))(
        session, colorSpaceCapacityInput, colorSpaceCountOutput, colorSpaces);
  }
#endif  // XR_FB_color_space
#ifdef XR_FB_color_space
  //! @brief Call xrSetColorSpaceFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetColorSpaceFB(XrSession session, const XrColorSpaceFB colorspace) {
    XrResult result = populate_("xrSetColorSpaceFB", pfnSetColorSpaceFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetColorSpaceFB>(pfnSetColorSpaceFB))(session, colorspace);
  }

  //! @brief Call xrSetColorSpaceFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetColorSpaceFB(XrSession session,
                                               const XrColorSpaceFB colorspace) const {
    return (reinterpret_cast<PFN_xrSetColorSpaceFB>(pfnSetColorSpaceFB))(session, colorspace);
  }
#endif  // XR_FB_color_space
#ifdef XR_FB_hand_tracking_mesh
  //! @brief Call xrGetHandMeshFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetHandMeshFB(XrHandTrackerEXT handTracker,
                                             XrHandTrackingMeshFB* mesh) {
    XrResult result = populate_("xrGetHandMeshFB", pfnGetHandMeshFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetHandMeshFB>(pfnGetHandMeshFB))(handTracker, mesh);
  }

  //! @brief Call xrGetHandMeshFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetHandMeshFB(XrHandTrackerEXT handTracker,
                                             XrHandTrackingMeshFB* mesh) const {
    return (reinterpret_cast<PFN_xrGetHandMeshFB>(pfnGetHandMeshFB))(handTracker, mesh);
  }
#endif  // XR_FB_hand_tracking_mesh
#ifdef XR_FB_foveation
  //! @brief Call xrCreateFoveationProfileFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateFoveationProfileFB(XrSession session, const XrFoveationProfileCreateInfoFB* createInfo,
                             XrFoveationProfileFB* profile) {
    XrResult result = populate_("xrCreateFoveationProfileFB", pfnCreateFoveationProfileFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateFoveationProfileFB>(pfnCreateFoveationProfileFB))(
        session, createInfo, profile);
  }

  //! @brief Call xrCreateFoveationProfileFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateFoveationProfileFB(XrSession session, const XrFoveationProfileCreateInfoFB* createInfo,
                             XrFoveationProfileFB* profile) const {
    return (reinterpret_cast<PFN_xrCreateFoveationProfileFB>(pfnCreateFoveationProfileFB))(
        session, createInfo, profile);
  }
#endif  // XR_FB_foveation
#ifdef XR_FB_foveation
  //! @brief Call xrDestroyFoveationProfileFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyFoveationProfileFB(XrFoveationProfileFB profile) {
    XrResult result = populate_("xrDestroyFoveationProfileFB", pfnDestroyFoveationProfileFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyFoveationProfileFB>(pfnDestroyFoveationProfileFB))(
        profile);
  }

  //! @brief Call xrDestroyFoveationProfileFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyFoveationProfileFB(XrFoveationProfileFB profile) const {
    return (reinterpret_cast<PFN_xrDestroyFoveationProfileFB>(pfnDestroyFoveationProfileFB))(
        profile);
  }
#endif  // XR_FB_foveation
#ifdef XR_FB_keyboard_tracking
  //! @brief Call xrQuerySystemTrackedKeyboardFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrQuerySystemTrackedKeyboardFB(XrSession session, const XrKeyboardTrackingQueryFB* queryInfo,
                                 XrKeyboardTrackingDescriptionFB* keyboard) {
    XrResult result = populate_("xrQuerySystemTrackedKeyboardFB", pfnQuerySystemTrackedKeyboardFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrQuerySystemTrackedKeyboardFB>(pfnQuerySystemTrackedKeyboardFB))(
        session, queryInfo, keyboard);
  }

  //! @brief Call xrQuerySystemTrackedKeyboardFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrQuerySystemTrackedKeyboardFB(XrSession session, const XrKeyboardTrackingQueryFB* queryInfo,
                                 XrKeyboardTrackingDescriptionFB* keyboard) const {
    return (reinterpret_cast<PFN_xrQuerySystemTrackedKeyboardFB>(pfnQuerySystemTrackedKeyboardFB))(
        session, queryInfo, keyboard);
  }
#endif  // XR_FB_keyboard_tracking
#ifdef XR_FB_keyboard_tracking
  //! @brief Call xrCreateKeyboardSpaceFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateKeyboardSpaceFB(XrSession session,
                                                     const XrKeyboardSpaceCreateInfoFB* createInfo,
                                                     XrSpace* keyboardSpace) {
    XrResult result = populate_("xrCreateKeyboardSpaceFB", pfnCreateKeyboardSpaceFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateKeyboardSpaceFB>(pfnCreateKeyboardSpaceFB))(
        session, createInfo, keyboardSpace);
  }

  //! @brief Call xrCreateKeyboardSpaceFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateKeyboardSpaceFB(XrSession session,
                                                     const XrKeyboardSpaceCreateInfoFB* createInfo,
                                                     XrSpace* keyboardSpace) const {
    return (reinterpret_cast<PFN_xrCreateKeyboardSpaceFB>(pfnCreateKeyboardSpaceFB))(
        session, createInfo, keyboardSpace);
  }
#endif  // XR_FB_keyboard_tracking
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrCreateTriangleMeshFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateTriangleMeshFB(XrSession session,
                                                    const XrTriangleMeshCreateInfoFB* createInfo,
                                                    XrTriangleMeshFB* outTriangleMesh) {
    XrResult result = populate_("xrCreateTriangleMeshFB", pfnCreateTriangleMeshFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateTriangleMeshFB>(pfnCreateTriangleMeshFB))(
        session, createInfo, outTriangleMesh);
  }

  //! @brief Call xrCreateTriangleMeshFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateTriangleMeshFB(XrSession session,
                                                    const XrTriangleMeshCreateInfoFB* createInfo,
                                                    XrTriangleMeshFB* outTriangleMesh) const {
    return (reinterpret_cast<PFN_xrCreateTriangleMeshFB>(pfnCreateTriangleMeshFB))(
        session, createInfo, outTriangleMesh);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrDestroyTriangleMeshFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyTriangleMeshFB(XrTriangleMeshFB mesh) {
    XrResult result = populate_("xrDestroyTriangleMeshFB", pfnDestroyTriangleMeshFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyTriangleMeshFB>(pfnDestroyTriangleMeshFB))(mesh);
  }

  //! @brief Call xrDestroyTriangleMeshFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyTriangleMeshFB(XrTriangleMeshFB mesh) const {
    return (reinterpret_cast<PFN_xrDestroyTriangleMeshFB>(pfnDestroyTriangleMeshFB))(mesh);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrTriangleMeshGetVertexBufferFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrTriangleMeshGetVertexBufferFB(XrTriangleMeshFB mesh,
                                                             XrVector3f** outVertexBuffer) {
    XrResult result =
        populate_("xrTriangleMeshGetVertexBufferFB", pfnTriangleMeshGetVertexBufferFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshGetVertexBufferFB>(
        pfnTriangleMeshGetVertexBufferFB))(mesh, outVertexBuffer);
  }

  //! @brief Call xrTriangleMeshGetVertexBufferFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrTriangleMeshGetVertexBufferFB(XrTriangleMeshFB mesh,
                                                             XrVector3f** outVertexBuffer) const {
    return (reinterpret_cast<PFN_xrTriangleMeshGetVertexBufferFB>(
        pfnTriangleMeshGetVertexBufferFB))(mesh, outVertexBuffer);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrTriangleMeshGetIndexBufferFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrTriangleMeshGetIndexBufferFB(XrTriangleMeshFB mesh,
                                                            uint32_t** outIndexBuffer) {
    XrResult result = populate_("xrTriangleMeshGetIndexBufferFB", pfnTriangleMeshGetIndexBufferFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshGetIndexBufferFB>(pfnTriangleMeshGetIndexBufferFB))(
        mesh, outIndexBuffer);
  }

  //! @brief Call xrTriangleMeshGetIndexBufferFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrTriangleMeshGetIndexBufferFB(XrTriangleMeshFB mesh,
                                                            uint32_t** outIndexBuffer) const {
    return (reinterpret_cast<PFN_xrTriangleMeshGetIndexBufferFB>(pfnTriangleMeshGetIndexBufferFB))(
        mesh, outIndexBuffer);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrTriangleMeshBeginUpdateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrTriangleMeshBeginUpdateFB(XrTriangleMeshFB mesh) {
    XrResult result = populate_("xrTriangleMeshBeginUpdateFB", pfnTriangleMeshBeginUpdateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshBeginUpdateFB>(pfnTriangleMeshBeginUpdateFB))(mesh);
  }

  //! @brief Call xrTriangleMeshBeginUpdateFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrTriangleMeshBeginUpdateFB(XrTriangleMeshFB mesh) const {
    return (reinterpret_cast<PFN_xrTriangleMeshBeginUpdateFB>(pfnTriangleMeshBeginUpdateFB))(mesh);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrTriangleMeshEndUpdateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrTriangleMeshEndUpdateFB(XrTriangleMeshFB mesh, uint32_t vertexCount,
                                                       uint32_t triangleCount) {
    XrResult result = populate_("xrTriangleMeshEndUpdateFB", pfnTriangleMeshEndUpdateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshEndUpdateFB>(pfnTriangleMeshEndUpdateFB))(
        mesh, vertexCount, triangleCount);
  }

  //! @brief Call xrTriangleMeshEndUpdateFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrTriangleMeshEndUpdateFB(XrTriangleMeshFB mesh, uint32_t vertexCount,
                                                       uint32_t triangleCount) const {
    return (reinterpret_cast<PFN_xrTriangleMeshEndUpdateFB>(pfnTriangleMeshEndUpdateFB))(
        mesh, vertexCount, triangleCount);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrTriangleMeshBeginVertexBufferUpdateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrTriangleMeshBeginVertexBufferUpdateFB(XrTriangleMeshFB mesh,
                                                                     uint32_t* outVertexCount) {
    XrResult result = populate_("xrTriangleMeshBeginVertexBufferUpdateFB",
                                pfnTriangleMeshBeginVertexBufferUpdateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshBeginVertexBufferUpdateFB>(
        pfnTriangleMeshBeginVertexBufferUpdateFB))(mesh, outVertexCount);
  }

  //! @brief Call xrTriangleMeshBeginVertexBufferUpdateFB (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult
  xrTriangleMeshBeginVertexBufferUpdateFB(XrTriangleMeshFB mesh, uint32_t* outVertexCount) const {
    return (reinterpret_cast<PFN_xrTriangleMeshBeginVertexBufferUpdateFB>(
        pfnTriangleMeshBeginVertexBufferUpdateFB))(mesh, outVertexCount);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrTriangleMeshEndVertexBufferUpdateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrTriangleMeshEndVertexBufferUpdateFB(XrTriangleMeshFB mesh) {
    XrResult result =
        populate_("xrTriangleMeshEndVertexBufferUpdateFB", pfnTriangleMeshEndVertexBufferUpdateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshEndVertexBufferUpdateFB>(
        pfnTriangleMeshEndVertexBufferUpdateFB))(mesh);
  }

  //! @brief Call xrTriangleMeshEndVertexBufferUpdateFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrTriangleMeshEndVertexBufferUpdateFB(XrTriangleMeshFB mesh) const {
    return (reinterpret_cast<PFN_xrTriangleMeshEndVertexBufferUpdateFB>(
        pfnTriangleMeshEndVertexBufferUpdateFB))(mesh);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_passthrough
  //! @brief Call xrCreatePassthroughFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreatePassthroughFB(XrSession session,
                                                   const XrPassthroughCreateInfoFB* createInfo,
                                                   XrPassthroughFB* outPassthrough) {
    XrResult result = populate_("xrCreatePassthroughFB", pfnCreatePassthroughFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreatePassthroughFB>(pfnCreatePassthroughFB))(
        session, createInfo, outPassthrough);
  }

  //! @brief Call xrCreatePassthroughFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreatePassthroughFB(XrSession session,
                                                   const XrPassthroughCreateInfoFB* createInfo,
                                                   XrPassthroughFB* outPassthrough) const {
    return (reinterpret_cast<PFN_xrCreatePassthroughFB>(pfnCreatePassthroughFB))(
        session, createInfo, outPassthrough);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrDestroyPassthroughFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyPassthroughFB(XrPassthroughFB passthrough) {
    XrResult result = populate_("xrDestroyPassthroughFB", pfnDestroyPassthroughFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyPassthroughFB>(pfnDestroyPassthroughFB))(passthrough);
  }

  //! @brief Call xrDestroyPassthroughFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyPassthroughFB(XrPassthroughFB passthrough) const {
    return (reinterpret_cast<PFN_xrDestroyPassthroughFB>(pfnDestroyPassthroughFB))(passthrough);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrPassthroughStartFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPassthroughStartFB(XrPassthroughFB passthrough) {
    XrResult result = populate_("xrPassthroughStartFB", pfnPassthroughStartFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPassthroughStartFB>(pfnPassthroughStartFB))(passthrough);
  }

  //! @brief Call xrPassthroughStartFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPassthroughStartFB(XrPassthroughFB passthrough) const {
    return (reinterpret_cast<PFN_xrPassthroughStartFB>(pfnPassthroughStartFB))(passthrough);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrPassthroughPauseFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPassthroughPauseFB(XrPassthroughFB passthrough) {
    XrResult result = populate_("xrPassthroughPauseFB", pfnPassthroughPauseFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPassthroughPauseFB>(pfnPassthroughPauseFB))(passthrough);
  }

  //! @brief Call xrPassthroughPauseFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPassthroughPauseFB(XrPassthroughFB passthrough) const {
    return (reinterpret_cast<PFN_xrPassthroughPauseFB>(pfnPassthroughPauseFB))(passthrough);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrCreatePassthroughLayerFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreatePassthroughLayerFB(XrSession session, const XrPassthroughLayerCreateInfoFB* createInfo,
                             XrPassthroughLayerFB* outLayer) {
    XrResult result = populate_("xrCreatePassthroughLayerFB", pfnCreatePassthroughLayerFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreatePassthroughLayerFB>(pfnCreatePassthroughLayerFB))(
        session, createInfo, outLayer);
  }

  //! @brief Call xrCreatePassthroughLayerFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreatePassthroughLayerFB(XrSession session, const XrPassthroughLayerCreateInfoFB* createInfo,
                             XrPassthroughLayerFB* outLayer) const {
    return (reinterpret_cast<PFN_xrCreatePassthroughLayerFB>(pfnCreatePassthroughLayerFB))(
        session, createInfo, outLayer);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrDestroyPassthroughLayerFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyPassthroughLayerFB(XrPassthroughLayerFB layer) {
    XrResult result = populate_("xrDestroyPassthroughLayerFB", pfnDestroyPassthroughLayerFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyPassthroughLayerFB>(pfnDestroyPassthroughLayerFB))(layer);
  }

  //! @brief Call xrDestroyPassthroughLayerFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyPassthroughLayerFB(XrPassthroughLayerFB layer) const {
    return (reinterpret_cast<PFN_xrDestroyPassthroughLayerFB>(pfnDestroyPassthroughLayerFB))(layer);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrPassthroughLayerPauseFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerPauseFB(XrPassthroughLayerFB layer) {
    XrResult result = populate_("xrPassthroughLayerPauseFB", pfnPassthroughLayerPauseFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerPauseFB>(pfnPassthroughLayerPauseFB))(layer);
  }

  //! @brief Call xrPassthroughLayerPauseFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerPauseFB(XrPassthroughLayerFB layer) const {
    return (reinterpret_cast<PFN_xrPassthroughLayerPauseFB>(pfnPassthroughLayerPauseFB))(layer);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrPassthroughLayerResumeFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerResumeFB(XrPassthroughLayerFB layer) {
    XrResult result = populate_("xrPassthroughLayerResumeFB", pfnPassthroughLayerResumeFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerResumeFB>(pfnPassthroughLayerResumeFB))(layer);
  }

  //! @brief Call xrPassthroughLayerResumeFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerResumeFB(XrPassthroughLayerFB layer) const {
    return (reinterpret_cast<PFN_xrPassthroughLayerResumeFB>(pfnPassthroughLayerResumeFB))(layer);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrPassthroughLayerSetStyleFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerSetStyleFB(XrPassthroughLayerFB layer,
                                                          const XrPassthroughStyleFB* style) {
    XrResult result = populate_("xrPassthroughLayerSetStyleFB", pfnPassthroughLayerSetStyleFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerSetStyleFB>(pfnPassthroughLayerSetStyleFB))(
        layer, style);
  }

  //! @brief Call xrPassthroughLayerSetStyleFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerSetStyleFB(XrPassthroughLayerFB layer,
                                                          const XrPassthroughStyleFB* style) const {
    return (reinterpret_cast<PFN_xrPassthroughLayerSetStyleFB>(pfnPassthroughLayerSetStyleFB))(
        layer, style);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrCreateGeometryInstanceFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateGeometryInstanceFB(XrSession session, const XrGeometryInstanceCreateInfoFB* createInfo,
                             XrGeometryInstanceFB* outGeometryInstance) {
    XrResult result = populate_("xrCreateGeometryInstanceFB", pfnCreateGeometryInstanceFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateGeometryInstanceFB>(pfnCreateGeometryInstanceFB))(
        session, createInfo, outGeometryInstance);
  }

  //! @brief Call xrCreateGeometryInstanceFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateGeometryInstanceFB(XrSession session, const XrGeometryInstanceCreateInfoFB* createInfo,
                             XrGeometryInstanceFB* outGeometryInstance) const {
    return (reinterpret_cast<PFN_xrCreateGeometryInstanceFB>(pfnCreateGeometryInstanceFB))(
        session, createInfo, outGeometryInstance);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrDestroyGeometryInstanceFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyGeometryInstanceFB(XrGeometryInstanceFB instance) {
    XrResult result = populate_("xrDestroyGeometryInstanceFB", pfnDestroyGeometryInstanceFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyGeometryInstanceFB>(pfnDestroyGeometryInstanceFB))(
        instance);
  }

  //! @brief Call xrDestroyGeometryInstanceFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyGeometryInstanceFB(XrGeometryInstanceFB instance) const {
    return (reinterpret_cast<PFN_xrDestroyGeometryInstanceFB>(pfnDestroyGeometryInstanceFB))(
        instance);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrGeometryInstanceSetTransformFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGeometryInstanceSetTransformFB(
      XrGeometryInstanceFB instance, const XrGeometryInstanceTransformFB* transformation) {
    XrResult result =
        populate_("xrGeometryInstanceSetTransformFB", pfnGeometryInstanceSetTransformFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGeometryInstanceSetTransformFB>(
        pfnGeometryInstanceSetTransformFB))(instance, transformation);
  }

  //! @brief Call xrGeometryInstanceSetTransformFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGeometryInstanceSetTransformFB(
      XrGeometryInstanceFB instance, const XrGeometryInstanceTransformFB* transformation) const {
    return (reinterpret_cast<PFN_xrGeometryInstanceSetTransformFB>(
        pfnGeometryInstanceSetTransformFB))(instance, transformation);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_render_model
  //! @brief Call xrEnumerateRenderModelPathsFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateRenderModelPathsFB(XrSession session,
                                                           uint32_t pathCapacityInput,
                                                           uint32_t* pathCountOutput,
                                                           XrRenderModelPathInfoFB* paths) {
    XrResult result = populate_("xrEnumerateRenderModelPathsFB", pfnEnumerateRenderModelPathsFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateRenderModelPathsFB>(pfnEnumerateRenderModelPathsFB))(
        session, pathCapacityInput, pathCountOutput, paths);
  }

  //! @brief Call xrEnumerateRenderModelPathsFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateRenderModelPathsFB(XrSession session,
                                                           uint32_t pathCapacityInput,
                                                           uint32_t* pathCountOutput,
                                                           XrRenderModelPathInfoFB* paths) const {
    return (reinterpret_cast<PFN_xrEnumerateRenderModelPathsFB>(pfnEnumerateRenderModelPathsFB))(
        session, pathCapacityInput, pathCountOutput, paths);
  }
#endif  // XR_FB_render_model
#ifdef XR_FB_render_model
  //! @brief Call xrGetRenderModelPropertiesFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetRenderModelPropertiesFB(XrSession session, XrPath path,
                                                          XrRenderModelPropertiesFB* properties) {
    XrResult result = populate_("xrGetRenderModelPropertiesFB", pfnGetRenderModelPropertiesFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelPropertiesFB>(pfnGetRenderModelPropertiesFB))(
        session, path, properties);
  }

  //! @brief Call xrGetRenderModelPropertiesFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetRenderModelPropertiesFB(
      XrSession session, XrPath path, XrRenderModelPropertiesFB* properties) const {
    return (reinterpret_cast<PFN_xrGetRenderModelPropertiesFB>(pfnGetRenderModelPropertiesFB))(
        session, path, properties);
  }
#endif  // XR_FB_render_model
#ifdef XR_FB_render_model
  //! @brief Call xrLoadRenderModelFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLoadRenderModelFB(XrSession session,
                                                 const XrRenderModelLoadInfoFB* info,
                                                 XrRenderModelBufferFB* buffer) {
    XrResult result = populate_("xrLoadRenderModelFB", pfnLoadRenderModelFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLoadRenderModelFB>(pfnLoadRenderModelFB))(session, info, buffer);
  }

  //! @brief Call xrLoadRenderModelFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLoadRenderModelFB(XrSession session,
                                                 const XrRenderModelLoadInfoFB* info,
                                                 XrRenderModelBufferFB* buffer) const {
    return (reinterpret_cast<PFN_xrLoadRenderModelFB>(pfnLoadRenderModelFB))(session, info, buffer);
  }
#endif  // XR_FB_render_model
#ifdef XR_VARJO_environment_depth_estimation
  //! @brief Call xrSetEnvironmentDepthEstimationVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetEnvironmentDepthEstimationVARJO(XrSession session,
                                                                  XrBool32 enabled) {
    XrResult result =
        populate_("xrSetEnvironmentDepthEstimationVARJO", pfnSetEnvironmentDepthEstimationVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetEnvironmentDepthEstimationVARJO>(
        pfnSetEnvironmentDepthEstimationVARJO))(session, enabled);
  }

  //! @brief Call xrSetEnvironmentDepthEstimationVARJO (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetEnvironmentDepthEstimationVARJO(XrSession session,
                                                                  XrBool32 enabled) const {
    return (reinterpret_cast<PFN_xrSetEnvironmentDepthEstimationVARJO>(
        pfnSetEnvironmentDepthEstimationVARJO))(session, enabled);
  }
#endif  // XR_VARJO_environment_depth_estimation
#ifdef XR_VARJO_marker_tracking
  //! @brief Call xrSetMarkerTrackingVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetMarkerTrackingVARJO(XrSession session, XrBool32 enabled) {
    XrResult result = populate_("xrSetMarkerTrackingVARJO", pfnSetMarkerTrackingVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetMarkerTrackingVARJO>(pfnSetMarkerTrackingVARJO))(session,
                                                                                       enabled);
  }

  //! @brief Call xrSetMarkerTrackingVARJO (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetMarkerTrackingVARJO(XrSession session, XrBool32 enabled) const {
    return (reinterpret_cast<PFN_xrSetMarkerTrackingVARJO>(pfnSetMarkerTrackingVARJO))(session,
                                                                                       enabled);
  }
#endif  // XR_VARJO_marker_tracking
#ifdef XR_VARJO_marker_tracking
  //! @brief Call xrSetMarkerTrackingTimeoutVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetMarkerTrackingTimeoutVARJO(XrSession session, uint64_t markerId,
                                                             XrDuration timeout) {
    XrResult result =
        populate_("xrSetMarkerTrackingTimeoutVARJO", pfnSetMarkerTrackingTimeoutVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetMarkerTrackingTimeoutVARJO>(
        pfnSetMarkerTrackingTimeoutVARJO))(session, markerId, timeout);
  }

  //! @brief Call xrSetMarkerTrackingTimeoutVARJO (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetMarkerTrackingTimeoutVARJO(XrSession session, uint64_t markerId,
                                                             XrDuration timeout) const {
    return (reinterpret_cast<PFN_xrSetMarkerTrackingTimeoutVARJO>(
        pfnSetMarkerTrackingTimeoutVARJO))(session, markerId, timeout);
  }
#endif  // XR_VARJO_marker_tracking
#ifdef XR_VARJO_marker_tracking
  //! @brief Call xrSetMarkerTrackingPredictionVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetMarkerTrackingPredictionVARJO(XrSession session,
                                                                uint64_t markerId,
                                                                XrBool32 enabled) {
    XrResult result =
        populate_("xrSetMarkerTrackingPredictionVARJO", pfnSetMarkerTrackingPredictionVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetMarkerTrackingPredictionVARJO>(
        pfnSetMarkerTrackingPredictionVARJO))(session, markerId, enabled);
  }

  //! @brief Call xrSetMarkerTrackingPredictionVARJO (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetMarkerTrackingPredictionVARJO(XrSession session,
                                                                uint64_t markerId,
                                                                XrBool32 enabled) const {
    return (reinterpret_cast<PFN_xrSetMarkerTrackingPredictionVARJO>(
        pfnSetMarkerTrackingPredictionVARJO))(session, markerId, enabled);
  }
#endif  // XR_VARJO_marker_tracking
#ifdef XR_VARJO_marker_tracking
  //! @brief Call xrGetMarkerSizeVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetMarkerSizeVARJO(XrSession session, uint64_t markerId,
                                                  XrExtent2Df* size) {
    XrResult result = populate_("xrGetMarkerSizeVARJO", pfnGetMarkerSizeVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetMarkerSizeVARJO>(pfnGetMarkerSizeVARJO))(session, markerId,
                                                                               size);
  }

  //! @brief Call xrGetMarkerSizeVARJO (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetMarkerSizeVARJO(XrSession session, uint64_t markerId,
                                                  XrExtent2Df* size) const {
    return (reinterpret_cast<PFN_xrGetMarkerSizeVARJO>(pfnGetMarkerSizeVARJO))(session, markerId,
                                                                               size);
  }
#endif  // XR_VARJO_marker_tracking
#ifdef XR_VARJO_marker_tracking
  //! @brief Call xrCreateMarkerSpaceVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateMarkerSpaceVARJO(
      XrSession session, const XrMarkerSpaceCreateInfoVARJO* createInfo, XrSpace* space) {
    XrResult result = populate_("xrCreateMarkerSpaceVARJO", pfnCreateMarkerSpaceVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateMarkerSpaceVARJO>(pfnCreateMarkerSpaceVARJO))(
        session, createInfo, space);
  }

  //! @brief Call xrCreateMarkerSpaceVARJO (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateMarkerSpaceVARJO(
      XrSession session, const XrMarkerSpaceCreateInfoVARJO* createInfo, XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateMarkerSpaceVARJO>(pfnCreateMarkerSpaceVARJO))(
        session, createInfo, space);
  }
#endif  // XR_VARJO_marker_tracking
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrCreateSpatialAnchorStoreConnectionMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorStoreConnectionMSFT(
      XrSession session, XrSpatialAnchorStoreConnectionMSFT* spatialAnchorStore) {
    XrResult result = populate_("xrCreateSpatialAnchorStoreConnectionMSFT",
                                pfnCreateSpatialAnchorStoreConnectionMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorStoreConnectionMSFT>(
        pfnCreateSpatialAnchorStoreConnectionMSFT))(session, spatialAnchorStore);
  }

  //! @brief Call xrCreateSpatialAnchorStoreConnectionMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorStoreConnectionMSFT(
      XrSession session, XrSpatialAnchorStoreConnectionMSFT* spatialAnchorStore) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorStoreConnectionMSFT>(
        pfnCreateSpatialAnchorStoreConnectionMSFT))(session, spatialAnchorStore);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrDestroySpatialAnchorStoreConnectionMSFT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult
  xrDestroySpatialAnchorStoreConnectionMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore) {
    XrResult result = populate_("xrDestroySpatialAnchorStoreConnectionMSFT",
                                pfnDestroySpatialAnchorStoreConnectionMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialAnchorStoreConnectionMSFT>(
        pfnDestroySpatialAnchorStoreConnectionMSFT))(spatialAnchorStore);
  }

  //! @brief Call xrDestroySpatialAnchorStoreConnectionMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySpatialAnchorStoreConnectionMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore) const {
    return (reinterpret_cast<PFN_xrDestroySpatialAnchorStoreConnectionMSFT>(
        pfnDestroySpatialAnchorStoreConnectionMSFT))(spatialAnchorStore);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrPersistSpatialAnchorMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPersistSpatialAnchorMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore,
      const XrSpatialAnchorPersistenceInfoMSFT* spatialAnchorPersistenceInfo) {
    XrResult result = populate_("xrPersistSpatialAnchorMSFT", pfnPersistSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPersistSpatialAnchorMSFT>(pfnPersistSpatialAnchorMSFT))(
        spatialAnchorStore, spatialAnchorPersistenceInfo);
  }

  //! @brief Call xrPersistSpatialAnchorMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPersistSpatialAnchorMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore,
      const XrSpatialAnchorPersistenceInfoMSFT* spatialAnchorPersistenceInfo) const {
    return (reinterpret_cast<PFN_xrPersistSpatialAnchorMSFT>(pfnPersistSpatialAnchorMSFT))(
        spatialAnchorStore, spatialAnchorPersistenceInfo);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrEnumeratePersistedSpatialAnchorNamesMSFT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrEnumeratePersistedSpatialAnchorNamesMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore,
      uint32_t spatialAnchorNamesCapacityInput, uint32_t* spatialAnchorNamesCountOutput,
      XrSpatialAnchorPersistenceNameMSFT* persistedAnchorNames) {
    XrResult result = populate_("xrEnumeratePersistedSpatialAnchorNamesMSFT",
                                pfnEnumeratePersistedSpatialAnchorNamesMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT>(
        pfnEnumeratePersistedSpatialAnchorNamesMSFT))(
        spatialAnchorStore, spatialAnchorNamesCapacityInput, spatialAnchorNamesCountOutput,
        persistedAnchorNames);
  }

  //! @brief Call xrEnumeratePersistedSpatialAnchorNamesMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumeratePersistedSpatialAnchorNamesMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore,
      uint32_t spatialAnchorNamesCapacityInput, uint32_t* spatialAnchorNamesCountOutput,
      XrSpatialAnchorPersistenceNameMSFT* persistedAnchorNames) const {
    return (reinterpret_cast<PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT>(
        pfnEnumeratePersistedSpatialAnchorNamesMSFT))(
        spatialAnchorStore, spatialAnchorNamesCapacityInput, spatialAnchorNamesCountOutput,
        persistedAnchorNames);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrCreateSpatialAnchorFromPersistedNameMSFT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorFromPersistedNameMSFT(
      XrSession session,
      const XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT* spatialAnchorCreateInfo,
      XrSpatialAnchorMSFT* spatialAnchor) {
    XrResult result = populate_("xrCreateSpatialAnchorFromPersistedNameMSFT",
                                pfnCreateSpatialAnchorFromPersistedNameMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPersistedNameMSFT>(
        pfnCreateSpatialAnchorFromPersistedNameMSFT))(session, spatialAnchorCreateInfo,
                                                      spatialAnchor);
  }

  //! @brief Call xrCreateSpatialAnchorFromPersistedNameMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorFromPersistedNameMSFT(
      XrSession session,
      const XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT* spatialAnchorCreateInfo,
      XrSpatialAnchorMSFT* spatialAnchor) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPersistedNameMSFT>(
        pfnCreateSpatialAnchorFromPersistedNameMSFT))(session, spatialAnchorCreateInfo,
                                                      spatialAnchor);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrUnpersistSpatialAnchorMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrUnpersistSpatialAnchorMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore,
      const XrSpatialAnchorPersistenceNameMSFT* spatialAnchorPersistenceName) {
    XrResult result = populate_("xrUnpersistSpatialAnchorMSFT", pfnUnpersistSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorMSFT>(pfnUnpersistSpatialAnchorMSFT))(
        spatialAnchorStore, spatialAnchorPersistenceName);
  }

  //! @brief Call xrUnpersistSpatialAnchorMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrUnpersistSpatialAnchorMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore,
      const XrSpatialAnchorPersistenceNameMSFT* spatialAnchorPersistenceName) const {
    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorMSFT>(pfnUnpersistSpatialAnchorMSFT))(
        spatialAnchorStore, spatialAnchorPersistenceName);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrClearSpatialAnchorStoreMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrClearSpatialAnchorStoreMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore) {
    XrResult result = populate_("xrClearSpatialAnchorStoreMSFT", pfnClearSpatialAnchorStoreMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrClearSpatialAnchorStoreMSFT>(pfnClearSpatialAnchorStoreMSFT))(
        spatialAnchorStore);
  }

  //! @brief Call xrClearSpatialAnchorStoreMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrClearSpatialAnchorStoreMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore) const {
    return (reinterpret_cast<PFN_xrClearSpatialAnchorStoreMSFT>(pfnClearSpatialAnchorStoreMSFT))(
        spatialAnchorStore);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_OCULUS_audio_device_guid
#if defined(XR_USE_PLATFORM_WIN32)
  //! @brief Call xrGetAudioOutputDeviceGuidOculus, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetAudioOutputDeviceGuidOculus(
      XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS]) {
    XrResult result =
        populate_("xrGetAudioOutputDeviceGuidOculus", pfnGetAudioOutputDeviceGuidOculus);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetAudioOutputDeviceGuidOculus>(
        pfnGetAudioOutputDeviceGuidOculus))(instance, buffer);
  }

  //! @brief Call xrGetAudioOutputDeviceGuidOculus (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetAudioOutputDeviceGuidOculus(
      XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS]) const {
    return (reinterpret_cast<PFN_xrGetAudioOutputDeviceGuidOculus>(
        pfnGetAudioOutputDeviceGuidOculus))(instance, buffer);
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_OCULUS_audio_device_guid
#ifdef XR_OCULUS_audio_device_guid
#if defined(XR_USE_PLATFORM_WIN32)
  //! @brief Call xrGetAudioInputDeviceGuidOculus, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetAudioInputDeviceGuidOculus(
      XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS]) {
    XrResult result =
        populate_("xrGetAudioInputDeviceGuidOculus", pfnGetAudioInputDeviceGuidOculus);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetAudioInputDeviceGuidOculus>(
        pfnGetAudioInputDeviceGuidOculus))(instance, buffer);
  }

  //! @brief Call xrGetAudioInputDeviceGuidOculus (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetAudioInputDeviceGuidOculus(
      XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS]) const {
    return (reinterpret_cast<PFN_xrGetAudioInputDeviceGuidOculus>(
        pfnGetAudioInputDeviceGuidOculus))(instance, buffer);
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_OCULUS_audio_device_guid
#ifdef XR_ALMALENCE_digital_lens_control
  //! @brief Call xrSetDigitalLensControlALMALENCE, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetDigitalLensControlALMALENCE(
      XrSession session, const XrDigitalLensControlALMALENCE* digitalLensControl) {
    XrResult result =
        populate_("xrSetDigitalLensControlALMALENCE", pfnSetDigitalLensControlALMALENCE);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetDigitalLensControlALMALENCE>(
        pfnSetDigitalLensControlALMALENCE))(session, digitalLensControl);
  }

  //! @brief Call xrSetDigitalLensControlALMALENCE (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetDigitalLensControlALMALENCE(
      XrSession session, const XrDigitalLensControlALMALENCE* digitalLensControl) const {
    return (reinterpret_cast<PFN_xrSetDigitalLensControlALMALENCE>(
        pfnSetDigitalLensControlALMALENCE))(session, digitalLensControl);
  }
#endif  // XR_ALMALENCE_digital_lens_control
#ifdef XR_FB_passthrough_keyboard_hands
  //! @brief Call xrPassthroughLayerSetKeyboardHandsIntensityFB, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerSetKeyboardHandsIntensityFB(
      XrPassthroughLayerFB layer, const XrPassthroughKeyboardHandsIntensityFB* intensity) {
    XrResult result = populate_("xrPassthroughLayerSetKeyboardHandsIntensityFB",
                                pfnPassthroughLayerSetKeyboardHandsIntensityFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB>(
        pfnPassthroughLayerSetKeyboardHandsIntensityFB))(layer, intensity);
  }

  //! @brief Call xrPassthroughLayerSetKeyboardHandsIntensityFB (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerSetKeyboardHandsIntensityFB(
      XrPassthroughLayerFB layer, const XrPassthroughKeyboardHandsIntensityFB* intensity) const {
    return (reinterpret_cast<PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB>(
        pfnPassthroughLayerSetKeyboardHandsIntensityFB))(layer, intensity);
  }
#endif  // XR_FB_passthrough_keyboard_hands
  //! @}

  /*!
   * @name Function pointer accessors
   * @brief These populate the function pointer (if required and non-const), then cast it and return
   * it.
   *
   * Sometimes you just want the function pointer, instead of wanting to call the function pointer.
   * These methods let you get that.
   *
   * @{
   */

  /*!
   * @brief Return the function pointer for xrGetInstanceProcAddr, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetInstanceProcAddr getInstanceProcAddr_xrGetInstanceProcAddr() {
    XrResult result = populate_("xrGetInstanceProcAddr", pfnGetInstanceProcAddr);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetInstanceProcAddr>(pfnGetInstanceProcAddr));
  }
  /*!
   * @brief Return the function pointer for xrGetInstanceProcAddr (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetInstanceProcAddr getInstanceProcAddr_xrGetInstanceProcAddr() const {
    return (reinterpret_cast<PFN_xrGetInstanceProcAddr>(pfnGetInstanceProcAddr));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateApiLayerProperties, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateApiLayerProperties
  getInstanceProcAddr_xrEnumerateApiLayerProperties() {
    XrResult result = populate_("xrEnumerateApiLayerProperties", pfnEnumerateApiLayerProperties);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateApiLayerProperties>(pfnEnumerateApiLayerProperties));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateApiLayerProperties (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateApiLayerProperties
  getInstanceProcAddr_xrEnumerateApiLayerProperties() const {
    return (reinterpret_cast<PFN_xrEnumerateApiLayerProperties>(pfnEnumerateApiLayerProperties));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateInstanceExtensionProperties, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateInstanceExtensionProperties
  getInstanceProcAddr_xrEnumerateInstanceExtensionProperties() {
    XrResult result = populate_("xrEnumerateInstanceExtensionProperties",
                                pfnEnumerateInstanceExtensionProperties);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateInstanceExtensionProperties>(
        pfnEnumerateInstanceExtensionProperties));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateInstanceExtensionProperties (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateInstanceExtensionProperties
  getInstanceProcAddr_xrEnumerateInstanceExtensionProperties() const {
    return (reinterpret_cast<PFN_xrEnumerateInstanceExtensionProperties>(
        pfnEnumerateInstanceExtensionProperties));
  }

  /*!
   * @brief Return the function pointer for xrCreateInstance, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateInstance getInstanceProcAddr_xrCreateInstance() {
    XrResult result = populate_("xrCreateInstance", pfnCreateInstance);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateInstance>(pfnCreateInstance));
  }
  /*!
   * @brief Return the function pointer for xrCreateInstance (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateInstance getInstanceProcAddr_xrCreateInstance() const {
    return (reinterpret_cast<PFN_xrCreateInstance>(pfnCreateInstance));
  }

  /*!
   * @brief Return the function pointer for xrDestroyInstance, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyInstance getInstanceProcAddr_xrDestroyInstance() {
    XrResult result = populate_("xrDestroyInstance", pfnDestroyInstance);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyInstance>(pfnDestroyInstance));
  }
  /*!
   * @brief Return the function pointer for xrDestroyInstance (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyInstance getInstanceProcAddr_xrDestroyInstance() const {
    return (reinterpret_cast<PFN_xrDestroyInstance>(pfnDestroyInstance));
  }

  /*!
   * @brief Return the function pointer for xrGetInstanceProperties, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetInstanceProperties getInstanceProcAddr_xrGetInstanceProperties() {
    XrResult result = populate_("xrGetInstanceProperties", pfnGetInstanceProperties);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetInstanceProperties>(pfnGetInstanceProperties));
  }
  /*!
   * @brief Return the function pointer for xrGetInstanceProperties (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetInstanceProperties
  getInstanceProcAddr_xrGetInstanceProperties() const {
    return (reinterpret_cast<PFN_xrGetInstanceProperties>(pfnGetInstanceProperties));
  }

  /*!
   * @brief Return the function pointer for xrPollEvent, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPollEvent getInstanceProcAddr_xrPollEvent() {
    XrResult result = populate_("xrPollEvent", pfnPollEvent);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPollEvent>(pfnPollEvent));
  }
  /*!
   * @brief Return the function pointer for xrPollEvent (const overload - does not populate function
   * pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPollEvent getInstanceProcAddr_xrPollEvent() const {
    return (reinterpret_cast<PFN_xrPollEvent>(pfnPollEvent));
  }

  /*!
   * @brief Return the function pointer for xrResultToString, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrResultToString getInstanceProcAddr_xrResultToString() {
    XrResult result = populate_("xrResultToString", pfnResultToString);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrResultToString>(pfnResultToString));
  }
  /*!
   * @brief Return the function pointer for xrResultToString (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrResultToString getInstanceProcAddr_xrResultToString() const {
    return (reinterpret_cast<PFN_xrResultToString>(pfnResultToString));
  }

  /*!
   * @brief Return the function pointer for xrStructureTypeToString, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrStructureTypeToString getInstanceProcAddr_xrStructureTypeToString() {
    XrResult result = populate_("xrStructureTypeToString", pfnStructureTypeToString);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStructureTypeToString>(pfnStructureTypeToString));
  }
  /*!
   * @brief Return the function pointer for xrStructureTypeToString (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStructureTypeToString
  getInstanceProcAddr_xrStructureTypeToString() const {
    return (reinterpret_cast<PFN_xrStructureTypeToString>(pfnStructureTypeToString));
  }

  /*!
   * @brief Return the function pointer for xrGetSystem, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSystem getInstanceProcAddr_xrGetSystem() {
    XrResult result = populate_("xrGetSystem", pfnGetSystem);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSystem>(pfnGetSystem));
  }
  /*!
   * @brief Return the function pointer for xrGetSystem (const overload - does not populate function
   * pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSystem getInstanceProcAddr_xrGetSystem() const {
    return (reinterpret_cast<PFN_xrGetSystem>(pfnGetSystem));
  }

  /*!
   * @brief Return the function pointer for xrGetSystemProperties, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSystemProperties getInstanceProcAddr_xrGetSystemProperties() {
    XrResult result = populate_("xrGetSystemProperties", pfnGetSystemProperties);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSystemProperties>(pfnGetSystemProperties));
  }
  /*!
   * @brief Return the function pointer for xrGetSystemProperties (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSystemProperties getInstanceProcAddr_xrGetSystemProperties() const {
    return (reinterpret_cast<PFN_xrGetSystemProperties>(pfnGetSystemProperties));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateEnvironmentBlendModes, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateEnvironmentBlendModes
  getInstanceProcAddr_xrEnumerateEnvironmentBlendModes() {
    XrResult result =
        populate_("xrEnumerateEnvironmentBlendModes", pfnEnumerateEnvironmentBlendModes);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateEnvironmentBlendModes>(pfnEnumerateEnvironmentBlendModes));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateEnvironmentBlendModes (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateEnvironmentBlendModes
  getInstanceProcAddr_xrEnumerateEnvironmentBlendModes() const {
    return (
        reinterpret_cast<PFN_xrEnumerateEnvironmentBlendModes>(pfnEnumerateEnvironmentBlendModes));
  }

  /*!
   * @brief Return the function pointer for xrCreateSession, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSession getInstanceProcAddr_xrCreateSession() {
    XrResult result = populate_("xrCreateSession", pfnCreateSession);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSession>(pfnCreateSession));
  }
  /*!
   * @brief Return the function pointer for xrCreateSession (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSession getInstanceProcAddr_xrCreateSession() const {
    return (reinterpret_cast<PFN_xrCreateSession>(pfnCreateSession));
  }

  /*!
   * @brief Return the function pointer for xrDestroySession, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySession getInstanceProcAddr_xrDestroySession() {
    XrResult result = populate_("xrDestroySession", pfnDestroySession);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySession>(pfnDestroySession));
  }
  /*!
   * @brief Return the function pointer for xrDestroySession (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySession getInstanceProcAddr_xrDestroySession() const {
    return (reinterpret_cast<PFN_xrDestroySession>(pfnDestroySession));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateReferenceSpaces, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateReferenceSpaces
  getInstanceProcAddr_xrEnumerateReferenceSpaces() {
    XrResult result = populate_("xrEnumerateReferenceSpaces", pfnEnumerateReferenceSpaces);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateReferenceSpaces>(pfnEnumerateReferenceSpaces));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateReferenceSpaces (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateReferenceSpaces
  getInstanceProcAddr_xrEnumerateReferenceSpaces() const {
    return (reinterpret_cast<PFN_xrEnumerateReferenceSpaces>(pfnEnumerateReferenceSpaces));
  }

  /*!
   * @brief Return the function pointer for xrCreateReferenceSpace, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateReferenceSpace getInstanceProcAddr_xrCreateReferenceSpace() {
    XrResult result = populate_("xrCreateReferenceSpace", pfnCreateReferenceSpace);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateReferenceSpace>(pfnCreateReferenceSpace));
  }
  /*!
   * @brief Return the function pointer for xrCreateReferenceSpace (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateReferenceSpace getInstanceProcAddr_xrCreateReferenceSpace() const {
    return (reinterpret_cast<PFN_xrCreateReferenceSpace>(pfnCreateReferenceSpace));
  }

  /*!
   * @brief Return the function pointer for xrGetReferenceSpaceBoundsRect, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetReferenceSpaceBoundsRect
  getInstanceProcAddr_xrGetReferenceSpaceBoundsRect() {
    XrResult result = populate_("xrGetReferenceSpaceBoundsRect", pfnGetReferenceSpaceBoundsRect);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetReferenceSpaceBoundsRect>(pfnGetReferenceSpaceBoundsRect));
  }
  /*!
   * @brief Return the function pointer for xrGetReferenceSpaceBoundsRect (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetReferenceSpaceBoundsRect
  getInstanceProcAddr_xrGetReferenceSpaceBoundsRect() const {
    return (reinterpret_cast<PFN_xrGetReferenceSpaceBoundsRect>(pfnGetReferenceSpaceBoundsRect));
  }

  /*!
   * @brief Return the function pointer for xrCreateActionSpace, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateActionSpace getInstanceProcAddr_xrCreateActionSpace() {
    XrResult result = populate_("xrCreateActionSpace", pfnCreateActionSpace);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateActionSpace>(pfnCreateActionSpace));
  }
  /*!
   * @brief Return the function pointer for xrCreateActionSpace (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateActionSpace getInstanceProcAddr_xrCreateActionSpace() const {
    return (reinterpret_cast<PFN_xrCreateActionSpace>(pfnCreateActionSpace));
  }

  /*!
   * @brief Return the function pointer for xrLocateSpace, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateSpace getInstanceProcAddr_xrLocateSpace() {
    XrResult result = populate_("xrLocateSpace", pfnLocateSpace);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateSpace>(pfnLocateSpace));
  }
  /*!
   * @brief Return the function pointer for xrLocateSpace (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateSpace getInstanceProcAddr_xrLocateSpace() const {
    return (reinterpret_cast<PFN_xrLocateSpace>(pfnLocateSpace));
  }

  /*!
   * @brief Return the function pointer for xrDestroySpace, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpace getInstanceProcAddr_xrDestroySpace() {
    XrResult result = populate_("xrDestroySpace", pfnDestroySpace);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySpace>(pfnDestroySpace));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpace (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpace getInstanceProcAddr_xrDestroySpace() const {
    return (reinterpret_cast<PFN_xrDestroySpace>(pfnDestroySpace));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateViewConfigurations, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateViewConfigurations
  getInstanceProcAddr_xrEnumerateViewConfigurations() {
    XrResult result = populate_("xrEnumerateViewConfigurations", pfnEnumerateViewConfigurations);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateViewConfigurations>(pfnEnumerateViewConfigurations));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateViewConfigurations (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateViewConfigurations
  getInstanceProcAddr_xrEnumerateViewConfigurations() const {
    return (reinterpret_cast<PFN_xrEnumerateViewConfigurations>(pfnEnumerateViewConfigurations));
  }

  /*!
   * @brief Return the function pointer for xrGetViewConfigurationProperties, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetViewConfigurationProperties
  getInstanceProcAddr_xrGetViewConfigurationProperties() {
    XrResult result =
        populate_("xrGetViewConfigurationProperties", pfnGetViewConfigurationProperties);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrGetViewConfigurationProperties>(pfnGetViewConfigurationProperties));
  }
  /*!
   * @brief Return the function pointer for xrGetViewConfigurationProperties (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetViewConfigurationProperties
  getInstanceProcAddr_xrGetViewConfigurationProperties() const {
    return (
        reinterpret_cast<PFN_xrGetViewConfigurationProperties>(pfnGetViewConfigurationProperties));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateViewConfigurationViews, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateViewConfigurationViews
  getInstanceProcAddr_xrEnumerateViewConfigurationViews() {
    XrResult result =
        populate_("xrEnumerateViewConfigurationViews", pfnEnumerateViewConfigurationViews);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateViewConfigurationViews>(
        pfnEnumerateViewConfigurationViews));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateViewConfigurationViews (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateViewConfigurationViews
  getInstanceProcAddr_xrEnumerateViewConfigurationViews() const {
    return (reinterpret_cast<PFN_xrEnumerateViewConfigurationViews>(
        pfnEnumerateViewConfigurationViews));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateSwapchainFormats, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSwapchainFormats
  getInstanceProcAddr_xrEnumerateSwapchainFormats() {
    XrResult result = populate_("xrEnumerateSwapchainFormats", pfnEnumerateSwapchainFormats);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateSwapchainFormats>(pfnEnumerateSwapchainFormats));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateSwapchainFormats (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSwapchainFormats
  getInstanceProcAddr_xrEnumerateSwapchainFormats() const {
    return (reinterpret_cast<PFN_xrEnumerateSwapchainFormats>(pfnEnumerateSwapchainFormats));
  }

  /*!
   * @brief Return the function pointer for xrCreateSwapchain, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSwapchain getInstanceProcAddr_xrCreateSwapchain() {
    XrResult result = populate_("xrCreateSwapchain", pfnCreateSwapchain);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSwapchain>(pfnCreateSwapchain));
  }
  /*!
   * @brief Return the function pointer for xrCreateSwapchain (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSwapchain getInstanceProcAddr_xrCreateSwapchain() const {
    return (reinterpret_cast<PFN_xrCreateSwapchain>(pfnCreateSwapchain));
  }

  /*!
   * @brief Return the function pointer for xrDestroySwapchain, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySwapchain getInstanceProcAddr_xrDestroySwapchain() {
    XrResult result = populate_("xrDestroySwapchain", pfnDestroySwapchain);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySwapchain>(pfnDestroySwapchain));
  }
  /*!
   * @brief Return the function pointer for xrDestroySwapchain (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySwapchain getInstanceProcAddr_xrDestroySwapchain() const {
    return (reinterpret_cast<PFN_xrDestroySwapchain>(pfnDestroySwapchain));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateSwapchainImages, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSwapchainImages
  getInstanceProcAddr_xrEnumerateSwapchainImages() {
    XrResult result = populate_("xrEnumerateSwapchainImages", pfnEnumerateSwapchainImages);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateSwapchainImages>(pfnEnumerateSwapchainImages));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateSwapchainImages (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSwapchainImages
  getInstanceProcAddr_xrEnumerateSwapchainImages() const {
    return (reinterpret_cast<PFN_xrEnumerateSwapchainImages>(pfnEnumerateSwapchainImages));
  }

  /*!
   * @brief Return the function pointer for xrAcquireSwapchainImage, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrAcquireSwapchainImage getInstanceProcAddr_xrAcquireSwapchainImage() {
    XrResult result = populate_("xrAcquireSwapchainImage", pfnAcquireSwapchainImage);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrAcquireSwapchainImage>(pfnAcquireSwapchainImage));
  }
  /*!
   * @brief Return the function pointer for xrAcquireSwapchainImage (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrAcquireSwapchainImage
  getInstanceProcAddr_xrAcquireSwapchainImage() const {
    return (reinterpret_cast<PFN_xrAcquireSwapchainImage>(pfnAcquireSwapchainImage));
  }

  /*!
   * @brief Return the function pointer for xrWaitSwapchainImage, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrWaitSwapchainImage getInstanceProcAddr_xrWaitSwapchainImage() {
    XrResult result = populate_("xrWaitSwapchainImage", pfnWaitSwapchainImage);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrWaitSwapchainImage>(pfnWaitSwapchainImage));
  }
  /*!
   * @brief Return the function pointer for xrWaitSwapchainImage (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrWaitSwapchainImage getInstanceProcAddr_xrWaitSwapchainImage() const {
    return (reinterpret_cast<PFN_xrWaitSwapchainImage>(pfnWaitSwapchainImage));
  }

  /*!
   * @brief Return the function pointer for xrReleaseSwapchainImage, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrReleaseSwapchainImage getInstanceProcAddr_xrReleaseSwapchainImage() {
    XrResult result = populate_("xrReleaseSwapchainImage", pfnReleaseSwapchainImage);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrReleaseSwapchainImage>(pfnReleaseSwapchainImage));
  }
  /*!
   * @brief Return the function pointer for xrReleaseSwapchainImage (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrReleaseSwapchainImage
  getInstanceProcAddr_xrReleaseSwapchainImage() const {
    return (reinterpret_cast<PFN_xrReleaseSwapchainImage>(pfnReleaseSwapchainImage));
  }

  /*!
   * @brief Return the function pointer for xrBeginSession, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrBeginSession getInstanceProcAddr_xrBeginSession() {
    XrResult result = populate_("xrBeginSession", pfnBeginSession);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrBeginSession>(pfnBeginSession));
  }
  /*!
   * @brief Return the function pointer for xrBeginSession (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrBeginSession getInstanceProcAddr_xrBeginSession() const {
    return (reinterpret_cast<PFN_xrBeginSession>(pfnBeginSession));
  }

  /*!
   * @brief Return the function pointer for xrEndSession, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEndSession getInstanceProcAddr_xrEndSession() {
    XrResult result = populate_("xrEndSession", pfnEndSession);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEndSession>(pfnEndSession));
  }
  /*!
   * @brief Return the function pointer for xrEndSession (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEndSession getInstanceProcAddr_xrEndSession() const {
    return (reinterpret_cast<PFN_xrEndSession>(pfnEndSession));
  }

  /*!
   * @brief Return the function pointer for xrRequestExitSession, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrRequestExitSession getInstanceProcAddr_xrRequestExitSession() {
    XrResult result = populate_("xrRequestExitSession", pfnRequestExitSession);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrRequestExitSession>(pfnRequestExitSession));
  }
  /*!
   * @brief Return the function pointer for xrRequestExitSession (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrRequestExitSession getInstanceProcAddr_xrRequestExitSession() const {
    return (reinterpret_cast<PFN_xrRequestExitSession>(pfnRequestExitSession));
  }

  /*!
   * @brief Return the function pointer for xrWaitFrame, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrWaitFrame getInstanceProcAddr_xrWaitFrame() {
    XrResult result = populate_("xrWaitFrame", pfnWaitFrame);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrWaitFrame>(pfnWaitFrame));
  }
  /*!
   * @brief Return the function pointer for xrWaitFrame (const overload - does not populate function
   * pointer)
   */
  OPENXR_HPP_INLINE PFN_xrWaitFrame getInstanceProcAddr_xrWaitFrame() const {
    return (reinterpret_cast<PFN_xrWaitFrame>(pfnWaitFrame));
  }

  /*!
   * @brief Return the function pointer for xrBeginFrame, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrBeginFrame getInstanceProcAddr_xrBeginFrame() {
    XrResult result = populate_("xrBeginFrame", pfnBeginFrame);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrBeginFrame>(pfnBeginFrame));
  }
  /*!
   * @brief Return the function pointer for xrBeginFrame (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrBeginFrame getInstanceProcAddr_xrBeginFrame() const {
    return (reinterpret_cast<PFN_xrBeginFrame>(pfnBeginFrame));
  }

  /*!
   * @brief Return the function pointer for xrEndFrame, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEndFrame getInstanceProcAddr_xrEndFrame() {
    XrResult result = populate_("xrEndFrame", pfnEndFrame);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEndFrame>(pfnEndFrame));
  }
  /*!
   * @brief Return the function pointer for xrEndFrame (const overload - does not populate function
   * pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEndFrame getInstanceProcAddr_xrEndFrame() const {
    return (reinterpret_cast<PFN_xrEndFrame>(pfnEndFrame));
  }

  /*!
   * @brief Return the function pointer for xrLocateViews, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateViews getInstanceProcAddr_xrLocateViews() {
    XrResult result = populate_("xrLocateViews", pfnLocateViews);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateViews>(pfnLocateViews));
  }
  /*!
   * @brief Return the function pointer for xrLocateViews (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateViews getInstanceProcAddr_xrLocateViews() const {
    return (reinterpret_cast<PFN_xrLocateViews>(pfnLocateViews));
  }

  /*!
   * @brief Return the function pointer for xrStringToPath, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrStringToPath getInstanceProcAddr_xrStringToPath() {
    XrResult result = populate_("xrStringToPath", pfnStringToPath);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStringToPath>(pfnStringToPath));
  }
  /*!
   * @brief Return the function pointer for xrStringToPath (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStringToPath getInstanceProcAddr_xrStringToPath() const {
    return (reinterpret_cast<PFN_xrStringToPath>(pfnStringToPath));
  }

  /*!
   * @brief Return the function pointer for xrPathToString, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPathToString getInstanceProcAddr_xrPathToString() {
    XrResult result = populate_("xrPathToString", pfnPathToString);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPathToString>(pfnPathToString));
  }
  /*!
   * @brief Return the function pointer for xrPathToString (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPathToString getInstanceProcAddr_xrPathToString() const {
    return (reinterpret_cast<PFN_xrPathToString>(pfnPathToString));
  }

  /*!
   * @brief Return the function pointer for xrCreateActionSet, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateActionSet getInstanceProcAddr_xrCreateActionSet() {
    XrResult result = populate_("xrCreateActionSet", pfnCreateActionSet);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateActionSet>(pfnCreateActionSet));
  }
  /*!
   * @brief Return the function pointer for xrCreateActionSet (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateActionSet getInstanceProcAddr_xrCreateActionSet() const {
    return (reinterpret_cast<PFN_xrCreateActionSet>(pfnCreateActionSet));
  }

  /*!
   * @brief Return the function pointer for xrDestroyActionSet, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyActionSet getInstanceProcAddr_xrDestroyActionSet() {
    XrResult result = populate_("xrDestroyActionSet", pfnDestroyActionSet);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyActionSet>(pfnDestroyActionSet));
  }
  /*!
   * @brief Return the function pointer for xrDestroyActionSet (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyActionSet getInstanceProcAddr_xrDestroyActionSet() const {
    return (reinterpret_cast<PFN_xrDestroyActionSet>(pfnDestroyActionSet));
  }

  /*!
   * @brief Return the function pointer for xrCreateAction, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateAction getInstanceProcAddr_xrCreateAction() {
    XrResult result = populate_("xrCreateAction", pfnCreateAction);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateAction>(pfnCreateAction));
  }
  /*!
   * @brief Return the function pointer for xrCreateAction (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateAction getInstanceProcAddr_xrCreateAction() const {
    return (reinterpret_cast<PFN_xrCreateAction>(pfnCreateAction));
  }

  /*!
   * @brief Return the function pointer for xrDestroyAction, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyAction getInstanceProcAddr_xrDestroyAction() {
    XrResult result = populate_("xrDestroyAction", pfnDestroyAction);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyAction>(pfnDestroyAction));
  }
  /*!
   * @brief Return the function pointer for xrDestroyAction (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyAction getInstanceProcAddr_xrDestroyAction() const {
    return (reinterpret_cast<PFN_xrDestroyAction>(pfnDestroyAction));
  }

  /*!
   * @brief Return the function pointer for xrSuggestInteractionProfileBindings, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSuggestInteractionProfileBindings
  getInstanceProcAddr_xrSuggestInteractionProfileBindings() {
    XrResult result =
        populate_("xrSuggestInteractionProfileBindings", pfnSuggestInteractionProfileBindings);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSuggestInteractionProfileBindings>(
        pfnSuggestInteractionProfileBindings));
  }
  /*!
   * @brief Return the function pointer for xrSuggestInteractionProfileBindings (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSuggestInteractionProfileBindings
  getInstanceProcAddr_xrSuggestInteractionProfileBindings() const {
    return (reinterpret_cast<PFN_xrSuggestInteractionProfileBindings>(
        pfnSuggestInteractionProfileBindings));
  }

  /*!
   * @brief Return the function pointer for xrAttachSessionActionSets, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrAttachSessionActionSets getInstanceProcAddr_xrAttachSessionActionSets() {
    XrResult result = populate_("xrAttachSessionActionSets", pfnAttachSessionActionSets);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrAttachSessionActionSets>(pfnAttachSessionActionSets));
  }
  /*!
   * @brief Return the function pointer for xrAttachSessionActionSets (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrAttachSessionActionSets
  getInstanceProcAddr_xrAttachSessionActionSets() const {
    return (reinterpret_cast<PFN_xrAttachSessionActionSets>(pfnAttachSessionActionSets));
  }

  /*!
   * @brief Return the function pointer for xrGetCurrentInteractionProfile, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetCurrentInteractionProfile
  getInstanceProcAddr_xrGetCurrentInteractionProfile() {
    XrResult result = populate_("xrGetCurrentInteractionProfile", pfnGetCurrentInteractionProfile);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetCurrentInteractionProfile>(pfnGetCurrentInteractionProfile));
  }
  /*!
   * @brief Return the function pointer for xrGetCurrentInteractionProfile (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetCurrentInteractionProfile
  getInstanceProcAddr_xrGetCurrentInteractionProfile() const {
    return (reinterpret_cast<PFN_xrGetCurrentInteractionProfile>(pfnGetCurrentInteractionProfile));
  }

  /*!
   * @brief Return the function pointer for xrGetActionStateBoolean, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStateBoolean getInstanceProcAddr_xrGetActionStateBoolean() {
    XrResult result = populate_("xrGetActionStateBoolean", pfnGetActionStateBoolean);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetActionStateBoolean>(pfnGetActionStateBoolean));
  }
  /*!
   * @brief Return the function pointer for xrGetActionStateBoolean (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStateBoolean
  getInstanceProcAddr_xrGetActionStateBoolean() const {
    return (reinterpret_cast<PFN_xrGetActionStateBoolean>(pfnGetActionStateBoolean));
  }

  /*!
   * @brief Return the function pointer for xrGetActionStateFloat, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStateFloat getInstanceProcAddr_xrGetActionStateFloat() {
    XrResult result = populate_("xrGetActionStateFloat", pfnGetActionStateFloat);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetActionStateFloat>(pfnGetActionStateFloat));
  }
  /*!
   * @brief Return the function pointer for xrGetActionStateFloat (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStateFloat getInstanceProcAddr_xrGetActionStateFloat() const {
    return (reinterpret_cast<PFN_xrGetActionStateFloat>(pfnGetActionStateFloat));
  }

  /*!
   * @brief Return the function pointer for xrGetActionStateVector2f, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStateVector2f getInstanceProcAddr_xrGetActionStateVector2f() {
    XrResult result = populate_("xrGetActionStateVector2f", pfnGetActionStateVector2f);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetActionStateVector2f>(pfnGetActionStateVector2f));
  }
  /*!
   * @brief Return the function pointer for xrGetActionStateVector2f (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStateVector2f
  getInstanceProcAddr_xrGetActionStateVector2f() const {
    return (reinterpret_cast<PFN_xrGetActionStateVector2f>(pfnGetActionStateVector2f));
  }

  /*!
   * @brief Return the function pointer for xrGetActionStatePose, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStatePose getInstanceProcAddr_xrGetActionStatePose() {
    XrResult result = populate_("xrGetActionStatePose", pfnGetActionStatePose);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetActionStatePose>(pfnGetActionStatePose));
  }
  /*!
   * @brief Return the function pointer for xrGetActionStatePose (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStatePose getInstanceProcAddr_xrGetActionStatePose() const {
    return (reinterpret_cast<PFN_xrGetActionStatePose>(pfnGetActionStatePose));
  }

  /*!
   * @brief Return the function pointer for xrSyncActions, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSyncActions getInstanceProcAddr_xrSyncActions() {
    XrResult result = populate_("xrSyncActions", pfnSyncActions);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSyncActions>(pfnSyncActions));
  }
  /*!
   * @brief Return the function pointer for xrSyncActions (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSyncActions getInstanceProcAddr_xrSyncActions() const {
    return (reinterpret_cast<PFN_xrSyncActions>(pfnSyncActions));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateBoundSourcesForAction, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateBoundSourcesForAction
  getInstanceProcAddr_xrEnumerateBoundSourcesForAction() {
    XrResult result =
        populate_("xrEnumerateBoundSourcesForAction", pfnEnumerateBoundSourcesForAction);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateBoundSourcesForAction>(pfnEnumerateBoundSourcesForAction));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateBoundSourcesForAction (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateBoundSourcesForAction
  getInstanceProcAddr_xrEnumerateBoundSourcesForAction() const {
    return (
        reinterpret_cast<PFN_xrEnumerateBoundSourcesForAction>(pfnEnumerateBoundSourcesForAction));
  }

  /*!
   * @brief Return the function pointer for xrGetInputSourceLocalizedName, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetInputSourceLocalizedName
  getInstanceProcAddr_xrGetInputSourceLocalizedName() {
    XrResult result = populate_("xrGetInputSourceLocalizedName", pfnGetInputSourceLocalizedName);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetInputSourceLocalizedName>(pfnGetInputSourceLocalizedName));
  }
  /*!
   * @brief Return the function pointer for xrGetInputSourceLocalizedName (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetInputSourceLocalizedName
  getInstanceProcAddr_xrGetInputSourceLocalizedName() const {
    return (reinterpret_cast<PFN_xrGetInputSourceLocalizedName>(pfnGetInputSourceLocalizedName));
  }

  /*!
   * @brief Return the function pointer for xrApplyHapticFeedback, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrApplyHapticFeedback getInstanceProcAddr_xrApplyHapticFeedback() {
    XrResult result = populate_("xrApplyHapticFeedback", pfnApplyHapticFeedback);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrApplyHapticFeedback>(pfnApplyHapticFeedback));
  }
  /*!
   * @brief Return the function pointer for xrApplyHapticFeedback (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrApplyHapticFeedback getInstanceProcAddr_xrApplyHapticFeedback() const {
    return (reinterpret_cast<PFN_xrApplyHapticFeedback>(pfnApplyHapticFeedback));
  }

  /*!
   * @brief Return the function pointer for xrStopHapticFeedback, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrStopHapticFeedback getInstanceProcAddr_xrStopHapticFeedback() {
    XrResult result = populate_("xrStopHapticFeedback", pfnStopHapticFeedback);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStopHapticFeedback>(pfnStopHapticFeedback));
  }
  /*!
   * @brief Return the function pointer for xrStopHapticFeedback (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStopHapticFeedback getInstanceProcAddr_xrStopHapticFeedback() const {
    return (reinterpret_cast<PFN_xrStopHapticFeedback>(pfnStopHapticFeedback));
  }

#ifdef XR_KHR_android_thread_settings
#if defined(XR_USE_PLATFORM_ANDROID)
  /*!
   * @brief Return the function pointer for xrSetAndroidApplicationThreadKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetAndroidApplicationThreadKHR
  getInstanceProcAddr_xrSetAndroidApplicationThreadKHR() {
    XrResult result =
        populate_("xrSetAndroidApplicationThreadKHR", pfnSetAndroidApplicationThreadKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrSetAndroidApplicationThreadKHR>(pfnSetAndroidApplicationThreadKHR));
  }
  /*!
   * @brief Return the function pointer for xrSetAndroidApplicationThreadKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetAndroidApplicationThreadKHR
  getInstanceProcAddr_xrSetAndroidApplicationThreadKHR() const {
    return (
        reinterpret_cast<PFN_xrSetAndroidApplicationThreadKHR>(pfnSetAndroidApplicationThreadKHR));
  }
#endif  // defined(XR_USE_PLATFORM_ANDROID)
#endif  // XR_KHR_android_thread_settings

#ifdef XR_KHR_android_surface_swapchain
#if defined(XR_USE_PLATFORM_ANDROID)
  /*!
   * @brief Return the function pointer for xrCreateSwapchainAndroidSurfaceKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSwapchainAndroidSurfaceKHR
  getInstanceProcAddr_xrCreateSwapchainAndroidSurfaceKHR() {
    XrResult result =
        populate_("xrCreateSwapchainAndroidSurfaceKHR", pfnCreateSwapchainAndroidSurfaceKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSwapchainAndroidSurfaceKHR>(
        pfnCreateSwapchainAndroidSurfaceKHR));
  }
  /*!
   * @brief Return the function pointer for xrCreateSwapchainAndroidSurfaceKHR (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSwapchainAndroidSurfaceKHR
  getInstanceProcAddr_xrCreateSwapchainAndroidSurfaceKHR() const {
    return (reinterpret_cast<PFN_xrCreateSwapchainAndroidSurfaceKHR>(
        pfnCreateSwapchainAndroidSurfaceKHR));
  }
#endif  // defined(XR_USE_PLATFORM_ANDROID)
#endif  // XR_KHR_android_surface_swapchain

#ifdef XR_KHR_opengl_enable
#if defined(XR_USE_GRAPHICS_API_OPENGL)
  /*!
   * @brief Return the function pointer for xrGetOpenGLGraphicsRequirementsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetOpenGLGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetOpenGLGraphicsRequirementsKHR() {
    XrResult result =
        populate_("xrGetOpenGLGraphicsRequirementsKHR", pfnGetOpenGLGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetOpenGLGraphicsRequirementsKHR>(
        pfnGetOpenGLGraphicsRequirementsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetOpenGLGraphicsRequirementsKHR (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetOpenGLGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetOpenGLGraphicsRequirementsKHR() const {
    return (reinterpret_cast<PFN_xrGetOpenGLGraphicsRequirementsKHR>(
        pfnGetOpenGLGraphicsRequirementsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_OPENGL)
#endif  // XR_KHR_opengl_enable

#ifdef XR_KHR_opengl_es_enable
#if defined(XR_USE_GRAPHICS_API_OPENGL_ES)
  /*!
   * @brief Return the function pointer for xrGetOpenGLESGraphicsRequirementsKHR, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetOpenGLESGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetOpenGLESGraphicsRequirementsKHR() {
    XrResult result =
        populate_("xrGetOpenGLESGraphicsRequirementsKHR", pfnGetOpenGLESGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetOpenGLESGraphicsRequirementsKHR>(
        pfnGetOpenGLESGraphicsRequirementsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetOpenGLESGraphicsRequirementsKHR (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetOpenGLESGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetOpenGLESGraphicsRequirementsKHR() const {
    return (reinterpret_cast<PFN_xrGetOpenGLESGraphicsRequirementsKHR>(
        pfnGetOpenGLESGraphicsRequirementsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_OPENGL_ES)
#endif  // XR_KHR_opengl_es_enable

#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrGetVulkanInstanceExtensionsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanInstanceExtensionsKHR
  getInstanceProcAddr_xrGetVulkanInstanceExtensionsKHR() {
    XrResult result =
        populate_("xrGetVulkanInstanceExtensionsKHR", pfnGetVulkanInstanceExtensionsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrGetVulkanInstanceExtensionsKHR>(pfnGetVulkanInstanceExtensionsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVulkanInstanceExtensionsKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanInstanceExtensionsKHR
  getInstanceProcAddr_xrGetVulkanInstanceExtensionsKHR() const {
    return (
        reinterpret_cast<PFN_xrGetVulkanInstanceExtensionsKHR>(pfnGetVulkanInstanceExtensionsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable

#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrGetVulkanDeviceExtensionsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanDeviceExtensionsKHR
  getInstanceProcAddr_xrGetVulkanDeviceExtensionsKHR() {
    XrResult result = populate_("xrGetVulkanDeviceExtensionsKHR", pfnGetVulkanDeviceExtensionsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVulkanDeviceExtensionsKHR>(pfnGetVulkanDeviceExtensionsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVulkanDeviceExtensionsKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanDeviceExtensionsKHR
  getInstanceProcAddr_xrGetVulkanDeviceExtensionsKHR() const {
    return (reinterpret_cast<PFN_xrGetVulkanDeviceExtensionsKHR>(pfnGetVulkanDeviceExtensionsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable

#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsDeviceKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsDeviceKHR
  getInstanceProcAddr_xrGetVulkanGraphicsDeviceKHR() {
    XrResult result = populate_("xrGetVulkanGraphicsDeviceKHR", pfnGetVulkanGraphicsDeviceKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDeviceKHR>(pfnGetVulkanGraphicsDeviceKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsDeviceKHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsDeviceKHR
  getInstanceProcAddr_xrGetVulkanGraphicsDeviceKHR() const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDeviceKHR>(pfnGetVulkanGraphicsDeviceKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable

#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsRequirementsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetVulkanGraphicsRequirementsKHR() {
    XrResult result =
        populate_("xrGetVulkanGraphicsRequirementsKHR", pfnGetVulkanGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirementsKHR>(
        pfnGetVulkanGraphicsRequirementsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsRequirementsKHR (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetVulkanGraphicsRequirementsKHR() const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirementsKHR>(
        pfnGetVulkanGraphicsRequirementsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable

#ifdef XR_KHR_D3D11_enable
#if defined(XR_USE_GRAPHICS_API_D3D11)
  /*!
   * @brief Return the function pointer for xrGetD3D11GraphicsRequirementsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetD3D11GraphicsRequirementsKHR
  getInstanceProcAddr_xrGetD3D11GraphicsRequirementsKHR() {
    XrResult result =
        populate_("xrGetD3D11GraphicsRequirementsKHR", pfnGetD3D11GraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetD3D11GraphicsRequirementsKHR>(
        pfnGetD3D11GraphicsRequirementsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetD3D11GraphicsRequirementsKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetD3D11GraphicsRequirementsKHR
  getInstanceProcAddr_xrGetD3D11GraphicsRequirementsKHR() const {
    return (reinterpret_cast<PFN_xrGetD3D11GraphicsRequirementsKHR>(
        pfnGetD3D11GraphicsRequirementsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_D3D11)
#endif  // XR_KHR_D3D11_enable

#ifdef XR_KHR_D3D12_enable
#if defined(XR_USE_GRAPHICS_API_D3D12)
  /*!
   * @brief Return the function pointer for xrGetD3D12GraphicsRequirementsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetD3D12GraphicsRequirementsKHR
  getInstanceProcAddr_xrGetD3D12GraphicsRequirementsKHR() {
    XrResult result =
        populate_("xrGetD3D12GraphicsRequirementsKHR", pfnGetD3D12GraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetD3D12GraphicsRequirementsKHR>(
        pfnGetD3D12GraphicsRequirementsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetD3D12GraphicsRequirementsKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetD3D12GraphicsRequirementsKHR
  getInstanceProcAddr_xrGetD3D12GraphicsRequirementsKHR() const {
    return (reinterpret_cast<PFN_xrGetD3D12GraphicsRequirementsKHR>(
        pfnGetD3D12GraphicsRequirementsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_D3D12)
#endif  // XR_KHR_D3D12_enable

#ifdef XR_KHR_visibility_mask
  /*!
   * @brief Return the function pointer for xrGetVisibilityMaskKHR, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVisibilityMaskKHR getInstanceProcAddr_xrGetVisibilityMaskKHR() {
    XrResult result = populate_("xrGetVisibilityMaskKHR", pfnGetVisibilityMaskKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVisibilityMaskKHR>(pfnGetVisibilityMaskKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVisibilityMaskKHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVisibilityMaskKHR getInstanceProcAddr_xrGetVisibilityMaskKHR() const {
    return (reinterpret_cast<PFN_xrGetVisibilityMaskKHR>(pfnGetVisibilityMaskKHR));
  }
#endif  // XR_KHR_visibility_mask

#ifdef XR_KHR_win32_convert_performance_counter_time
#if defined(XR_USE_PLATFORM_WIN32)
  /*!
   * @brief Return the function pointer for xrConvertWin32PerformanceCounterToTimeKHR, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrConvertWin32PerformanceCounterToTimeKHR
  getInstanceProcAddr_xrConvertWin32PerformanceCounterToTimeKHR() {
    XrResult result = populate_("xrConvertWin32PerformanceCounterToTimeKHR",
                                pfnConvertWin32PerformanceCounterToTimeKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrConvertWin32PerformanceCounterToTimeKHR>(
        pfnConvertWin32PerformanceCounterToTimeKHR));
  }
  /*!
   * @brief Return the function pointer for xrConvertWin32PerformanceCounterToTimeKHR (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrConvertWin32PerformanceCounterToTimeKHR
  getInstanceProcAddr_xrConvertWin32PerformanceCounterToTimeKHR() const {
    return (reinterpret_cast<PFN_xrConvertWin32PerformanceCounterToTimeKHR>(
        pfnConvertWin32PerformanceCounterToTimeKHR));
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_KHR_win32_convert_performance_counter_time

#ifdef XR_KHR_win32_convert_performance_counter_time
#if defined(XR_USE_PLATFORM_WIN32)
  /*!
   * @brief Return the function pointer for xrConvertTimeToWin32PerformanceCounterKHR, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrConvertTimeToWin32PerformanceCounterKHR
  getInstanceProcAddr_xrConvertTimeToWin32PerformanceCounterKHR() {
    XrResult result = populate_("xrConvertTimeToWin32PerformanceCounterKHR",
                                pfnConvertTimeToWin32PerformanceCounterKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrConvertTimeToWin32PerformanceCounterKHR>(
        pfnConvertTimeToWin32PerformanceCounterKHR));
  }
  /*!
   * @brief Return the function pointer for xrConvertTimeToWin32PerformanceCounterKHR (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrConvertTimeToWin32PerformanceCounterKHR
  getInstanceProcAddr_xrConvertTimeToWin32PerformanceCounterKHR() const {
    return (reinterpret_cast<PFN_xrConvertTimeToWin32PerformanceCounterKHR>(
        pfnConvertTimeToWin32PerformanceCounterKHR));
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_KHR_win32_convert_performance_counter_time

#ifdef XR_KHR_convert_timespec_time
#if defined(XR_USE_TIMESPEC)
  /*!
   * @brief Return the function pointer for xrConvertTimespecTimeToTimeKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrConvertTimespecTimeToTimeKHR
  getInstanceProcAddr_xrConvertTimespecTimeToTimeKHR() {
    XrResult result = populate_("xrConvertTimespecTimeToTimeKHR", pfnConvertTimespecTimeToTimeKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrConvertTimespecTimeToTimeKHR>(pfnConvertTimespecTimeToTimeKHR));
  }
  /*!
   * @brief Return the function pointer for xrConvertTimespecTimeToTimeKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrConvertTimespecTimeToTimeKHR
  getInstanceProcAddr_xrConvertTimespecTimeToTimeKHR() const {
    return (reinterpret_cast<PFN_xrConvertTimespecTimeToTimeKHR>(pfnConvertTimespecTimeToTimeKHR));
  }
#endif  // defined(XR_USE_TIMESPEC)
#endif  // XR_KHR_convert_timespec_time

#ifdef XR_KHR_convert_timespec_time
#if defined(XR_USE_TIMESPEC)
  /*!
   * @brief Return the function pointer for xrConvertTimeToTimespecTimeKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrConvertTimeToTimespecTimeKHR
  getInstanceProcAddr_xrConvertTimeToTimespecTimeKHR() {
    XrResult result = populate_("xrConvertTimeToTimespecTimeKHR", pfnConvertTimeToTimespecTimeKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrConvertTimeToTimespecTimeKHR>(pfnConvertTimeToTimespecTimeKHR));
  }
  /*!
   * @brief Return the function pointer for xrConvertTimeToTimespecTimeKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrConvertTimeToTimespecTimeKHR
  getInstanceProcAddr_xrConvertTimeToTimespecTimeKHR() const {
    return (reinterpret_cast<PFN_xrConvertTimeToTimespecTimeKHR>(pfnConvertTimeToTimespecTimeKHR));
  }
#endif  // defined(XR_USE_TIMESPEC)
#endif  // XR_KHR_convert_timespec_time

#ifdef XR_KHR_loader_init
  /*!
   * @brief Return the function pointer for xrInitializeLoaderKHR, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrInitializeLoaderKHR getInstanceProcAddr_xrInitializeLoaderKHR() {
    XrResult result = populate_("xrInitializeLoaderKHR", pfnInitializeLoaderKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrInitializeLoaderKHR>(pfnInitializeLoaderKHR));
  }
  /*!
   * @brief Return the function pointer for xrInitializeLoaderKHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrInitializeLoaderKHR getInstanceProcAddr_xrInitializeLoaderKHR() const {
    return (reinterpret_cast<PFN_xrInitializeLoaderKHR>(pfnInitializeLoaderKHR));
  }
#endif  // XR_KHR_loader_init

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrCreateVulkanInstanceKHR, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateVulkanInstanceKHR getInstanceProcAddr_xrCreateVulkanInstanceKHR() {
    XrResult result = populate_("xrCreateVulkanInstanceKHR", pfnCreateVulkanInstanceKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateVulkanInstanceKHR>(pfnCreateVulkanInstanceKHR));
  }
  /*!
   * @brief Return the function pointer for xrCreateVulkanInstanceKHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateVulkanInstanceKHR
  getInstanceProcAddr_xrCreateVulkanInstanceKHR() const {
    return (reinterpret_cast<PFN_xrCreateVulkanInstanceKHR>(pfnCreateVulkanInstanceKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrCreateVulkanDeviceKHR, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateVulkanDeviceKHR getInstanceProcAddr_xrCreateVulkanDeviceKHR() {
    XrResult result = populate_("xrCreateVulkanDeviceKHR", pfnCreateVulkanDeviceKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateVulkanDeviceKHR>(pfnCreateVulkanDeviceKHR));
  }
  /*!
   * @brief Return the function pointer for xrCreateVulkanDeviceKHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateVulkanDeviceKHR
  getInstanceProcAddr_xrCreateVulkanDeviceKHR() const {
    return (reinterpret_cast<PFN_xrCreateVulkanDeviceKHR>(pfnCreateVulkanDeviceKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsDevice2KHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsDevice2KHR
  getInstanceProcAddr_xrGetVulkanGraphicsDevice2KHR() {
    XrResult result = populate_("xrGetVulkanGraphicsDevice2KHR", pfnGetVulkanGraphicsDevice2KHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDevice2KHR>(pfnGetVulkanGraphicsDevice2KHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsDevice2KHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsDevice2KHR
  getInstanceProcAddr_xrGetVulkanGraphicsDevice2KHR() const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDevice2KHR>(pfnGetVulkanGraphicsDevice2KHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsRequirements2KHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsRequirements2KHR
  getInstanceProcAddr_xrGetVulkanGraphicsRequirements2KHR() {
    XrResult result =
        populate_("xrGetVulkanGraphicsRequirements2KHR", pfnGetVulkanGraphicsRequirements2KHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirements2KHR>(
        pfnGetVulkanGraphicsRequirements2KHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsRequirements2KHR (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsRequirements2KHR
  getInstanceProcAddr_xrGetVulkanGraphicsRequirements2KHR() const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirements2KHR>(
        pfnGetVulkanGraphicsRequirements2KHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_EXT_performance_settings
  /*!
   * @brief Return the function pointer for xrPerfSettingsSetPerformanceLevelEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPerfSettingsSetPerformanceLevelEXT
  getInstanceProcAddr_xrPerfSettingsSetPerformanceLevelEXT() {
    XrResult result =
        populate_("xrPerfSettingsSetPerformanceLevelEXT", pfnPerfSettingsSetPerformanceLevelEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPerfSettingsSetPerformanceLevelEXT>(
        pfnPerfSettingsSetPerformanceLevelEXT));
  }
  /*!
   * @brief Return the function pointer for xrPerfSettingsSetPerformanceLevelEXT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPerfSettingsSetPerformanceLevelEXT
  getInstanceProcAddr_xrPerfSettingsSetPerformanceLevelEXT() const {
    return (reinterpret_cast<PFN_xrPerfSettingsSetPerformanceLevelEXT>(
        pfnPerfSettingsSetPerformanceLevelEXT));
  }
#endif  // XR_EXT_performance_settings

#ifdef XR_EXT_thermal_query
  /*!
   * @brief Return the function pointer for xrThermalGetTemperatureTrendEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrThermalGetTemperatureTrendEXT
  getInstanceProcAddr_xrThermalGetTemperatureTrendEXT() {
    XrResult result =
        populate_("xrThermalGetTemperatureTrendEXT", pfnThermalGetTemperatureTrendEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrThermalGetTemperatureTrendEXT>(pfnThermalGetTemperatureTrendEXT));
  }
  /*!
   * @brief Return the function pointer for xrThermalGetTemperatureTrendEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrThermalGetTemperatureTrendEXT
  getInstanceProcAddr_xrThermalGetTemperatureTrendEXT() const {
    return (
        reinterpret_cast<PFN_xrThermalGetTemperatureTrendEXT>(pfnThermalGetTemperatureTrendEXT));
  }
#endif  // XR_EXT_thermal_query

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrSetDebugUtilsObjectNameEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetDebugUtilsObjectNameEXT
  getInstanceProcAddr_xrSetDebugUtilsObjectNameEXT() {
    XrResult result = populate_("xrSetDebugUtilsObjectNameEXT", pfnSetDebugUtilsObjectNameEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetDebugUtilsObjectNameEXT>(pfnSetDebugUtilsObjectNameEXT));
  }
  /*!
   * @brief Return the function pointer for xrSetDebugUtilsObjectNameEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetDebugUtilsObjectNameEXT
  getInstanceProcAddr_xrSetDebugUtilsObjectNameEXT() const {
    return (reinterpret_cast<PFN_xrSetDebugUtilsObjectNameEXT>(pfnSetDebugUtilsObjectNameEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrCreateDebugUtilsMessengerEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateDebugUtilsMessengerEXT
  getInstanceProcAddr_xrCreateDebugUtilsMessengerEXT() {
    XrResult result = populate_("xrCreateDebugUtilsMessengerEXT", pfnCreateDebugUtilsMessengerEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateDebugUtilsMessengerEXT>(pfnCreateDebugUtilsMessengerEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateDebugUtilsMessengerEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateDebugUtilsMessengerEXT
  getInstanceProcAddr_xrCreateDebugUtilsMessengerEXT() const {
    return (reinterpret_cast<PFN_xrCreateDebugUtilsMessengerEXT>(pfnCreateDebugUtilsMessengerEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrDestroyDebugUtilsMessengerEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyDebugUtilsMessengerEXT
  getInstanceProcAddr_xrDestroyDebugUtilsMessengerEXT() {
    XrResult result =
        populate_("xrDestroyDebugUtilsMessengerEXT", pfnDestroyDebugUtilsMessengerEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrDestroyDebugUtilsMessengerEXT>(pfnDestroyDebugUtilsMessengerEXT));
  }
  /*!
   * @brief Return the function pointer for xrDestroyDebugUtilsMessengerEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyDebugUtilsMessengerEXT
  getInstanceProcAddr_xrDestroyDebugUtilsMessengerEXT() const {
    return (
        reinterpret_cast<PFN_xrDestroyDebugUtilsMessengerEXT>(pfnDestroyDebugUtilsMessengerEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrSubmitDebugUtilsMessageEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSubmitDebugUtilsMessageEXT
  getInstanceProcAddr_xrSubmitDebugUtilsMessageEXT() {
    XrResult result = populate_("xrSubmitDebugUtilsMessageEXT", pfnSubmitDebugUtilsMessageEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSubmitDebugUtilsMessageEXT>(pfnSubmitDebugUtilsMessageEXT));
  }
  /*!
   * @brief Return the function pointer for xrSubmitDebugUtilsMessageEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSubmitDebugUtilsMessageEXT
  getInstanceProcAddr_xrSubmitDebugUtilsMessageEXT() const {
    return (reinterpret_cast<PFN_xrSubmitDebugUtilsMessageEXT>(pfnSubmitDebugUtilsMessageEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrSessionBeginDebugUtilsLabelRegionEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSessionBeginDebugUtilsLabelRegionEXT
  getInstanceProcAddr_xrSessionBeginDebugUtilsLabelRegionEXT() {
    XrResult result = populate_("xrSessionBeginDebugUtilsLabelRegionEXT",
                                pfnSessionBeginDebugUtilsLabelRegionEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSessionBeginDebugUtilsLabelRegionEXT>(
        pfnSessionBeginDebugUtilsLabelRegionEXT));
  }
  /*!
   * @brief Return the function pointer for xrSessionBeginDebugUtilsLabelRegionEXT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSessionBeginDebugUtilsLabelRegionEXT
  getInstanceProcAddr_xrSessionBeginDebugUtilsLabelRegionEXT() const {
    return (reinterpret_cast<PFN_xrSessionBeginDebugUtilsLabelRegionEXT>(
        pfnSessionBeginDebugUtilsLabelRegionEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrSessionEndDebugUtilsLabelRegionEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSessionEndDebugUtilsLabelRegionEXT
  getInstanceProcAddr_xrSessionEndDebugUtilsLabelRegionEXT() {
    XrResult result =
        populate_("xrSessionEndDebugUtilsLabelRegionEXT", pfnSessionEndDebugUtilsLabelRegionEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSessionEndDebugUtilsLabelRegionEXT>(
        pfnSessionEndDebugUtilsLabelRegionEXT));
  }
  /*!
   * @brief Return the function pointer for xrSessionEndDebugUtilsLabelRegionEXT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSessionEndDebugUtilsLabelRegionEXT
  getInstanceProcAddr_xrSessionEndDebugUtilsLabelRegionEXT() const {
    return (reinterpret_cast<PFN_xrSessionEndDebugUtilsLabelRegionEXT>(
        pfnSessionEndDebugUtilsLabelRegionEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrSessionInsertDebugUtilsLabelEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSessionInsertDebugUtilsLabelEXT
  getInstanceProcAddr_xrSessionInsertDebugUtilsLabelEXT() {
    XrResult result =
        populate_("xrSessionInsertDebugUtilsLabelEXT", pfnSessionInsertDebugUtilsLabelEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSessionInsertDebugUtilsLabelEXT>(
        pfnSessionInsertDebugUtilsLabelEXT));
  }
  /*!
   * @brief Return the function pointer for xrSessionInsertDebugUtilsLabelEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSessionInsertDebugUtilsLabelEXT
  getInstanceProcAddr_xrSessionInsertDebugUtilsLabelEXT() const {
    return (reinterpret_cast<PFN_xrSessionInsertDebugUtilsLabelEXT>(
        pfnSessionInsertDebugUtilsLabelEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_MSFT_spatial_anchor
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorMSFT getInstanceProcAddr_xrCreateSpatialAnchorMSFT() {
    XrResult result = populate_("xrCreateSpatialAnchorMSFT", pfnCreateSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorMSFT>(pfnCreateSpatialAnchorMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorMSFT>(pfnCreateSpatialAnchorMSFT));
  }
#endif  // XR_MSFT_spatial_anchor

#ifdef XR_MSFT_spatial_anchor
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorSpaceMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorSpaceMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorSpaceMSFT() {
    XrResult result = populate_("xrCreateSpatialAnchorSpaceMSFT", pfnCreateSpatialAnchorSpaceMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorSpaceMSFT>(pfnCreateSpatialAnchorSpaceMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorSpaceMSFT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorSpaceMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorSpaceMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorSpaceMSFT>(pfnCreateSpatialAnchorSpaceMSFT));
  }
#endif  // XR_MSFT_spatial_anchor

#ifdef XR_MSFT_spatial_anchor
  /*!
   * @brief Return the function pointer for xrDestroySpatialAnchorMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialAnchorMSFT
  getInstanceProcAddr_xrDestroySpatialAnchorMSFT() {
    XrResult result = populate_("xrDestroySpatialAnchorMSFT", pfnDestroySpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialAnchorMSFT>(pfnDestroySpatialAnchorMSFT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpatialAnchorMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialAnchorMSFT
  getInstanceProcAddr_xrDestroySpatialAnchorMSFT() const {
    return (reinterpret_cast<PFN_xrDestroySpatialAnchorMSFT>(pfnDestroySpatialAnchorMSFT));
  }
#endif  // XR_MSFT_spatial_anchor

#ifdef XR_EXT_conformance_automation
  /*!
   * @brief Return the function pointer for xrSetInputDeviceActiveEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceActiveEXT getInstanceProcAddr_xrSetInputDeviceActiveEXT() {
    XrResult result = populate_("xrSetInputDeviceActiveEXT", pfnSetInputDeviceActiveEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceActiveEXT>(pfnSetInputDeviceActiveEXT));
  }
  /*!
   * @brief Return the function pointer for xrSetInputDeviceActiveEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceActiveEXT
  getInstanceProcAddr_xrSetInputDeviceActiveEXT() const {
    return (reinterpret_cast<PFN_xrSetInputDeviceActiveEXT>(pfnSetInputDeviceActiveEXT));
  }
#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_conformance_automation
  /*!
   * @brief Return the function pointer for xrSetInputDeviceStateBoolEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceStateBoolEXT
  getInstanceProcAddr_xrSetInputDeviceStateBoolEXT() {
    XrResult result = populate_("xrSetInputDeviceStateBoolEXT", pfnSetInputDeviceStateBoolEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceStateBoolEXT>(pfnSetInputDeviceStateBoolEXT));
  }
  /*!
   * @brief Return the function pointer for xrSetInputDeviceStateBoolEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceStateBoolEXT
  getInstanceProcAddr_xrSetInputDeviceStateBoolEXT() const {
    return (reinterpret_cast<PFN_xrSetInputDeviceStateBoolEXT>(pfnSetInputDeviceStateBoolEXT));
  }
#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_conformance_automation
  /*!
   * @brief Return the function pointer for xrSetInputDeviceStateFloatEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceStateFloatEXT
  getInstanceProcAddr_xrSetInputDeviceStateFloatEXT() {
    XrResult result = populate_("xrSetInputDeviceStateFloatEXT", pfnSetInputDeviceStateFloatEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceStateFloatEXT>(pfnSetInputDeviceStateFloatEXT));
  }
  /*!
   * @brief Return the function pointer for xrSetInputDeviceStateFloatEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceStateFloatEXT
  getInstanceProcAddr_xrSetInputDeviceStateFloatEXT() const {
    return (reinterpret_cast<PFN_xrSetInputDeviceStateFloatEXT>(pfnSetInputDeviceStateFloatEXT));
  }
#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_conformance_automation
  /*!
   * @brief Return the function pointer for xrSetInputDeviceStateVector2fEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceStateVector2fEXT
  getInstanceProcAddr_xrSetInputDeviceStateVector2fEXT() {
    XrResult result =
        populate_("xrSetInputDeviceStateVector2fEXT", pfnSetInputDeviceStateVector2fEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrSetInputDeviceStateVector2fEXT>(pfnSetInputDeviceStateVector2fEXT));
  }
  /*!
   * @brief Return the function pointer for xrSetInputDeviceStateVector2fEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceStateVector2fEXT
  getInstanceProcAddr_xrSetInputDeviceStateVector2fEXT() const {
    return (
        reinterpret_cast<PFN_xrSetInputDeviceStateVector2fEXT>(pfnSetInputDeviceStateVector2fEXT));
  }
#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_conformance_automation
  /*!
   * @brief Return the function pointer for xrSetInputDeviceLocationEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceLocationEXT
  getInstanceProcAddr_xrSetInputDeviceLocationEXT() {
    XrResult result = populate_("xrSetInputDeviceLocationEXT", pfnSetInputDeviceLocationEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceLocationEXT>(pfnSetInputDeviceLocationEXT));
  }
  /*!
   * @brief Return the function pointer for xrSetInputDeviceLocationEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceLocationEXT
  getInstanceProcAddr_xrSetInputDeviceLocationEXT() const {
    return (reinterpret_cast<PFN_xrSetInputDeviceLocationEXT>(pfnSetInputDeviceLocationEXT));
  }
#endif  // XR_EXT_conformance_automation

#ifdef XR_MSFT_spatial_graph_bridge
  /*!
   * @brief Return the function pointer for xrCreateSpatialGraphNodeSpaceMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialGraphNodeSpaceMSFT
  getInstanceProcAddr_xrCreateSpatialGraphNodeSpaceMSFT() {
    XrResult result =
        populate_("xrCreateSpatialGraphNodeSpaceMSFT", pfnCreateSpatialGraphNodeSpaceMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialGraphNodeSpaceMSFT>(
        pfnCreateSpatialGraphNodeSpaceMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialGraphNodeSpaceMSFT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialGraphNodeSpaceMSFT
  getInstanceProcAddr_xrCreateSpatialGraphNodeSpaceMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialGraphNodeSpaceMSFT>(
        pfnCreateSpatialGraphNodeSpaceMSFT));
  }
#endif  // XR_MSFT_spatial_graph_bridge

#ifdef XR_EXT_hand_tracking
  /*!
   * @brief Return the function pointer for xrCreateHandTrackerEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateHandTrackerEXT getInstanceProcAddr_xrCreateHandTrackerEXT() {
    XrResult result = populate_("xrCreateHandTrackerEXT", pfnCreateHandTrackerEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateHandTrackerEXT>(pfnCreateHandTrackerEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateHandTrackerEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateHandTrackerEXT getInstanceProcAddr_xrCreateHandTrackerEXT() const {
    return (reinterpret_cast<PFN_xrCreateHandTrackerEXT>(pfnCreateHandTrackerEXT));
  }
#endif  // XR_EXT_hand_tracking

#ifdef XR_EXT_hand_tracking
  /*!
   * @brief Return the function pointer for xrDestroyHandTrackerEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyHandTrackerEXT getInstanceProcAddr_xrDestroyHandTrackerEXT() {
    XrResult result = populate_("xrDestroyHandTrackerEXT", pfnDestroyHandTrackerEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyHandTrackerEXT>(pfnDestroyHandTrackerEXT));
  }
  /*!
   * @brief Return the function pointer for xrDestroyHandTrackerEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyHandTrackerEXT
  getInstanceProcAddr_xrDestroyHandTrackerEXT() const {
    return (reinterpret_cast<PFN_xrDestroyHandTrackerEXT>(pfnDestroyHandTrackerEXT));
  }
#endif  // XR_EXT_hand_tracking

#ifdef XR_EXT_hand_tracking
  /*!
   * @brief Return the function pointer for xrLocateHandJointsEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateHandJointsEXT getInstanceProcAddr_xrLocateHandJointsEXT() {
    XrResult result = populate_("xrLocateHandJointsEXT", pfnLocateHandJointsEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateHandJointsEXT>(pfnLocateHandJointsEXT));
  }
  /*!
   * @brief Return the function pointer for xrLocateHandJointsEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateHandJointsEXT getInstanceProcAddr_xrLocateHandJointsEXT() const {
    return (reinterpret_cast<PFN_xrLocateHandJointsEXT>(pfnLocateHandJointsEXT));
  }
#endif  // XR_EXT_hand_tracking

#ifdef XR_MSFT_hand_tracking_mesh
  /*!
   * @brief Return the function pointer for xrCreateHandMeshSpaceMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateHandMeshSpaceMSFT getInstanceProcAddr_xrCreateHandMeshSpaceMSFT() {
    XrResult result = populate_("xrCreateHandMeshSpaceMSFT", pfnCreateHandMeshSpaceMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateHandMeshSpaceMSFT>(pfnCreateHandMeshSpaceMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateHandMeshSpaceMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateHandMeshSpaceMSFT
  getInstanceProcAddr_xrCreateHandMeshSpaceMSFT() const {
    return (reinterpret_cast<PFN_xrCreateHandMeshSpaceMSFT>(pfnCreateHandMeshSpaceMSFT));
  }
#endif  // XR_MSFT_hand_tracking_mesh

#ifdef XR_MSFT_hand_tracking_mesh
  /*!
   * @brief Return the function pointer for xrUpdateHandMeshMSFT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrUpdateHandMeshMSFT getInstanceProcAddr_xrUpdateHandMeshMSFT() {
    XrResult result = populate_("xrUpdateHandMeshMSFT", pfnUpdateHandMeshMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrUpdateHandMeshMSFT>(pfnUpdateHandMeshMSFT));
  }
  /*!
   * @brief Return the function pointer for xrUpdateHandMeshMSFT (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUpdateHandMeshMSFT getInstanceProcAddr_xrUpdateHandMeshMSFT() const {
    return (reinterpret_cast<PFN_xrUpdateHandMeshMSFT>(pfnUpdateHandMeshMSFT));
  }
#endif  // XR_MSFT_hand_tracking_mesh

#ifdef XR_MSFT_controller_model
  /*!
   * @brief Return the function pointer for xrGetControllerModelKeyMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetControllerModelKeyMSFT
  getInstanceProcAddr_xrGetControllerModelKeyMSFT() {
    XrResult result = populate_("xrGetControllerModelKeyMSFT", pfnGetControllerModelKeyMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetControllerModelKeyMSFT>(pfnGetControllerModelKeyMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetControllerModelKeyMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetControllerModelKeyMSFT
  getInstanceProcAddr_xrGetControllerModelKeyMSFT() const {
    return (reinterpret_cast<PFN_xrGetControllerModelKeyMSFT>(pfnGetControllerModelKeyMSFT));
  }
#endif  // XR_MSFT_controller_model

#ifdef XR_MSFT_controller_model
  /*!
   * @brief Return the function pointer for xrLoadControllerModelMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrLoadControllerModelMSFT getInstanceProcAddr_xrLoadControllerModelMSFT() {
    XrResult result = populate_("xrLoadControllerModelMSFT", pfnLoadControllerModelMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLoadControllerModelMSFT>(pfnLoadControllerModelMSFT));
  }
  /*!
   * @brief Return the function pointer for xrLoadControllerModelMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLoadControllerModelMSFT
  getInstanceProcAddr_xrLoadControllerModelMSFT() const {
    return (reinterpret_cast<PFN_xrLoadControllerModelMSFT>(pfnLoadControllerModelMSFT));
  }
#endif  // XR_MSFT_controller_model

#ifdef XR_MSFT_controller_model
  /*!
   * @brief Return the function pointer for xrGetControllerModelPropertiesMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetControllerModelPropertiesMSFT
  getInstanceProcAddr_xrGetControllerModelPropertiesMSFT() {
    XrResult result =
        populate_("xrGetControllerModelPropertiesMSFT", pfnGetControllerModelPropertiesMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetControllerModelPropertiesMSFT>(
        pfnGetControllerModelPropertiesMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetControllerModelPropertiesMSFT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetControllerModelPropertiesMSFT
  getInstanceProcAddr_xrGetControllerModelPropertiesMSFT() const {
    return (reinterpret_cast<PFN_xrGetControllerModelPropertiesMSFT>(
        pfnGetControllerModelPropertiesMSFT));
  }
#endif  // XR_MSFT_controller_model

#ifdef XR_MSFT_controller_model
  /*!
   * @brief Return the function pointer for xrGetControllerModelStateMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetControllerModelStateMSFT
  getInstanceProcAddr_xrGetControllerModelStateMSFT() {
    XrResult result = populate_("xrGetControllerModelStateMSFT", pfnGetControllerModelStateMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetControllerModelStateMSFT>(pfnGetControllerModelStateMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetControllerModelStateMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetControllerModelStateMSFT
  getInstanceProcAddr_xrGetControllerModelStateMSFT() const {
    return (reinterpret_cast<PFN_xrGetControllerModelStateMSFT>(pfnGetControllerModelStateMSFT));
  }
#endif  // XR_MSFT_controller_model

#ifdef XR_MSFT_perception_anchor_interop
#if defined(XR_USE_PLATFORM_WIN32)
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorFromPerceptionAnchorMSFT,
   * populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorFromPerceptionAnchorMSFT() {
    XrResult result = populate_("xrCreateSpatialAnchorFromPerceptionAnchorMSFT",
                                pfnCreateSpatialAnchorFromPerceptionAnchorMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT>(
        pfnCreateSpatialAnchorFromPerceptionAnchorMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorFromPerceptionAnchorMSFT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorFromPerceptionAnchorMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT>(
        pfnCreateSpatialAnchorFromPerceptionAnchorMSFT));
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_MSFT_perception_anchor_interop

#ifdef XR_MSFT_perception_anchor_interop
#if defined(XR_USE_PLATFORM_WIN32)
  /*!
   * @brief Return the function pointer for xrTryGetPerceptionAnchorFromSpatialAnchorMSFT,
   * populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT
  getInstanceProcAddr_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT() {
    XrResult result = populate_("xrTryGetPerceptionAnchorFromSpatialAnchorMSFT",
                                pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT>(
        pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT));
  }
  /*!
   * @brief Return the function pointer for xrTryGetPerceptionAnchorFromSpatialAnchorMSFT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT
  getInstanceProcAddr_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT() const {
    return (reinterpret_cast<PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT>(
        pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT));
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_MSFT_perception_anchor_interop

#ifdef XR_MSFT_composition_layer_reprojection
  /*!
   * @brief Return the function pointer for xrEnumerateReprojectionModesMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateReprojectionModesMSFT
  getInstanceProcAddr_xrEnumerateReprojectionModesMSFT() {
    XrResult result =
        populate_("xrEnumerateReprojectionModesMSFT", pfnEnumerateReprojectionModesMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateReprojectionModesMSFT>(pfnEnumerateReprojectionModesMSFT));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateReprojectionModesMSFT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateReprojectionModesMSFT
  getInstanceProcAddr_xrEnumerateReprojectionModesMSFT() const {
    return (
        reinterpret_cast<PFN_xrEnumerateReprojectionModesMSFT>(pfnEnumerateReprojectionModesMSFT));
  }
#endif  // XR_MSFT_composition_layer_reprojection

#ifdef XR_FB_swapchain_update_state
  /*!
   * @brief Return the function pointer for xrUpdateSwapchainFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrUpdateSwapchainFB getInstanceProcAddr_xrUpdateSwapchainFB() {
    XrResult result = populate_("xrUpdateSwapchainFB", pfnUpdateSwapchainFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrUpdateSwapchainFB>(pfnUpdateSwapchainFB));
  }
  /*!
   * @brief Return the function pointer for xrUpdateSwapchainFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUpdateSwapchainFB getInstanceProcAddr_xrUpdateSwapchainFB() const {
    return (reinterpret_cast<PFN_xrUpdateSwapchainFB>(pfnUpdateSwapchainFB));
  }
#endif  // XR_FB_swapchain_update_state

#ifdef XR_FB_swapchain_update_state
  /*!
   * @brief Return the function pointer for xrGetSwapchainStateFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSwapchainStateFB getInstanceProcAddr_xrGetSwapchainStateFB() {
    XrResult result = populate_("xrGetSwapchainStateFB", pfnGetSwapchainStateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSwapchainStateFB>(pfnGetSwapchainStateFB));
  }
  /*!
   * @brief Return the function pointer for xrGetSwapchainStateFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSwapchainStateFB getInstanceProcAddr_xrGetSwapchainStateFB() const {
    return (reinterpret_cast<PFN_xrGetSwapchainStateFB>(pfnGetSwapchainStateFB));
  }
#endif  // XR_FB_swapchain_update_state

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrEnumerateSceneComputeFeaturesMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSceneComputeFeaturesMSFT
  getInstanceProcAddr_xrEnumerateSceneComputeFeaturesMSFT() {
    XrResult result =
        populate_("xrEnumerateSceneComputeFeaturesMSFT", pfnEnumerateSceneComputeFeaturesMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateSceneComputeFeaturesMSFT>(
        pfnEnumerateSceneComputeFeaturesMSFT));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateSceneComputeFeaturesMSFT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSceneComputeFeaturesMSFT
  getInstanceProcAddr_xrEnumerateSceneComputeFeaturesMSFT() const {
    return (reinterpret_cast<PFN_xrEnumerateSceneComputeFeaturesMSFT>(
        pfnEnumerateSceneComputeFeaturesMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrCreateSceneObserverMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSceneObserverMSFT getInstanceProcAddr_xrCreateSceneObserverMSFT() {
    XrResult result = populate_("xrCreateSceneObserverMSFT", pfnCreateSceneObserverMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSceneObserverMSFT>(pfnCreateSceneObserverMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSceneObserverMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSceneObserverMSFT
  getInstanceProcAddr_xrCreateSceneObserverMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSceneObserverMSFT>(pfnCreateSceneObserverMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrDestroySceneObserverMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySceneObserverMSFT
  getInstanceProcAddr_xrDestroySceneObserverMSFT() {
    XrResult result = populate_("xrDestroySceneObserverMSFT", pfnDestroySceneObserverMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySceneObserverMSFT>(pfnDestroySceneObserverMSFT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySceneObserverMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySceneObserverMSFT
  getInstanceProcAddr_xrDestroySceneObserverMSFT() const {
    return (reinterpret_cast<PFN_xrDestroySceneObserverMSFT>(pfnDestroySceneObserverMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrCreateSceneMSFT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSceneMSFT getInstanceProcAddr_xrCreateSceneMSFT() {
    XrResult result = populate_("xrCreateSceneMSFT", pfnCreateSceneMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSceneMSFT>(pfnCreateSceneMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSceneMSFT (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSceneMSFT getInstanceProcAddr_xrCreateSceneMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSceneMSFT>(pfnCreateSceneMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrDestroySceneMSFT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySceneMSFT getInstanceProcAddr_xrDestroySceneMSFT() {
    XrResult result = populate_("xrDestroySceneMSFT", pfnDestroySceneMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySceneMSFT>(pfnDestroySceneMSFT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySceneMSFT (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySceneMSFT getInstanceProcAddr_xrDestroySceneMSFT() const {
    return (reinterpret_cast<PFN_xrDestroySceneMSFT>(pfnDestroySceneMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrComputeNewSceneMSFT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrComputeNewSceneMSFT getInstanceProcAddr_xrComputeNewSceneMSFT() {
    XrResult result = populate_("xrComputeNewSceneMSFT", pfnComputeNewSceneMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrComputeNewSceneMSFT>(pfnComputeNewSceneMSFT));
  }
  /*!
   * @brief Return the function pointer for xrComputeNewSceneMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrComputeNewSceneMSFT getInstanceProcAddr_xrComputeNewSceneMSFT() const {
    return (reinterpret_cast<PFN_xrComputeNewSceneMSFT>(pfnComputeNewSceneMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrGetSceneComputeStateMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneComputeStateMSFT
  getInstanceProcAddr_xrGetSceneComputeStateMSFT() {
    XrResult result = populate_("xrGetSceneComputeStateMSFT", pfnGetSceneComputeStateMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSceneComputeStateMSFT>(pfnGetSceneComputeStateMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetSceneComputeStateMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneComputeStateMSFT
  getInstanceProcAddr_xrGetSceneComputeStateMSFT() const {
    return (reinterpret_cast<PFN_xrGetSceneComputeStateMSFT>(pfnGetSceneComputeStateMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrGetSceneComponentsMSFT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneComponentsMSFT getInstanceProcAddr_xrGetSceneComponentsMSFT() {
    XrResult result = populate_("xrGetSceneComponentsMSFT", pfnGetSceneComponentsMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSceneComponentsMSFT>(pfnGetSceneComponentsMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetSceneComponentsMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneComponentsMSFT
  getInstanceProcAddr_xrGetSceneComponentsMSFT() const {
    return (reinterpret_cast<PFN_xrGetSceneComponentsMSFT>(pfnGetSceneComponentsMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrLocateSceneComponentsMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateSceneComponentsMSFT
  getInstanceProcAddr_xrLocateSceneComponentsMSFT() {
    XrResult result = populate_("xrLocateSceneComponentsMSFT", pfnLocateSceneComponentsMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateSceneComponentsMSFT>(pfnLocateSceneComponentsMSFT));
  }
  /*!
   * @brief Return the function pointer for xrLocateSceneComponentsMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateSceneComponentsMSFT
  getInstanceProcAddr_xrLocateSceneComponentsMSFT() const {
    return (reinterpret_cast<PFN_xrLocateSceneComponentsMSFT>(pfnLocateSceneComponentsMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrGetSceneMeshBuffersMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneMeshBuffersMSFT getInstanceProcAddr_xrGetSceneMeshBuffersMSFT() {
    XrResult result = populate_("xrGetSceneMeshBuffersMSFT", pfnGetSceneMeshBuffersMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSceneMeshBuffersMSFT>(pfnGetSceneMeshBuffersMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetSceneMeshBuffersMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneMeshBuffersMSFT
  getInstanceProcAddr_xrGetSceneMeshBuffersMSFT() const {
    return (reinterpret_cast<PFN_xrGetSceneMeshBuffersMSFT>(pfnGetSceneMeshBuffersMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding_serialization
  /*!
   * @brief Return the function pointer for xrDeserializeSceneMSFT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDeserializeSceneMSFT getInstanceProcAddr_xrDeserializeSceneMSFT() {
    XrResult result = populate_("xrDeserializeSceneMSFT", pfnDeserializeSceneMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDeserializeSceneMSFT>(pfnDeserializeSceneMSFT));
  }
  /*!
   * @brief Return the function pointer for xrDeserializeSceneMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDeserializeSceneMSFT getInstanceProcAddr_xrDeserializeSceneMSFT() const {
    return (reinterpret_cast<PFN_xrDeserializeSceneMSFT>(pfnDeserializeSceneMSFT));
  }
#endif  // XR_MSFT_scene_understanding_serialization

#ifdef XR_MSFT_scene_understanding_serialization
  /*!
   * @brief Return the function pointer for xrGetSerializedSceneFragmentDataMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSerializedSceneFragmentDataMSFT
  getInstanceProcAddr_xrGetSerializedSceneFragmentDataMSFT() {
    XrResult result =
        populate_("xrGetSerializedSceneFragmentDataMSFT", pfnGetSerializedSceneFragmentDataMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSerializedSceneFragmentDataMSFT>(
        pfnGetSerializedSceneFragmentDataMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetSerializedSceneFragmentDataMSFT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSerializedSceneFragmentDataMSFT
  getInstanceProcAddr_xrGetSerializedSceneFragmentDataMSFT() const {
    return (reinterpret_cast<PFN_xrGetSerializedSceneFragmentDataMSFT>(
        pfnGetSerializedSceneFragmentDataMSFT));
  }
#endif  // XR_MSFT_scene_understanding_serialization

#ifdef XR_FB_display_refresh_rate
  /*!
   * @brief Return the function pointer for xrEnumerateDisplayRefreshRatesFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateDisplayRefreshRatesFB
  getInstanceProcAddr_xrEnumerateDisplayRefreshRatesFB() {
    XrResult result =
        populate_("xrEnumerateDisplayRefreshRatesFB", pfnEnumerateDisplayRefreshRatesFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateDisplayRefreshRatesFB>(pfnEnumerateDisplayRefreshRatesFB));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateDisplayRefreshRatesFB (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateDisplayRefreshRatesFB
  getInstanceProcAddr_xrEnumerateDisplayRefreshRatesFB() const {
    return (
        reinterpret_cast<PFN_xrEnumerateDisplayRefreshRatesFB>(pfnEnumerateDisplayRefreshRatesFB));
  }
#endif  // XR_FB_display_refresh_rate

#ifdef XR_FB_display_refresh_rate
  /*!
   * @brief Return the function pointer for xrGetDisplayRefreshRateFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetDisplayRefreshRateFB getInstanceProcAddr_xrGetDisplayRefreshRateFB() {
    XrResult result = populate_("xrGetDisplayRefreshRateFB", pfnGetDisplayRefreshRateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetDisplayRefreshRateFB>(pfnGetDisplayRefreshRateFB));
  }
  /*!
   * @brief Return the function pointer for xrGetDisplayRefreshRateFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetDisplayRefreshRateFB
  getInstanceProcAddr_xrGetDisplayRefreshRateFB() const {
    return (reinterpret_cast<PFN_xrGetDisplayRefreshRateFB>(pfnGetDisplayRefreshRateFB));
  }
#endif  // XR_FB_display_refresh_rate

#ifdef XR_FB_display_refresh_rate
  /*!
   * @brief Return the function pointer for xrRequestDisplayRefreshRateFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrRequestDisplayRefreshRateFB
  getInstanceProcAddr_xrRequestDisplayRefreshRateFB() {
    XrResult result = populate_("xrRequestDisplayRefreshRateFB", pfnRequestDisplayRefreshRateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrRequestDisplayRefreshRateFB>(pfnRequestDisplayRefreshRateFB));
  }
  /*!
   * @brief Return the function pointer for xrRequestDisplayRefreshRateFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrRequestDisplayRefreshRateFB
  getInstanceProcAddr_xrRequestDisplayRefreshRateFB() const {
    return (reinterpret_cast<PFN_xrRequestDisplayRefreshRateFB>(pfnRequestDisplayRefreshRateFB));
  }
#endif  // XR_FB_display_refresh_rate

#ifdef XR_HTCX_vive_tracker_interaction
  /*!
   * @brief Return the function pointer for xrEnumerateViveTrackerPathsHTCX, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateViveTrackerPathsHTCX
  getInstanceProcAddr_xrEnumerateViveTrackerPathsHTCX() {
    XrResult result =
        populate_("xrEnumerateViveTrackerPathsHTCX", pfnEnumerateViveTrackerPathsHTCX);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateViveTrackerPathsHTCX>(pfnEnumerateViveTrackerPathsHTCX));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateViveTrackerPathsHTCX (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateViveTrackerPathsHTCX
  getInstanceProcAddr_xrEnumerateViveTrackerPathsHTCX() const {
    return (
        reinterpret_cast<PFN_xrEnumerateViveTrackerPathsHTCX>(pfnEnumerateViveTrackerPathsHTCX));
  }
#endif  // XR_HTCX_vive_tracker_interaction

#ifdef XR_HTC_facial_tracking
  /*!
   * @brief Return the function pointer for xrCreateFacialTrackerHTC, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateFacialTrackerHTC getInstanceProcAddr_xrCreateFacialTrackerHTC() {
    XrResult result = populate_("xrCreateFacialTrackerHTC", pfnCreateFacialTrackerHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateFacialTrackerHTC>(pfnCreateFacialTrackerHTC));
  }
  /*!
   * @brief Return the function pointer for xrCreateFacialTrackerHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateFacialTrackerHTC
  getInstanceProcAddr_xrCreateFacialTrackerHTC() const {
    return (reinterpret_cast<PFN_xrCreateFacialTrackerHTC>(pfnCreateFacialTrackerHTC));
  }
#endif  // XR_HTC_facial_tracking

#ifdef XR_HTC_facial_tracking
  /*!
   * @brief Return the function pointer for xrDestroyFacialTrackerHTC, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFacialTrackerHTC getInstanceProcAddr_xrDestroyFacialTrackerHTC() {
    XrResult result = populate_("xrDestroyFacialTrackerHTC", pfnDestroyFacialTrackerHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyFacialTrackerHTC>(pfnDestroyFacialTrackerHTC));
  }
  /*!
   * @brief Return the function pointer for xrDestroyFacialTrackerHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFacialTrackerHTC
  getInstanceProcAddr_xrDestroyFacialTrackerHTC() const {
    return (reinterpret_cast<PFN_xrDestroyFacialTrackerHTC>(pfnDestroyFacialTrackerHTC));
  }
#endif  // XR_HTC_facial_tracking

#ifdef XR_HTC_facial_tracking
  /*!
   * @brief Return the function pointer for xrGetFacialExpressionsHTC, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetFacialExpressionsHTC getInstanceProcAddr_xrGetFacialExpressionsHTC() {
    XrResult result = populate_("xrGetFacialExpressionsHTC", pfnGetFacialExpressionsHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetFacialExpressionsHTC>(pfnGetFacialExpressionsHTC));
  }
  /*!
   * @brief Return the function pointer for xrGetFacialExpressionsHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetFacialExpressionsHTC
  getInstanceProcAddr_xrGetFacialExpressionsHTC() const {
    return (reinterpret_cast<PFN_xrGetFacialExpressionsHTC>(pfnGetFacialExpressionsHTC));
  }
#endif  // XR_HTC_facial_tracking

#ifdef XR_FB_color_space
  /*!
   * @brief Return the function pointer for xrEnumerateColorSpacesFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateColorSpacesFB getInstanceProcAddr_xrEnumerateColorSpacesFB() {
    XrResult result = populate_("xrEnumerateColorSpacesFB", pfnEnumerateColorSpacesFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateColorSpacesFB>(pfnEnumerateColorSpacesFB));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateColorSpacesFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateColorSpacesFB
  getInstanceProcAddr_xrEnumerateColorSpacesFB() const {
    return (reinterpret_cast<PFN_xrEnumerateColorSpacesFB>(pfnEnumerateColorSpacesFB));
  }
#endif  // XR_FB_color_space

#ifdef XR_FB_color_space
  /*!
   * @brief Return the function pointer for xrSetColorSpaceFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrSetColorSpaceFB getInstanceProcAddr_xrSetColorSpaceFB() {
    XrResult result = populate_("xrSetColorSpaceFB", pfnSetColorSpaceFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetColorSpaceFB>(pfnSetColorSpaceFB));
  }
  /*!
   * @brief Return the function pointer for xrSetColorSpaceFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetColorSpaceFB getInstanceProcAddr_xrSetColorSpaceFB() const {
    return (reinterpret_cast<PFN_xrSetColorSpaceFB>(pfnSetColorSpaceFB));
  }
#endif  // XR_FB_color_space

#ifdef XR_FB_hand_tracking_mesh
  /*!
   * @brief Return the function pointer for xrGetHandMeshFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetHandMeshFB getInstanceProcAddr_xrGetHandMeshFB() {
    XrResult result = populate_("xrGetHandMeshFB", pfnGetHandMeshFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetHandMeshFB>(pfnGetHandMeshFB));
  }
  /*!
   * @brief Return the function pointer for xrGetHandMeshFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetHandMeshFB getInstanceProcAddr_xrGetHandMeshFB() const {
    return (reinterpret_cast<PFN_xrGetHandMeshFB>(pfnGetHandMeshFB));
  }
#endif  // XR_FB_hand_tracking_mesh

#ifdef XR_FB_foveation
  /*!
   * @brief Return the function pointer for xrCreateFoveationProfileFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateFoveationProfileFB
  getInstanceProcAddr_xrCreateFoveationProfileFB() {
    XrResult result = populate_("xrCreateFoveationProfileFB", pfnCreateFoveationProfileFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateFoveationProfileFB>(pfnCreateFoveationProfileFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateFoveationProfileFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateFoveationProfileFB
  getInstanceProcAddr_xrCreateFoveationProfileFB() const {
    return (reinterpret_cast<PFN_xrCreateFoveationProfileFB>(pfnCreateFoveationProfileFB));
  }
#endif  // XR_FB_foveation

#ifdef XR_FB_foveation
  /*!
   * @brief Return the function pointer for xrDestroyFoveationProfileFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFoveationProfileFB
  getInstanceProcAddr_xrDestroyFoveationProfileFB() {
    XrResult result = populate_("xrDestroyFoveationProfileFB", pfnDestroyFoveationProfileFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyFoveationProfileFB>(pfnDestroyFoveationProfileFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyFoveationProfileFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFoveationProfileFB
  getInstanceProcAddr_xrDestroyFoveationProfileFB() const {
    return (reinterpret_cast<PFN_xrDestroyFoveationProfileFB>(pfnDestroyFoveationProfileFB));
  }
#endif  // XR_FB_foveation

#ifdef XR_FB_keyboard_tracking
  /*!
   * @brief Return the function pointer for xrQuerySystemTrackedKeyboardFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrQuerySystemTrackedKeyboardFB
  getInstanceProcAddr_xrQuerySystemTrackedKeyboardFB() {
    XrResult result = populate_("xrQuerySystemTrackedKeyboardFB", pfnQuerySystemTrackedKeyboardFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrQuerySystemTrackedKeyboardFB>(pfnQuerySystemTrackedKeyboardFB));
  }
  /*!
   * @brief Return the function pointer for xrQuerySystemTrackedKeyboardFB (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrQuerySystemTrackedKeyboardFB
  getInstanceProcAddr_xrQuerySystemTrackedKeyboardFB() const {
    return (reinterpret_cast<PFN_xrQuerySystemTrackedKeyboardFB>(pfnQuerySystemTrackedKeyboardFB));
  }
#endif  // XR_FB_keyboard_tracking

#ifdef XR_FB_keyboard_tracking
  /*!
   * @brief Return the function pointer for xrCreateKeyboardSpaceFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateKeyboardSpaceFB getInstanceProcAddr_xrCreateKeyboardSpaceFB() {
    XrResult result = populate_("xrCreateKeyboardSpaceFB", pfnCreateKeyboardSpaceFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateKeyboardSpaceFB>(pfnCreateKeyboardSpaceFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateKeyboardSpaceFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateKeyboardSpaceFB
  getInstanceProcAddr_xrCreateKeyboardSpaceFB() const {
    return (reinterpret_cast<PFN_xrCreateKeyboardSpaceFB>(pfnCreateKeyboardSpaceFB));
  }
#endif  // XR_FB_keyboard_tracking

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrCreateTriangleMeshFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateTriangleMeshFB getInstanceProcAddr_xrCreateTriangleMeshFB() {
    XrResult result = populate_("xrCreateTriangleMeshFB", pfnCreateTriangleMeshFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateTriangleMeshFB>(pfnCreateTriangleMeshFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateTriangleMeshFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateTriangleMeshFB getInstanceProcAddr_xrCreateTriangleMeshFB() const {
    return (reinterpret_cast<PFN_xrCreateTriangleMeshFB>(pfnCreateTriangleMeshFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrDestroyTriangleMeshFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyTriangleMeshFB getInstanceProcAddr_xrDestroyTriangleMeshFB() {
    XrResult result = populate_("xrDestroyTriangleMeshFB", pfnDestroyTriangleMeshFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyTriangleMeshFB>(pfnDestroyTriangleMeshFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyTriangleMeshFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyTriangleMeshFB
  getInstanceProcAddr_xrDestroyTriangleMeshFB() const {
    return (reinterpret_cast<PFN_xrDestroyTriangleMeshFB>(pfnDestroyTriangleMeshFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrTriangleMeshGetVertexBufferFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshGetVertexBufferFB
  getInstanceProcAddr_xrTriangleMeshGetVertexBufferFB() {
    XrResult result =
        populate_("xrTriangleMeshGetVertexBufferFB", pfnTriangleMeshGetVertexBufferFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrTriangleMeshGetVertexBufferFB>(pfnTriangleMeshGetVertexBufferFB));
  }
  /*!
   * @brief Return the function pointer for xrTriangleMeshGetVertexBufferFB (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshGetVertexBufferFB
  getInstanceProcAddr_xrTriangleMeshGetVertexBufferFB() const {
    return (
        reinterpret_cast<PFN_xrTriangleMeshGetVertexBufferFB>(pfnTriangleMeshGetVertexBufferFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrTriangleMeshGetIndexBufferFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshGetIndexBufferFB
  getInstanceProcAddr_xrTriangleMeshGetIndexBufferFB() {
    XrResult result = populate_("xrTriangleMeshGetIndexBufferFB", pfnTriangleMeshGetIndexBufferFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshGetIndexBufferFB>(pfnTriangleMeshGetIndexBufferFB));
  }
  /*!
   * @brief Return the function pointer for xrTriangleMeshGetIndexBufferFB (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshGetIndexBufferFB
  getInstanceProcAddr_xrTriangleMeshGetIndexBufferFB() const {
    return (reinterpret_cast<PFN_xrTriangleMeshGetIndexBufferFB>(pfnTriangleMeshGetIndexBufferFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrTriangleMeshBeginUpdateFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshBeginUpdateFB
  getInstanceProcAddr_xrTriangleMeshBeginUpdateFB() {
    XrResult result = populate_("xrTriangleMeshBeginUpdateFB", pfnTriangleMeshBeginUpdateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshBeginUpdateFB>(pfnTriangleMeshBeginUpdateFB));
  }
  /*!
   * @brief Return the function pointer for xrTriangleMeshBeginUpdateFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshBeginUpdateFB
  getInstanceProcAddr_xrTriangleMeshBeginUpdateFB() const {
    return (reinterpret_cast<PFN_xrTriangleMeshBeginUpdateFB>(pfnTriangleMeshBeginUpdateFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrTriangleMeshEndUpdateFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshEndUpdateFB getInstanceProcAddr_xrTriangleMeshEndUpdateFB() {
    XrResult result = populate_("xrTriangleMeshEndUpdateFB", pfnTriangleMeshEndUpdateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshEndUpdateFB>(pfnTriangleMeshEndUpdateFB));
  }
  /*!
   * @brief Return the function pointer for xrTriangleMeshEndUpdateFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshEndUpdateFB
  getInstanceProcAddr_xrTriangleMeshEndUpdateFB() const {
    return (reinterpret_cast<PFN_xrTriangleMeshEndUpdateFB>(pfnTriangleMeshEndUpdateFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrTriangleMeshBeginVertexBufferUpdateFB, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshBeginVertexBufferUpdateFB
  getInstanceProcAddr_xrTriangleMeshBeginVertexBufferUpdateFB() {
    XrResult result = populate_("xrTriangleMeshBeginVertexBufferUpdateFB",
                                pfnTriangleMeshBeginVertexBufferUpdateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshBeginVertexBufferUpdateFB>(
        pfnTriangleMeshBeginVertexBufferUpdateFB));
  }
  /*!
   * @brief Return the function pointer for xrTriangleMeshBeginVertexBufferUpdateFB (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshBeginVertexBufferUpdateFB
  getInstanceProcAddr_xrTriangleMeshBeginVertexBufferUpdateFB() const {
    return (reinterpret_cast<PFN_xrTriangleMeshBeginVertexBufferUpdateFB>(
        pfnTriangleMeshBeginVertexBufferUpdateFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrTriangleMeshEndVertexBufferUpdateFB, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshEndVertexBufferUpdateFB
  getInstanceProcAddr_xrTriangleMeshEndVertexBufferUpdateFB() {
    XrResult result =
        populate_("xrTriangleMeshEndVertexBufferUpdateFB", pfnTriangleMeshEndVertexBufferUpdateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshEndVertexBufferUpdateFB>(
        pfnTriangleMeshEndVertexBufferUpdateFB));
  }
  /*!
   * @brief Return the function pointer for xrTriangleMeshEndVertexBufferUpdateFB (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshEndVertexBufferUpdateFB
  getInstanceProcAddr_xrTriangleMeshEndVertexBufferUpdateFB() const {
    return (reinterpret_cast<PFN_xrTriangleMeshEndVertexBufferUpdateFB>(
        pfnTriangleMeshEndVertexBufferUpdateFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrCreatePassthroughFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreatePassthroughFB getInstanceProcAddr_xrCreatePassthroughFB() {
    XrResult result = populate_("xrCreatePassthroughFB", pfnCreatePassthroughFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreatePassthroughFB>(pfnCreatePassthroughFB));
  }
  /*!
   * @brief Return the function pointer for xrCreatePassthroughFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreatePassthroughFB getInstanceProcAddr_xrCreatePassthroughFB() const {
    return (reinterpret_cast<PFN_xrCreatePassthroughFB>(pfnCreatePassthroughFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrDestroyPassthroughFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPassthroughFB getInstanceProcAddr_xrDestroyPassthroughFB() {
    XrResult result = populate_("xrDestroyPassthroughFB", pfnDestroyPassthroughFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyPassthroughFB>(pfnDestroyPassthroughFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyPassthroughFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPassthroughFB getInstanceProcAddr_xrDestroyPassthroughFB() const {
    return (reinterpret_cast<PFN_xrDestroyPassthroughFB>(pfnDestroyPassthroughFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrPassthroughStartFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughStartFB getInstanceProcAddr_xrPassthroughStartFB() {
    XrResult result = populate_("xrPassthroughStartFB", pfnPassthroughStartFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPassthroughStartFB>(pfnPassthroughStartFB));
  }
  /*!
   * @brief Return the function pointer for xrPassthroughStartFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughStartFB getInstanceProcAddr_xrPassthroughStartFB() const {
    return (reinterpret_cast<PFN_xrPassthroughStartFB>(pfnPassthroughStartFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrPassthroughPauseFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughPauseFB getInstanceProcAddr_xrPassthroughPauseFB() {
    XrResult result = populate_("xrPassthroughPauseFB", pfnPassthroughPauseFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPassthroughPauseFB>(pfnPassthroughPauseFB));
  }
  /*!
   * @brief Return the function pointer for xrPassthroughPauseFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughPauseFB getInstanceProcAddr_xrPassthroughPauseFB() const {
    return (reinterpret_cast<PFN_xrPassthroughPauseFB>(pfnPassthroughPauseFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrCreatePassthroughLayerFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreatePassthroughLayerFB
  getInstanceProcAddr_xrCreatePassthroughLayerFB() {
    XrResult result = populate_("xrCreatePassthroughLayerFB", pfnCreatePassthroughLayerFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreatePassthroughLayerFB>(pfnCreatePassthroughLayerFB));
  }
  /*!
   * @brief Return the function pointer for xrCreatePassthroughLayerFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreatePassthroughLayerFB
  getInstanceProcAddr_xrCreatePassthroughLayerFB() const {
    return (reinterpret_cast<PFN_xrCreatePassthroughLayerFB>(pfnCreatePassthroughLayerFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrDestroyPassthroughLayerFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPassthroughLayerFB
  getInstanceProcAddr_xrDestroyPassthroughLayerFB() {
    XrResult result = populate_("xrDestroyPassthroughLayerFB", pfnDestroyPassthroughLayerFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyPassthroughLayerFB>(pfnDestroyPassthroughLayerFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyPassthroughLayerFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPassthroughLayerFB
  getInstanceProcAddr_xrDestroyPassthroughLayerFB() const {
    return (reinterpret_cast<PFN_xrDestroyPassthroughLayerFB>(pfnDestroyPassthroughLayerFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrPassthroughLayerPauseFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerPauseFB getInstanceProcAddr_xrPassthroughLayerPauseFB() {
    XrResult result = populate_("xrPassthroughLayerPauseFB", pfnPassthroughLayerPauseFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerPauseFB>(pfnPassthroughLayerPauseFB));
  }
  /*!
   * @brief Return the function pointer for xrPassthroughLayerPauseFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerPauseFB
  getInstanceProcAddr_xrPassthroughLayerPauseFB() const {
    return (reinterpret_cast<PFN_xrPassthroughLayerPauseFB>(pfnPassthroughLayerPauseFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrPassthroughLayerResumeFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerResumeFB
  getInstanceProcAddr_xrPassthroughLayerResumeFB() {
    XrResult result = populate_("xrPassthroughLayerResumeFB", pfnPassthroughLayerResumeFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerResumeFB>(pfnPassthroughLayerResumeFB));
  }
  /*!
   * @brief Return the function pointer for xrPassthroughLayerResumeFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerResumeFB
  getInstanceProcAddr_xrPassthroughLayerResumeFB() const {
    return (reinterpret_cast<PFN_xrPassthroughLayerResumeFB>(pfnPassthroughLayerResumeFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrPassthroughLayerSetStyleFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerSetStyleFB
  getInstanceProcAddr_xrPassthroughLayerSetStyleFB() {
    XrResult result = populate_("xrPassthroughLayerSetStyleFB", pfnPassthroughLayerSetStyleFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerSetStyleFB>(pfnPassthroughLayerSetStyleFB));
  }
  /*!
   * @brief Return the function pointer for xrPassthroughLayerSetStyleFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerSetStyleFB
  getInstanceProcAddr_xrPassthroughLayerSetStyleFB() const {
    return (reinterpret_cast<PFN_xrPassthroughLayerSetStyleFB>(pfnPassthroughLayerSetStyleFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrCreateGeometryInstanceFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateGeometryInstanceFB
  getInstanceProcAddr_xrCreateGeometryInstanceFB() {
    XrResult result = populate_("xrCreateGeometryInstanceFB", pfnCreateGeometryInstanceFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateGeometryInstanceFB>(pfnCreateGeometryInstanceFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateGeometryInstanceFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateGeometryInstanceFB
  getInstanceProcAddr_xrCreateGeometryInstanceFB() const {
    return (reinterpret_cast<PFN_xrCreateGeometryInstanceFB>(pfnCreateGeometryInstanceFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrDestroyGeometryInstanceFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyGeometryInstanceFB
  getInstanceProcAddr_xrDestroyGeometryInstanceFB() {
    XrResult result = populate_("xrDestroyGeometryInstanceFB", pfnDestroyGeometryInstanceFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyGeometryInstanceFB>(pfnDestroyGeometryInstanceFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyGeometryInstanceFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyGeometryInstanceFB
  getInstanceProcAddr_xrDestroyGeometryInstanceFB() const {
    return (reinterpret_cast<PFN_xrDestroyGeometryInstanceFB>(pfnDestroyGeometryInstanceFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrGeometryInstanceSetTransformFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGeometryInstanceSetTransformFB
  getInstanceProcAddr_xrGeometryInstanceSetTransformFB() {
    XrResult result =
        populate_("xrGeometryInstanceSetTransformFB", pfnGeometryInstanceSetTransformFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrGeometryInstanceSetTransformFB>(pfnGeometryInstanceSetTransformFB));
  }
  /*!
   * @brief Return the function pointer for xrGeometryInstanceSetTransformFB (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGeometryInstanceSetTransformFB
  getInstanceProcAddr_xrGeometryInstanceSetTransformFB() const {
    return (
        reinterpret_cast<PFN_xrGeometryInstanceSetTransformFB>(pfnGeometryInstanceSetTransformFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_render_model
  /*!
   * @brief Return the function pointer for xrEnumerateRenderModelPathsFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateRenderModelPathsFB
  getInstanceProcAddr_xrEnumerateRenderModelPathsFB() {
    XrResult result = populate_("xrEnumerateRenderModelPathsFB", pfnEnumerateRenderModelPathsFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateRenderModelPathsFB>(pfnEnumerateRenderModelPathsFB));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateRenderModelPathsFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateRenderModelPathsFB
  getInstanceProcAddr_xrEnumerateRenderModelPathsFB() const {
    return (reinterpret_cast<PFN_xrEnumerateRenderModelPathsFB>(pfnEnumerateRenderModelPathsFB));
  }
#endif  // XR_FB_render_model

#ifdef XR_FB_render_model
  /*!
   * @brief Return the function pointer for xrGetRenderModelPropertiesFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelPropertiesFB
  getInstanceProcAddr_xrGetRenderModelPropertiesFB() {
    XrResult result = populate_("xrGetRenderModelPropertiesFB", pfnGetRenderModelPropertiesFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelPropertiesFB>(pfnGetRenderModelPropertiesFB));
  }
  /*!
   * @brief Return the function pointer for xrGetRenderModelPropertiesFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelPropertiesFB
  getInstanceProcAddr_xrGetRenderModelPropertiesFB() const {
    return (reinterpret_cast<PFN_xrGetRenderModelPropertiesFB>(pfnGetRenderModelPropertiesFB));
  }
#endif  // XR_FB_render_model

#ifdef XR_FB_render_model
  /*!
   * @brief Return the function pointer for xrLoadRenderModelFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrLoadRenderModelFB getInstanceProcAddr_xrLoadRenderModelFB() {
    XrResult result = populate_("xrLoadRenderModelFB", pfnLoadRenderModelFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLoadRenderModelFB>(pfnLoadRenderModelFB));
  }
  /*!
   * @brief Return the function pointer for xrLoadRenderModelFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLoadRenderModelFB getInstanceProcAddr_xrLoadRenderModelFB() const {
    return (reinterpret_cast<PFN_xrLoadRenderModelFB>(pfnLoadRenderModelFB));
  }
#endif  // XR_FB_render_model

#ifdef XR_VARJO_environment_depth_estimation
  /*!
   * @brief Return the function pointer for xrSetEnvironmentDepthEstimationVARJO, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetEnvironmentDepthEstimationVARJO
  getInstanceProcAddr_xrSetEnvironmentDepthEstimationVARJO() {
    XrResult result =
        populate_("xrSetEnvironmentDepthEstimationVARJO", pfnSetEnvironmentDepthEstimationVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetEnvironmentDepthEstimationVARJO>(
        pfnSetEnvironmentDepthEstimationVARJO));
  }
  /*!
   * @brief Return the function pointer for xrSetEnvironmentDepthEstimationVARJO (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetEnvironmentDepthEstimationVARJO
  getInstanceProcAddr_xrSetEnvironmentDepthEstimationVARJO() const {
    return (reinterpret_cast<PFN_xrSetEnvironmentDepthEstimationVARJO>(
        pfnSetEnvironmentDepthEstimationVARJO));
  }
#endif  // XR_VARJO_environment_depth_estimation

#ifdef XR_VARJO_marker_tracking
  /*!
   * @brief Return the function pointer for xrSetMarkerTrackingVARJO, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrSetMarkerTrackingVARJO getInstanceProcAddr_xrSetMarkerTrackingVARJO() {
    XrResult result = populate_("xrSetMarkerTrackingVARJO", pfnSetMarkerTrackingVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetMarkerTrackingVARJO>(pfnSetMarkerTrackingVARJO));
  }
  /*!
   * @brief Return the function pointer for xrSetMarkerTrackingVARJO (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetMarkerTrackingVARJO
  getInstanceProcAddr_xrSetMarkerTrackingVARJO() const {
    return (reinterpret_cast<PFN_xrSetMarkerTrackingVARJO>(pfnSetMarkerTrackingVARJO));
  }
#endif  // XR_VARJO_marker_tracking

#ifdef XR_VARJO_marker_tracking
  /*!
   * @brief Return the function pointer for xrSetMarkerTrackingTimeoutVARJO, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetMarkerTrackingTimeoutVARJO
  getInstanceProcAddr_xrSetMarkerTrackingTimeoutVARJO() {
    XrResult result =
        populate_("xrSetMarkerTrackingTimeoutVARJO", pfnSetMarkerTrackingTimeoutVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrSetMarkerTrackingTimeoutVARJO>(pfnSetMarkerTrackingTimeoutVARJO));
  }
  /*!
   * @brief Return the function pointer for xrSetMarkerTrackingTimeoutVARJO (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetMarkerTrackingTimeoutVARJO
  getInstanceProcAddr_xrSetMarkerTrackingTimeoutVARJO() const {
    return (
        reinterpret_cast<PFN_xrSetMarkerTrackingTimeoutVARJO>(pfnSetMarkerTrackingTimeoutVARJO));
  }
#endif  // XR_VARJO_marker_tracking

#ifdef XR_VARJO_marker_tracking
  /*!
   * @brief Return the function pointer for xrSetMarkerTrackingPredictionVARJO, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetMarkerTrackingPredictionVARJO
  getInstanceProcAddr_xrSetMarkerTrackingPredictionVARJO() {
    XrResult result =
        populate_("xrSetMarkerTrackingPredictionVARJO", pfnSetMarkerTrackingPredictionVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetMarkerTrackingPredictionVARJO>(
        pfnSetMarkerTrackingPredictionVARJO));
  }
  /*!
   * @brief Return the function pointer for xrSetMarkerTrackingPredictionVARJO (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetMarkerTrackingPredictionVARJO
  getInstanceProcAddr_xrSetMarkerTrackingPredictionVARJO() const {
    return (reinterpret_cast<PFN_xrSetMarkerTrackingPredictionVARJO>(
        pfnSetMarkerTrackingPredictionVARJO));
  }
#endif  // XR_VARJO_marker_tracking

#ifdef XR_VARJO_marker_tracking
  /*!
   * @brief Return the function pointer for xrGetMarkerSizeVARJO, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerSizeVARJO getInstanceProcAddr_xrGetMarkerSizeVARJO() {
    XrResult result = populate_("xrGetMarkerSizeVARJO", pfnGetMarkerSizeVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetMarkerSizeVARJO>(pfnGetMarkerSizeVARJO));
  }
  /*!
   * @brief Return the function pointer for xrGetMarkerSizeVARJO (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerSizeVARJO getInstanceProcAddr_xrGetMarkerSizeVARJO() const {
    return (reinterpret_cast<PFN_xrGetMarkerSizeVARJO>(pfnGetMarkerSizeVARJO));
  }
#endif  // XR_VARJO_marker_tracking

#ifdef XR_VARJO_marker_tracking
  /*!
   * @brief Return the function pointer for xrCreateMarkerSpaceVARJO, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateMarkerSpaceVARJO getInstanceProcAddr_xrCreateMarkerSpaceVARJO() {
    XrResult result = populate_("xrCreateMarkerSpaceVARJO", pfnCreateMarkerSpaceVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateMarkerSpaceVARJO>(pfnCreateMarkerSpaceVARJO));
  }
  /*!
   * @brief Return the function pointer for xrCreateMarkerSpaceVARJO (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateMarkerSpaceVARJO
  getInstanceProcAddr_xrCreateMarkerSpaceVARJO() const {
    return (reinterpret_cast<PFN_xrCreateMarkerSpaceVARJO>(pfnCreateMarkerSpaceVARJO));
  }
#endif  // XR_VARJO_marker_tracking

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorStoreConnectionMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorStoreConnectionMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorStoreConnectionMSFT() {
    XrResult result = populate_("xrCreateSpatialAnchorStoreConnectionMSFT",
                                pfnCreateSpatialAnchorStoreConnectionMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorStoreConnectionMSFT>(
        pfnCreateSpatialAnchorStoreConnectionMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorStoreConnectionMSFT (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorStoreConnectionMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorStoreConnectionMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorStoreConnectionMSFT>(
        pfnCreateSpatialAnchorStoreConnectionMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrDestroySpatialAnchorStoreConnectionMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialAnchorStoreConnectionMSFT
  getInstanceProcAddr_xrDestroySpatialAnchorStoreConnectionMSFT() {
    XrResult result = populate_("xrDestroySpatialAnchorStoreConnectionMSFT",
                                pfnDestroySpatialAnchorStoreConnectionMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialAnchorStoreConnectionMSFT>(
        pfnDestroySpatialAnchorStoreConnectionMSFT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpatialAnchorStoreConnectionMSFT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialAnchorStoreConnectionMSFT
  getInstanceProcAddr_xrDestroySpatialAnchorStoreConnectionMSFT() const {
    return (reinterpret_cast<PFN_xrDestroySpatialAnchorStoreConnectionMSFT>(
        pfnDestroySpatialAnchorStoreConnectionMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrPersistSpatialAnchorMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrPersistSpatialAnchorMSFT
  getInstanceProcAddr_xrPersistSpatialAnchorMSFT() {
    XrResult result = populate_("xrPersistSpatialAnchorMSFT", pfnPersistSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPersistSpatialAnchorMSFT>(pfnPersistSpatialAnchorMSFT));
  }
  /*!
   * @brief Return the function pointer for xrPersistSpatialAnchorMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPersistSpatialAnchorMSFT
  getInstanceProcAddr_xrPersistSpatialAnchorMSFT() const {
    return (reinterpret_cast<PFN_xrPersistSpatialAnchorMSFT>(pfnPersistSpatialAnchorMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrEnumeratePersistedSpatialAnchorNamesMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT
  getInstanceProcAddr_xrEnumeratePersistedSpatialAnchorNamesMSFT() {
    XrResult result = populate_("xrEnumeratePersistedSpatialAnchorNamesMSFT",
                                pfnEnumeratePersistedSpatialAnchorNamesMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT>(
        pfnEnumeratePersistedSpatialAnchorNamesMSFT));
  }
  /*!
   * @brief Return the function pointer for xrEnumeratePersistedSpatialAnchorNamesMSFT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT
  getInstanceProcAddr_xrEnumeratePersistedSpatialAnchorNamesMSFT() const {
    return (reinterpret_cast<PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT>(
        pfnEnumeratePersistedSpatialAnchorNamesMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorFromPersistedNameMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorFromPersistedNameMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorFromPersistedNameMSFT() {
    XrResult result = populate_("xrCreateSpatialAnchorFromPersistedNameMSFT",
                                pfnCreateSpatialAnchorFromPersistedNameMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPersistedNameMSFT>(
        pfnCreateSpatialAnchorFromPersistedNameMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorFromPersistedNameMSFT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorFromPersistedNameMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorFromPersistedNameMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPersistedNameMSFT>(
        pfnCreateSpatialAnchorFromPersistedNameMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrUnpersistSpatialAnchorMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrUnpersistSpatialAnchorMSFT
  getInstanceProcAddr_xrUnpersistSpatialAnchorMSFT() {
    XrResult result = populate_("xrUnpersistSpatialAnchorMSFT", pfnUnpersistSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorMSFT>(pfnUnpersistSpatialAnchorMSFT));
  }
  /*!
   * @brief Return the function pointer for xrUnpersistSpatialAnchorMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUnpersistSpatialAnchorMSFT
  getInstanceProcAddr_xrUnpersistSpatialAnchorMSFT() const {
    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorMSFT>(pfnUnpersistSpatialAnchorMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrClearSpatialAnchorStoreMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrClearSpatialAnchorStoreMSFT
  getInstanceProcAddr_xrClearSpatialAnchorStoreMSFT() {
    XrResult result = populate_("xrClearSpatialAnchorStoreMSFT", pfnClearSpatialAnchorStoreMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrClearSpatialAnchorStoreMSFT>(pfnClearSpatialAnchorStoreMSFT));
  }
  /*!
   * @brief Return the function pointer for xrClearSpatialAnchorStoreMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrClearSpatialAnchorStoreMSFT
  getInstanceProcAddr_xrClearSpatialAnchorStoreMSFT() const {
    return (reinterpret_cast<PFN_xrClearSpatialAnchorStoreMSFT>(pfnClearSpatialAnchorStoreMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_OCULUS_audio_device_guid
#if defined(XR_USE_PLATFORM_WIN32)
  /*!
   * @brief Return the function pointer for xrGetAudioOutputDeviceGuidOculus, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetAudioOutputDeviceGuidOculus
  getInstanceProcAddr_xrGetAudioOutputDeviceGuidOculus() {
    XrResult result =
        populate_("xrGetAudioOutputDeviceGuidOculus", pfnGetAudioOutputDeviceGuidOculus);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrGetAudioOutputDeviceGuidOculus>(pfnGetAudioOutputDeviceGuidOculus));
  }
  /*!
   * @brief Return the function pointer for xrGetAudioOutputDeviceGuidOculus (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetAudioOutputDeviceGuidOculus
  getInstanceProcAddr_xrGetAudioOutputDeviceGuidOculus() const {
    return (
        reinterpret_cast<PFN_xrGetAudioOutputDeviceGuidOculus>(pfnGetAudioOutputDeviceGuidOculus));
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_OCULUS_audio_device_guid

#ifdef XR_OCULUS_audio_device_guid
#if defined(XR_USE_PLATFORM_WIN32)
  /*!
   * @brief Return the function pointer for xrGetAudioInputDeviceGuidOculus, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetAudioInputDeviceGuidOculus
  getInstanceProcAddr_xrGetAudioInputDeviceGuidOculus() {
    XrResult result =
        populate_("xrGetAudioInputDeviceGuidOculus", pfnGetAudioInputDeviceGuidOculus);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrGetAudioInputDeviceGuidOculus>(pfnGetAudioInputDeviceGuidOculus));
  }
  /*!
   * @brief Return the function pointer for xrGetAudioInputDeviceGuidOculus (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetAudioInputDeviceGuidOculus
  getInstanceProcAddr_xrGetAudioInputDeviceGuidOculus() const {
    return (
        reinterpret_cast<PFN_xrGetAudioInputDeviceGuidOculus>(pfnGetAudioInputDeviceGuidOculus));
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_OCULUS_audio_device_guid

#ifdef XR_ALMALENCE_digital_lens_control
  /*!
   * @brief Return the function pointer for xrSetDigitalLensControlALMALENCE, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetDigitalLensControlALMALENCE
  getInstanceProcAddr_xrSetDigitalLensControlALMALENCE() {
    XrResult result =
        populate_("xrSetDigitalLensControlALMALENCE", pfnSetDigitalLensControlALMALENCE);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrSetDigitalLensControlALMALENCE>(pfnSetDigitalLensControlALMALENCE));
  }
  /*!
   * @brief Return the function pointer for xrSetDigitalLensControlALMALENCE (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetDigitalLensControlALMALENCE
  getInstanceProcAddr_xrSetDigitalLensControlALMALENCE() const {
    return (
        reinterpret_cast<PFN_xrSetDigitalLensControlALMALENCE>(pfnSetDigitalLensControlALMALENCE));
  }
#endif  // XR_ALMALENCE_digital_lens_control

#ifdef XR_FB_passthrough_keyboard_hands
  /*!
   * @brief Return the function pointer for xrPassthroughLayerSetKeyboardHandsIntensityFB,
   * populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB
  getInstanceProcAddr_xrPassthroughLayerSetKeyboardHandsIntensityFB() {
    XrResult result = populate_("xrPassthroughLayerSetKeyboardHandsIntensityFB",
                                pfnPassthroughLayerSetKeyboardHandsIntensityFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB>(
        pfnPassthroughLayerSetKeyboardHandsIntensityFB));
  }
  /*!
   * @brief Return the function pointer for xrPassthroughLayerSetKeyboardHandsIntensityFB (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB
  getInstanceProcAddr_xrPassthroughLayerSetKeyboardHandsIntensityFB() const {
    return (reinterpret_cast<PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB>(
        pfnPassthroughLayerSetKeyboardHandsIntensityFB));
  }
#endif  // XR_FB_passthrough_keyboard_hands

  //! @}
private:
  //! @brief Internal utility function to populate a function pointer if it is nullptr.
  OPENXR_HPP_INLINE XrResult populate_(const char* function_name, PFN_xrVoidFunction& pfn) {
    if (pfn == nullptr) {
      // Not exactly the right error, but not sure what's better.
      if (isEmpty()) return XR_ERROR_HANDLE_INVALID;
      return reinterpret_cast<PFN_xrGetInstanceProcAddr>(pfnGetInstanceProcAddr)(
          m_instance, function_name, &pfn);
    }
    return XR_SUCCESS;
  }
  XrInstance m_instance;
  PFN_xrVoidFunction pfnGetInstanceProcAddr{};
  PFN_xrVoidFunction pfnEnumerateApiLayerProperties{};
  PFN_xrVoidFunction pfnEnumerateInstanceExtensionProperties{};
  PFN_xrVoidFunction pfnCreateInstance{};
  PFN_xrVoidFunction pfnDestroyInstance{};
  PFN_xrVoidFunction pfnGetInstanceProperties{};
  PFN_xrVoidFunction pfnPollEvent{};
  PFN_xrVoidFunction pfnResultToString{};
  PFN_xrVoidFunction pfnStructureTypeToString{};
  PFN_xrVoidFunction pfnGetSystem{};
  PFN_xrVoidFunction pfnGetSystemProperties{};
  PFN_xrVoidFunction pfnEnumerateEnvironmentBlendModes{};
  PFN_xrVoidFunction pfnCreateSession{};
  PFN_xrVoidFunction pfnDestroySession{};
  PFN_xrVoidFunction pfnEnumerateReferenceSpaces{};
  PFN_xrVoidFunction pfnCreateReferenceSpace{};
  PFN_xrVoidFunction pfnGetReferenceSpaceBoundsRect{};
  PFN_xrVoidFunction pfnCreateActionSpace{};
  PFN_xrVoidFunction pfnLocateSpace{};
  PFN_xrVoidFunction pfnDestroySpace{};
  PFN_xrVoidFunction pfnEnumerateViewConfigurations{};
  PFN_xrVoidFunction pfnGetViewConfigurationProperties{};
  PFN_xrVoidFunction pfnEnumerateViewConfigurationViews{};
  PFN_xrVoidFunction pfnEnumerateSwapchainFormats{};
  PFN_xrVoidFunction pfnCreateSwapchain{};
  PFN_xrVoidFunction pfnDestroySwapchain{};
  PFN_xrVoidFunction pfnEnumerateSwapchainImages{};
  PFN_xrVoidFunction pfnAcquireSwapchainImage{};
  PFN_xrVoidFunction pfnWaitSwapchainImage{};
  PFN_xrVoidFunction pfnReleaseSwapchainImage{};
  PFN_xrVoidFunction pfnBeginSession{};
  PFN_xrVoidFunction pfnEndSession{};
  PFN_xrVoidFunction pfnRequestExitSession{};
  PFN_xrVoidFunction pfnWaitFrame{};
  PFN_xrVoidFunction pfnBeginFrame{};
  PFN_xrVoidFunction pfnEndFrame{};
  PFN_xrVoidFunction pfnLocateViews{};
  PFN_xrVoidFunction pfnStringToPath{};
  PFN_xrVoidFunction pfnPathToString{};
  PFN_xrVoidFunction pfnCreateActionSet{};
  PFN_xrVoidFunction pfnDestroyActionSet{};
  PFN_xrVoidFunction pfnCreateAction{};
  PFN_xrVoidFunction pfnDestroyAction{};
  PFN_xrVoidFunction pfnSuggestInteractionProfileBindings{};
  PFN_xrVoidFunction pfnAttachSessionActionSets{};
  PFN_xrVoidFunction pfnGetCurrentInteractionProfile{};
  PFN_xrVoidFunction pfnGetActionStateBoolean{};
  PFN_xrVoidFunction pfnGetActionStateFloat{};
  PFN_xrVoidFunction pfnGetActionStateVector2f{};
  PFN_xrVoidFunction pfnGetActionStatePose{};
  PFN_xrVoidFunction pfnSyncActions{};
  PFN_xrVoidFunction pfnEnumerateBoundSourcesForAction{};
  PFN_xrVoidFunction pfnGetInputSourceLocalizedName{};
  PFN_xrVoidFunction pfnApplyHapticFeedback{};
  PFN_xrVoidFunction pfnStopHapticFeedback{};
  PFN_xrVoidFunction pfnSetAndroidApplicationThreadKHR{};
  PFN_xrVoidFunction pfnCreateSwapchainAndroidSurfaceKHR{};
  PFN_xrVoidFunction pfnGetOpenGLGraphicsRequirementsKHR{};
  PFN_xrVoidFunction pfnGetOpenGLESGraphicsRequirementsKHR{};
  PFN_xrVoidFunction pfnGetVulkanInstanceExtensionsKHR{};
  PFN_xrVoidFunction pfnGetVulkanDeviceExtensionsKHR{};
  PFN_xrVoidFunction pfnGetVulkanGraphicsDeviceKHR{};
  PFN_xrVoidFunction pfnGetVulkanGraphicsRequirementsKHR{};
  PFN_xrVoidFunction pfnGetD3D11GraphicsRequirementsKHR{};
  PFN_xrVoidFunction pfnGetD3D12GraphicsRequirementsKHR{};
  PFN_xrVoidFunction pfnGetVisibilityMaskKHR{};
  PFN_xrVoidFunction pfnConvertWin32PerformanceCounterToTimeKHR{};
  PFN_xrVoidFunction pfnConvertTimeToWin32PerformanceCounterKHR{};
  PFN_xrVoidFunction pfnConvertTimespecTimeToTimeKHR{};
  PFN_xrVoidFunction pfnConvertTimeToTimespecTimeKHR{};
  PFN_xrVoidFunction pfnInitializeLoaderKHR{};
  PFN_xrVoidFunction pfnCreateVulkanInstanceKHR{};
  PFN_xrVoidFunction pfnCreateVulkanDeviceKHR{};
  PFN_xrVoidFunction pfnGetVulkanGraphicsDevice2KHR{};
  PFN_xrVoidFunction pfnGetVulkanGraphicsRequirements2KHR{};
  PFN_xrVoidFunction pfnPerfSettingsSetPerformanceLevelEXT{};
  PFN_xrVoidFunction pfnThermalGetTemperatureTrendEXT{};
  PFN_xrVoidFunction pfnSetDebugUtilsObjectNameEXT{};
  PFN_xrVoidFunction pfnCreateDebugUtilsMessengerEXT{};
  PFN_xrVoidFunction pfnDestroyDebugUtilsMessengerEXT{};
  PFN_xrVoidFunction pfnSubmitDebugUtilsMessageEXT{};
  PFN_xrVoidFunction pfnSessionBeginDebugUtilsLabelRegionEXT{};
  PFN_xrVoidFunction pfnSessionEndDebugUtilsLabelRegionEXT{};
  PFN_xrVoidFunction pfnSessionInsertDebugUtilsLabelEXT{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorMSFT{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorSpaceMSFT{};
  PFN_xrVoidFunction pfnDestroySpatialAnchorMSFT{};
  PFN_xrVoidFunction pfnSetInputDeviceActiveEXT{};
  PFN_xrVoidFunction pfnSetInputDeviceStateBoolEXT{};
  PFN_xrVoidFunction pfnSetInputDeviceStateFloatEXT{};
  PFN_xrVoidFunction pfnSetInputDeviceStateVector2fEXT{};
  PFN_xrVoidFunction pfnSetInputDeviceLocationEXT{};
  PFN_xrVoidFunction pfnCreateSpatialGraphNodeSpaceMSFT{};
  PFN_xrVoidFunction pfnCreateHandTrackerEXT{};
  PFN_xrVoidFunction pfnDestroyHandTrackerEXT{};
  PFN_xrVoidFunction pfnLocateHandJointsEXT{};
  PFN_xrVoidFunction pfnCreateHandMeshSpaceMSFT{};
  PFN_xrVoidFunction pfnUpdateHandMeshMSFT{};
  PFN_xrVoidFunction pfnGetControllerModelKeyMSFT{};
  PFN_xrVoidFunction pfnLoadControllerModelMSFT{};
  PFN_xrVoidFunction pfnGetControllerModelPropertiesMSFT{};
  PFN_xrVoidFunction pfnGetControllerModelStateMSFT{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorFromPerceptionAnchorMSFT{};
  PFN_xrVoidFunction pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT{};
  PFN_xrVoidFunction pfnEnumerateReprojectionModesMSFT{};
  PFN_xrVoidFunction pfnUpdateSwapchainFB{};
  PFN_xrVoidFunction pfnGetSwapchainStateFB{};
  PFN_xrVoidFunction pfnEnumerateSceneComputeFeaturesMSFT{};
  PFN_xrVoidFunction pfnCreateSceneObserverMSFT{};
  PFN_xrVoidFunction pfnDestroySceneObserverMSFT{};
  PFN_xrVoidFunction pfnCreateSceneMSFT{};
  PFN_xrVoidFunction pfnDestroySceneMSFT{};
  PFN_xrVoidFunction pfnComputeNewSceneMSFT{};
  PFN_xrVoidFunction pfnGetSceneComputeStateMSFT{};
  PFN_xrVoidFunction pfnGetSceneComponentsMSFT{};
  PFN_xrVoidFunction pfnLocateSceneComponentsMSFT{};
  PFN_xrVoidFunction pfnGetSceneMeshBuffersMSFT{};
  PFN_xrVoidFunction pfnDeserializeSceneMSFT{};
  PFN_xrVoidFunction pfnGetSerializedSceneFragmentDataMSFT{};
  PFN_xrVoidFunction pfnEnumerateDisplayRefreshRatesFB{};
  PFN_xrVoidFunction pfnGetDisplayRefreshRateFB{};
  PFN_xrVoidFunction pfnRequestDisplayRefreshRateFB{};
  PFN_xrVoidFunction pfnEnumerateViveTrackerPathsHTCX{};
  PFN_xrVoidFunction pfnCreateFacialTrackerHTC{};
  PFN_xrVoidFunction pfnDestroyFacialTrackerHTC{};
  PFN_xrVoidFunction pfnGetFacialExpressionsHTC{};
  PFN_xrVoidFunction pfnEnumerateColorSpacesFB{};
  PFN_xrVoidFunction pfnSetColorSpaceFB{};
  PFN_xrVoidFunction pfnGetHandMeshFB{};
  PFN_xrVoidFunction pfnCreateFoveationProfileFB{};
  PFN_xrVoidFunction pfnDestroyFoveationProfileFB{};
  PFN_xrVoidFunction pfnQuerySystemTrackedKeyboardFB{};
  PFN_xrVoidFunction pfnCreateKeyboardSpaceFB{};
  PFN_xrVoidFunction pfnCreateTriangleMeshFB{};
  PFN_xrVoidFunction pfnDestroyTriangleMeshFB{};
  PFN_xrVoidFunction pfnTriangleMeshGetVertexBufferFB{};
  PFN_xrVoidFunction pfnTriangleMeshGetIndexBufferFB{};
  PFN_xrVoidFunction pfnTriangleMeshBeginUpdateFB{};
  PFN_xrVoidFunction pfnTriangleMeshEndUpdateFB{};
  PFN_xrVoidFunction pfnTriangleMeshBeginVertexBufferUpdateFB{};
  PFN_xrVoidFunction pfnTriangleMeshEndVertexBufferUpdateFB{};
  PFN_xrVoidFunction pfnCreatePassthroughFB{};
  PFN_xrVoidFunction pfnDestroyPassthroughFB{};
  PFN_xrVoidFunction pfnPassthroughStartFB{};
  PFN_xrVoidFunction pfnPassthroughPauseFB{};
  PFN_xrVoidFunction pfnCreatePassthroughLayerFB{};
  PFN_xrVoidFunction pfnDestroyPassthroughLayerFB{};
  PFN_xrVoidFunction pfnPassthroughLayerPauseFB{};
  PFN_xrVoidFunction pfnPassthroughLayerResumeFB{};
  PFN_xrVoidFunction pfnPassthroughLayerSetStyleFB{};
  PFN_xrVoidFunction pfnCreateGeometryInstanceFB{};
  PFN_xrVoidFunction pfnDestroyGeometryInstanceFB{};
  PFN_xrVoidFunction pfnGeometryInstanceSetTransformFB{};
  PFN_xrVoidFunction pfnEnumerateRenderModelPathsFB{};
  PFN_xrVoidFunction pfnGetRenderModelPropertiesFB{};
  PFN_xrVoidFunction pfnLoadRenderModelFB{};
  PFN_xrVoidFunction pfnSetEnvironmentDepthEstimationVARJO{};
  PFN_xrVoidFunction pfnSetMarkerTrackingVARJO{};
  PFN_xrVoidFunction pfnSetMarkerTrackingTimeoutVARJO{};
  PFN_xrVoidFunction pfnSetMarkerTrackingPredictionVARJO{};
  PFN_xrVoidFunction pfnGetMarkerSizeVARJO{};
  PFN_xrVoidFunction pfnCreateMarkerSpaceVARJO{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorStoreConnectionMSFT{};
  PFN_xrVoidFunction pfnDestroySpatialAnchorStoreConnectionMSFT{};
  PFN_xrVoidFunction pfnPersistSpatialAnchorMSFT{};
  PFN_xrVoidFunction pfnEnumeratePersistedSpatialAnchorNamesMSFT{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorFromPersistedNameMSFT{};
  PFN_xrVoidFunction pfnUnpersistSpatialAnchorMSFT{};
  PFN_xrVoidFunction pfnClearSpatialAnchorStoreMSFT{};
  PFN_xrVoidFunction pfnGetAudioOutputDeviceGuidOculus{};
  PFN_xrVoidFunction pfnGetAudioInputDeviceGuidOculus{};
  PFN_xrVoidFunction pfnSetDigitalLensControlALMALENCE{};
  PFN_xrVoidFunction pfnPassthroughLayerSetKeyboardHandsIntensityFB{};
};

#ifndef OPENXR_HPP_DOXYGEN
// forward declare and manually defining trait to avoid include
namespace traits {
  template <typename T>
  struct is_dispatch;
  template <>
  struct is_dispatch<::OPENXR_HPP_NAMESPACE::DispatchLoaderDynamic> : std::true_type {};
}  // namespace traits
#endif  // !OPENXR_HPP_DOXYGEN

}  // namespace OPENXR_HPP_NAMESPACE

#endif  // ifndef OPENXR_DISPATCH_DYNAMIC_HPP_
