// *********** THIS FILE IS GENERATED - DO NOT EDIT ***********
//     See cpp_generator.py for modifications
// ************************************************************

/*
** Copyright (c) 2017-2021 The Khronos Group Inc.
** Copyright (c) 2019-2021 Collabora, Ltd.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** ---- Exceptions to the Apache 2.0 License: ----
**
** As an exception, if you use this Software to generate code and portions of
** this Software are embedded into the generated code as a result, you may
** redistribute such product without providing attribution as would otherwise
** be required by Sections 4(a), 4(b) and 4(d) of the License.
**
** In addition, if you combine or link code generated by this Software with
** software that is licensed under the GPLv2 or the LGPL v2.0 or 2.1
** ("`Combined Software`") and if a court of competent jurisdiction determines
** that the patent provision (Section 3), the indemnity provision (Section 9)
** or other Section of the License conflicts with the conditions of the
** applicable GPL or LGPL license, you may retroactively and prospectively
** choose to deem waived or otherwise exclude such Section(s) of the License,
** but only in their entirety and only with respect to the Combined Software.
**
*/

/*
** This header is generated from the Khronos OpenXR XML API Registry.
**
*/
#ifndef OPENXR_ATOMS_HPP_
#define OPENXR_ATOMS_HPP_
/**
 * @file
 * @brief C++ projections of OpenXR atom types.
 * @ingroup atoms
 */

#include <openxr/openxr.h>

#ifdef OPENXR_HPP_DOXYGEN
#include <openxr/openxr_platform.h>
#endif

#if !defined(OPENXR_HPP_INLINE)
#if defined(__clang___)
#if __has_attribute(always_inline)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#else
#define OPENXR_HPP_INLINE inline
#endif
#elif defined(__GNUC__)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#elif defined(_MSC_VER)
#define OPENXR_HPP_INLINE inline
#else
#define OPENXR_HPP_INLINE inline
#endif
#endif  // !OPENXR_HPP_INLINE

#if !defined(OPENXR_HPP_CONSTEXPR)
#if defined(_MSC_VER) && (_MSC_VER <= 1800)
#define OPENXR_HPP_CONSTEXPR
#else
#define OPENXR_HPP_CONSTEXPR constexpr
#endif
#endif  // !OPENXR_HPP_CONSTEXPR

#if !defined(OPENXR_HPP_SWITCH_CONSTEXPR)
//! @todo set this to constexpr in c++14
#define OPENXR_HPP_SWITCH_CONSTEXPR
#endif  // !OPENXR_HPP_SWITCH_CONSTEXPR

#if !defined(OPENXR_HPP_NAMESPACE)
#define OPENXR_HPP_NAMESPACE xr
#endif  // !OPENXR_HPP_NAMESPACE

#if !defined(OPENXR_HPP_STRINGIFY)
#define OPENXR_HPP_STRINGIFY2(text) #text
#define OPENXR_HPP_STRINGIFY(text) OPENXR_HPP_STRINGIFY2(text)
#define OPENXR_HPP_NAMESPACE_STRING OPENXR_HPP_STRINGIFY(OPENXR_HPP_NAMESPACE)
#endif  // !OPENXR_HPP_STRINGIFY
/*!
 * @defgroup atoms Atoms
 * @brief C++ projections of OpenXR atoms: opaque values with no explicit lifetime,
 * but that are only valid within the instance they are retrieved from.
 * @ingroup wrappers
 */
namespace OPENXR_HPP_NAMESPACE {

/*!
 * @brief Type-safe wrapper for an XrSystemId atom.
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSystemId>
 *
 * @xrentity{XrSystemId}
 * @ingroup atoms
 */
class SystemId {
public:
  /*!
   * @name Constructors, assignment, and conversions
   * @{
   */
  //! Default constructor.
  OPENXR_HPP_CONSTEXPR SystemId() noexcept = default;

  //! Explicit constructor from raw XrSystemId value
  OPENXR_HPP_CONSTEXPR explicit SystemId(XrSystemId v) noexcept : val_(v) {}

  //! Return a null value.
  static OPENXR_HPP_CONSTEXPR SystemId null() noexcept { return {}; }
  //! @}
  /*!
   * @name Validity checking
   * @{
   */

  //! Returns true in conditionals if this SystemId value is valid
  OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != XR_NULL_SYSTEM_ID; }

  //! Unary negation: True if this SystemId value is invalid
  OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == XR_NULL_SYSTEM_ID; }

  //! @}
  /*!
   * @name Raw XrSystemId manipulation
   * @{
   */
  //! Gets the raw XrSystemId value.
  OPENXR_HPP_CONSTEXPR XrSystemId get() const noexcept { return val_; }
  /*!
   * @brief Clears this value, then returns the address of the raw XrSystemId value,
   * for use in creation/assignment.
   */
  XrSystemId *put(bool clear = true) noexcept {
    if (clear) val_ = XR_NULL_SYSTEM_ID;
    return &val_;
  }
  //! @}

private:
  XrSystemId val_{XR_NULL_SYSTEM_ID};
};

static_assert(sizeof(XrSystemId) == sizeof(SystemId),
              "Original type and wrapper have different size!");

/*!
 * @brief Free function for getting the raw XrSystemId from an SystemId value.
 *
 * @found_by_adl
 * @see SystemId::get()
 * @relates SystemId
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrSystemId get(SystemId v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrSystemId from
 * an SystemId value.
 *
 * @found_by_adl
 * @see SystemId::put( )
 * @relates SystemId
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrSystemId *put(SystemId &v, bool clear = true) noexcept {
  return v.put(clear);
}
//! @brief `==` comparison between SystemId values.
//! @relates SystemId
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(SystemId lhs, SystemId rhs) noexcept {
  return lhs.get() == rhs.get();
}
//! @brief `!=` comparison between SystemId values.
//! @relates SystemId
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(SystemId lhs, SystemId rhs) noexcept {
  return lhs.get() != rhs.get();
}
//! @brief `==` comparison between SystemId and raw XrSystemId.
//! @relates SystemId
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(SystemId lhs, XrSystemId rhs) noexcept {
  return lhs.get() == rhs;
}
//! @brief `==` comparison between raw XrSystemId and SystemId.
//! @relates SystemId
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrSystemId lhs, SystemId rhs) noexcept {
  return lhs == rhs.get();
}
//! @brief `!=` comparison between SystemId and raw XrSystemId.
//! @relates SystemId
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(SystemId lhs, XrSystemId rhs) noexcept {
  return lhs.get() != rhs;
}
//! @brief `!=` comparison between raw XrSystemId and SystemId.
//! @relates SystemId
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrSystemId lhs, SystemId rhs) noexcept {
  return lhs != rhs.get();
}

/*!
 * @brief Type-safe wrapper for an XrPath atom.
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPath>
 *
 * @xrentity{XrPath}
 * @ingroup atoms
 */
class Path {
public:
  /*!
   * @name Constructors, assignment, and conversions
   * @{
   */
  //! Default constructor.
  OPENXR_HPP_CONSTEXPR Path() noexcept = default;

  //! Explicit constructor from raw XrPath value
  OPENXR_HPP_CONSTEXPR explicit Path(XrPath v) noexcept : val_(v) {}

  //! Return a null value.
  static OPENXR_HPP_CONSTEXPR Path null() noexcept { return {}; }
  //! @}
  /*!
   * @name Validity checking
   * @{
   */

  //! Returns true in conditionals if this Path value is valid
  OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != XR_NULL_PATH; }

  //! Unary negation: True if this Path value is invalid
  OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == XR_NULL_PATH; }

  //! @}
  /*!
   * @name Raw XrPath manipulation
   * @{
   */
  //! Gets the raw XrPath value.
  OPENXR_HPP_CONSTEXPR XrPath get() const noexcept { return val_; }
  /*!
   * @brief Clears this value, then returns the address of the raw XrPath value,
   * for use in creation/assignment.
   */
  XrPath *put(bool clear = true) noexcept {
    if (clear) val_ = XR_NULL_PATH;
    return &val_;
  }
  //! @}

private:
  XrPath val_{XR_NULL_PATH};
};

static_assert(sizeof(XrPath) == sizeof(Path), "Original type and wrapper have different size!");

/*!
 * @brief Free function for getting the raw XrPath from an Path value.
 *
 * @found_by_adl
 * @see Path::get()
 * @relates Path
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrPath get(Path v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrPath from an
 * Path value.
 *
 * @found_by_adl
 * @see Path::put( )
 * @relates Path
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrPath *put(Path &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `==` comparison between Path values.
//! @relates Path
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(Path lhs, Path rhs) noexcept {
  return lhs.get() == rhs.get();
}
//! @brief `!=` comparison between Path values.
//! @relates Path
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(Path lhs, Path rhs) noexcept {
  return lhs.get() != rhs.get();
}
//! @brief `==` comparison between Path and raw XrPath.
//! @relates Path
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(Path lhs, XrPath rhs) noexcept {
  return lhs.get() == rhs;
}
//! @brief `==` comparison between raw XrPath and Path.
//! @relates Path
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrPath lhs, Path rhs) noexcept {
  return lhs == rhs.get();
}
//! @brief `!=` comparison between Path and raw XrPath.
//! @relates Path
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(Path lhs, XrPath rhs) noexcept {
  return lhs.get() != rhs;
}
//! @brief `!=` comparison between raw XrPath and Path.
//! @relates Path
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrPath lhs, Path rhs) noexcept {
  return lhs != rhs.get();
}

/*!
 * @brief Type-safe wrapper for an XrRenderModelKeyFB atom.
 *
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrRenderModelKeyFB>
 *
 * @xrentity{XrRenderModelKeyFB}
 * @ingroup atoms
 */
class RenderModelKeyFB {
public:
  /*!
   * @name Constructors, assignment, and conversions
   * @{
   */
  //! Default constructor.
  OPENXR_HPP_CONSTEXPR RenderModelKeyFB() noexcept = default;

  //! Explicit constructor from raw XrRenderModelKeyFB value
  OPENXR_HPP_CONSTEXPR explicit RenderModelKeyFB(XrRenderModelKeyFB v) noexcept : val_(v) {}

  //! Return a null value.
  static OPENXR_HPP_CONSTEXPR RenderModelKeyFB null() noexcept { return {}; }
  //! @}
  /*!
   * @name Validity checking
   * @{
   */

  //! Returns true in conditionals if this RenderModelKeyFB value is valid
  OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept {
    return val_ != XR_NULL_RENDER_MODEL_KEY_FB;
  }

  //! Unary negation: True if this RenderModelKeyFB value is invalid
  OPENXR_HPP_CONSTEXPR bool operator!() const noexcept {
    return val_ == XR_NULL_RENDER_MODEL_KEY_FB;
  }

  //! @}
  /*!
   * @name Raw XrRenderModelKeyFB manipulation
   * @{
   */
  //! Gets the raw XrRenderModelKeyFB value.
  OPENXR_HPP_CONSTEXPR XrRenderModelKeyFB get() const noexcept { return val_; }
  /*!
   * @brief Clears this value, then returns the address of the raw XrRenderModelKeyFB value,
   * for use in creation/assignment.
   */
  XrRenderModelKeyFB *put(bool clear = true) noexcept {
    if (clear) val_ = XR_NULL_RENDER_MODEL_KEY_FB;
    return &val_;
  }
  //! @}

private:
  XrRenderModelKeyFB val_{XR_NULL_RENDER_MODEL_KEY_FB};
};

static_assert(sizeof(XrRenderModelKeyFB) == sizeof(RenderModelKeyFB),
              "Original type and wrapper have different size!");

/*!
 * @brief Free function for getting the raw XrRenderModelKeyFB from an RenderModelKeyFB value.
 *
 * @found_by_adl
 * @see RenderModelKeyFB::get()
 * @relates RenderModelKeyFB
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrRenderModelKeyFB get(RenderModelKeyFB v) noexcept {
  return v.get();
}
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw
 * XrRenderModelKeyFB from an RenderModelKeyFB value.
 *
 * @found_by_adl
 * @see RenderModelKeyFB::put( )
 * @relates RenderModelKeyFB
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrRenderModelKeyFB *put(RenderModelKeyFB &v, bool clear = true) noexcept {
  return v.put(clear);
}
//! @brief `==` comparison between RenderModelKeyFB values.
//! @relates RenderModelKeyFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(RenderModelKeyFB lhs,
                                                       RenderModelKeyFB rhs) noexcept {
  return lhs.get() == rhs.get();
}
//! @brief `!=` comparison between RenderModelKeyFB values.
//! @relates RenderModelKeyFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(RenderModelKeyFB lhs,
                                                       RenderModelKeyFB rhs) noexcept {
  return lhs.get() != rhs.get();
}
//! @brief `==` comparison between RenderModelKeyFB and raw XrRenderModelKeyFB.
//! @relates RenderModelKeyFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(RenderModelKeyFB lhs,
                                                       XrRenderModelKeyFB rhs) noexcept {
  return lhs.get() == rhs;
}
//! @brief `==` comparison between raw XrRenderModelKeyFB and RenderModelKeyFB.
//! @relates RenderModelKeyFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrRenderModelKeyFB lhs,
                                                       RenderModelKeyFB rhs) noexcept {
  return lhs == rhs.get();
}
//! @brief `!=` comparison between RenderModelKeyFB and raw XrRenderModelKeyFB.
//! @relates RenderModelKeyFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(RenderModelKeyFB lhs,
                                                       XrRenderModelKeyFB rhs) noexcept {
  return lhs.get() != rhs;
}
//! @brief `!=` comparison between raw XrRenderModelKeyFB and RenderModelKeyFB.
//! @relates RenderModelKeyFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrRenderModelKeyFB lhs,
                                                       RenderModelKeyFB rhs) noexcept {
  return lhs != rhs.get();
}
}  // namespace OPENXR_HPP_NAMESPACE

#endif  // ifndef OPENXR_ATOMS_HPP_
